[{"/Users/lehoa/icetea/work/redkite/frontend-user/src/index.tsx":"1","/Users/lehoa/icetea/work/redkite/frontend-user/src/reportWebVitals.ts":"2","/Users/lehoa/icetea/work/redkite/frontend-user/src/App.tsx":"3","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/configureStore.ts":"4","/Users/lehoa/icetea/work/redkite/frontend-user/src/routes.tsx":"5","/Users/lehoa/icetea/work/redkite/frontend-user/src/themes/DefaultTheme/DefaultTheme.tsx":"6","/Users/lehoa/icetea/work/redkite/frontend-user/src/AppContext.ts":"7","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/appNetwork.ts":"8","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/alert.ts":"9","/Users/lehoa/icetea/work/redkite/frontend-user/src/AppContainer.tsx":"10","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/hooks/useProviderConnect.ts":"11","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Register/InvestorRegister.tsx":"12","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ForgotPassword/InvestorForgotPassword.tsx":"13","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Login/InvestorLogin.tsx":"14","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ResetPassword/InvestorResetPassword.tsx":"15","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ComingSoon/ComingSoon.tsx":"16","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/index.ts":"17","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/ErrorBoundary/index.ts":"18","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/appNetwork.ts":"19","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/alert.ts":"20","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/user.ts":"21","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/user.ts":"22","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/index.tsx":"23","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ChangePassword/index.tsx":"24","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/NetworkChange/index.tsx":"25","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Landing/index.tsx":"26","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Pools/index.tsx":"27","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/PrivacyPolicy/index.tsx":"28","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ConfirmEmail/index.tsx":"29","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Dashboard/index.tsx":"30","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/NotFoundPage/index.tsx":"31","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Terms/index.tsx":"32","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/index.tsx":"33","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/wallet.ts":"34","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useTypedSelector.ts":"35","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/usePrevious.ts":"36","/Users/lehoa/icetea/work/redkite/frontend-user/src/services/web3.ts":"37","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/setupNetwork.ts":"38","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/getAccountBalance.ts":"39","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/convertDate.ts":"40","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ComingSoon/style.ts":"41","/Users/lehoa/icetea/work/redkite/frontend-user/src/constants/network.ts":"42","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/network/getAppNetworkName.ts":"43","/Users/lehoa/icetea/work/redkite/frontend-user/src/constants/connectors.ts":"44","/Users/lehoa/icetea/work/redkite/frontend-user/src/request/Request.ts":"45","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ComingSoon/CountDownCounter.tsx":"46","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/Logo.tsx":"47","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/TextTitle.tsx":"48","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/TextSubTitle.tsx":"49","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/InvestorLayout.tsx":"50","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/message.ts":"51","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/sota-tiers.ts":"52","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/sota-token.ts":"53","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/index.ts":"54","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/wallet.ts":"55","/Users/lehoa/icetea/work/redkite/frontend-user/src/constants.ts":"56","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useUserTier.ts":"57","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useTokenDetails.ts":"58","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useFetch.ts":"59","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useAuth.ts":"60","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/ErrorBoundary/ErrorBoundary.tsx":"61","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/style.ts":"62","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/sota-token.ts":"63","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/sota-tiers.ts":"64","/Users/lehoa/icetea/work/redkite/frontend-user/src/connectors/Fortmatic.ts":"65","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/balance.ts":"66","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Terms/style.ts":"67","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/Button/index.tsx":"68","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/getPoolStatus.ts":"69","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/getPoolStatusByPoolDetail.ts":"70","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/style_dark.ts":"71","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/usePools.ts":"72","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Dashboard/style.ts":"73","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ConfirmEmail/style.ts":"74","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/PrivacyPolicy/style.ts":"75","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/message.ts":"76","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/sota-tiers.ts":"77","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/sota-token.ts":"78","/Users/lehoa/icetea/work/redkite/frontend-user/src/services/axios.ts":"79","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/contract.ts":"80","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Layout/DefaultLayout/index.ts":"81","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/balance.ts":"82","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/TierInfomation/index.tsx":"83","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ManageTier/index.tsx":"84","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/AccountInformation/index.tsx":"85","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/Tiers/index.tsx":"86","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/Button/style.ts":"87","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/BackgroundComponent/index.tsx":"88","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Dashboard/Card/index.tsx":"89","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/formatNumber.ts":"90","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/getUserTierAlias.ts":"91","/Users/lehoa/icetea/work/redkite/frontend-user/src/styles/CommonStyle.ts":"92","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/Tiers/style.ts":"93","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Layout/DefaultLayout/DefaultLayout.tsx":"94","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/campaign.ts":"95","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/usdt.ts":"96","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Dashboard/Card/style.ts":"97","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/BackgroundComponent/style.ts":"98","/Users/lehoa/icetea/work/redkite/frontend-user/src/styles/index.ts":"99","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/index.ts":"100","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/FooterLandingLayout/index.ts":"101","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/MainDefaultLayout/index.ts":"102","/Users/lehoa/icetea/work/redkite/frontend-user/src/styles/TableStyle.ts":"103","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/HeaderDefaultLayout.tsx":"104","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/FooterLandingLayout/FooterLandingLayout.tsx":"105","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/MainDefaultLayout/MainDefaultLayout.tsx":"106","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/wallet.ts":"107","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/accountAddress.ts":"108","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/styles.ts":"109","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/FooterLandingLayout/styles.ts":"110","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/MainDefaultLayout/styles.ts":"111","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/context/HeaderContext.ts":"112","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/WalletDisconnect/index.tsx":"113","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/AppNetworkSwitch/index.tsx":"114","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/ConnectWalletModal/index.tsx":"115","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/ButtonLink/index.tsx":"116","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/ButtonLink/style.ts":"117","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/ConnectWalletModal/style.ts":"118","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/AppNetworkSwitch/style.ts":"119","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/WalletDisconnect/style.ts":"120","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/ConnectWalletBox/index.tsx":"121","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/ConnectWalletBox/style.ts":"122","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/AccountInformation/style.ts":"123","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/TierInfomation/style.ts":"124","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ManageTier/style.ts":"125","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalVerifyEmail/index.tsx":"126","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalTransaction/index.tsx":"127","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalWithdraw/index.tsx":"128","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalDeposit/index.tsx":"129","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalTransaction/style.ts":"130","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalDeposit/style.ts":"131","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalWithdraw/style.ts":"132","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalVerifyEmail/style.ts":"133","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useWalletSignature.ts":"134","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Pools/style.ts":"135","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/network.ts":"136","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Landing/style.ts":"137","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/NetworkChange/style.ts":"138","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ChangePassword/style.ts":"139","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/message.ts":"140","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/style.ts":"141","/Users/lehoa/icetea/work/redkite/frontend-user/src/constants/alert.ts":"142","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/getPoolCountDown.ts":"143","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/usePoolDetails.ts":"144","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useTokenSoldProgress.ts":"145","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/usePoolJoinAction.ts":"146","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/PoolIsEndMessage/PoolIsEndMessage.tsx":"147","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/WhiteListUserGuideBanner/WhiteListUserGuideBanner.tsx":"148","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/PoolInfoTable/PoolInfoTable.tsx":"149","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/usePoolDetailsMapping.ts":"150","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/appNetwork.ts":"151","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/setting-owner.ts":"152","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/usdt-detail.ts":"153","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/balance.ts":"154","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/setting-revenue-address.ts":"155","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/setting-deactivate.ts":"156","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/setting-fee-rate.ts":"157","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/usdt-allowance.ts":"158","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/usdt-approve.ts":"159","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/claim-token.ts":"160","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/setting-detail.ts":"161","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/buy-token.ts":"162","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/token.ts":"163","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/alert.ts":"164","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/user.ts":"165","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/affiliate.ts":"166","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/transaction.ts":"167","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/campaign.ts":"168","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Layout/LandingLayout/index.ts":"169","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Pools/Pool/index.tsx":"170","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Landing/ModalContent/index.tsx":"171","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Landing/Card/index.tsx":"172","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/setting-detail.js":"173","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/setting-owner.ts":"174","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/usdt-detail.ts":"175","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/setting-deactivate.ts":"176","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/setting-revenue-address.ts":"177","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/setting-fee-rate.ts":"178","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/MyTier/index.tsx":"179","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/Button/index.tsx":"180","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/StatusBar/index.tsx":"181","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/Countdown/index.tsx":"182","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/BuyTokenForm/index.tsx":"183","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/PoolAbout/index.tsx":"184","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/LotteryWinners/index.tsx":"185","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/ClaimToken/index.tsx":"186","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/usdt-allowance.ts":"187","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/usdt-approve.ts":"188","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/claim-token.ts":"189","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/buy-token.ts":"190","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/token.ts":"191","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/PoolInfoTable/ExchangeRateUsdtRow.tsx":"192","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/PoolInfoTable/ExchangeRateEthRow.tsx":"193","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/affiliate.ts":"194","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/transaction.ts":"195","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/campaign.ts":"196","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Pools/Pool/style.ts":"197","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Layout/LandingLayout/LandingLayout.tsx":"198","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Landing/ModalContent/style.ts":"199","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Landing/Card/style.ts":"200","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/user.ts":"201","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ForgotPassword/style.ts":"202","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Login/style.ts":"203","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Register/style.ts":"204","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useDetectClaimConfigApplying.ts":"205","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useTokenClaim.ts":"206","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useUserRemainTokensClaim.ts":"207","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/ClaimToken/style.ts":"208","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/LotteryWinners/style.ts":"209","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/PoolAbout/style.ts":"210","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useTokenSold.ts":"211","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useTokenApprove.ts":"212","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/usePoolDepositAction.ts":"213","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/ClaimToken/ClaimInfo.tsx":"214","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useUserPurchased.ts":"215","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useTokenAllowance.ts":"216","/Users/lehoa/icetea/work/redkite/frontend-user/src/constants/purchasableCurrency.ts":"217","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useTokenBalance.ts":"218","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useUserClaimSignature.ts":"219","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/BuyTokenForm/style.ts":"220","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/contractAddress/getAddresses.ts":"221","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/StatusBar/style.ts":"222","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/Countdown/style.ts":"223","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/Button/style.ts":"224","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useGetAirdrop.ts":"225","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/MyTier/style.ts":"226","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useUserPurchaseSignature.ts":"227","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/TransactionSubmitModal/index.tsx":"228","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/MyTier/TierTableWithWeightRate.tsx":"229","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/ConnectYourWallet.tsx":"230","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderLandingLayout/index.ts":"231","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/TransactionSubmitModal/style.ts":"232","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderLandingLayout/HeaderLandingLayout.tsx":"233","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderLandingLayout/styles.ts":"234","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/JoinPolkaSmith/index.tsx":"235","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/JoinPolkaSmith/style.ts":"236"},{"size":500,"mtime":1623470580982,"results":"237","hashOfConfig":"238"},{"size":425,"mtime":1623470581009,"results":"239","hashOfConfig":"238"},{"size":1090,"mtime":1623593992509,"results":"240","hashOfConfig":"238"},{"size":1094,"mtime":1623470581013,"results":"241","hashOfConfig":"238"},{"size":6164,"mtime":1623637016147,"results":"242","hashOfConfig":"238"},{"size":887,"mtime":1623470581042,"results":"243","hashOfConfig":"238"},{"size":861,"mtime":1623470580959,"results":"244","hashOfConfig":"238"},{"size":1682,"mtime":1623470581010,"results":"245","hashOfConfig":"238"},{"size":508,"mtime":1623470581010,"results":"246","hashOfConfig":"238"},{"size":6155,"mtime":1623593992509,"results":"247","hashOfConfig":"238"},{"size":10545,"mtime":1623593992510,"results":"248","hashOfConfig":"238"},{"size":5892,"mtime":1623593931365,"results":"249","hashOfConfig":"238"},{"size":4434,"mtime":1623470581001,"results":"250","hashOfConfig":"238"},{"size":5890,"mtime":1623470581004,"results":"251","hashOfConfig":"238"},{"size":6456,"mtime":1623470581008,"results":"252","hashOfConfig":"238"},{"size":1561,"mtime":1623593931359,"results":"253","hashOfConfig":"238"},{"size":4050,"mtime":1623470581017,"results":"254","hashOfConfig":"238"},{"size":75,"mtime":1623470580963,"results":"255","hashOfConfig":"238"},{"size":784,"mtime":1623470581014,"results":"256","hashOfConfig":"238"},{"size":268,"mtime":1623470581014,"results":"257","hashOfConfig":"238"},{"size":2448,"mtime":1623470581016,"results":"258","hashOfConfig":"238"},{"size":15465,"mtime":1623470581013,"results":"259","hashOfConfig":"238"},{"size":27463,"mtime":1623594008322,"results":"260","hashOfConfig":"238"},{"size":6324,"mtime":1623470580998,"results":"261","hashOfConfig":"238"},{"size":697,"mtime":1623470581005,"results":"262","hashOfConfig":"238"},{"size":6635,"mtime":1623593931363,"results":"263","hashOfConfig":"238"},{"size":6806,"mtime":1623593992523,"results":"264","hashOfConfig":"238"},{"size":10405,"mtime":1623593931364,"results":"265","hashOfConfig":"238"},{"size":2512,"mtime":1623593931360,"results":"266","hashOfConfig":"238"},{"size":5824,"mtime":1623594008322,"results":"267","hashOfConfig":"238"},{"size":397,"mtime":1623470581005,"results":"268","hashOfConfig":"238"},{"size":17751,"mtime":1623593931365,"results":"269","hashOfConfig":"238"},{"size":5419,"mtime":1623593992515,"results":"270","hashOfConfig":"238"},{"size":1059,"mtime":1623470581013,"results":"271","hashOfConfig":"238"},{"size":192,"mtime":1623470580981,"results":"272","hashOfConfig":"238"},{"size":636,"mtime":1623470580979,"results":"273","hashOfConfig":"238"},{"size":4511,"mtime":1623593992524,"results":"274","hashOfConfig":"238"},{"size":1817,"mtime":1623593992526,"results":"275","hashOfConfig":"238"},{"size":906,"mtime":1623470581044,"results":"276","hashOfConfig":"238"},{"size":2222,"mtime":1623593992524,"results":"277","hashOfConfig":"238"},{"size":1952,"mtime":1623470580999,"results":"278","hashOfConfig":"238"},{"size":2913,"mtime":1623593992511,"results":"279","hashOfConfig":"238"},{"size":149,"mtime":1623470581045,"results":"280","hashOfConfig":"238"},{"size":5398,"mtime":1623593992511,"results":"281","hashOfConfig":"238"},{"size":3590,"mtime":1623470581009,"results":"282","hashOfConfig":"238"},{"size":3328,"mtime":1623593931359,"results":"283","hashOfConfig":"238"},{"size":439,"mtime":1623470581002,"results":"284","hashOfConfig":"238"},{"size":259,"mtime":1623470581003,"results":"285","hashOfConfig":"238"},{"size":268,"mtime":1623470581003,"results":"286","hashOfConfig":"238"},{"size":532,"mtime":1623470581002,"results":"287","hashOfConfig":"238"},{"size":433,"mtime":1623470581017,"results":"288","hashOfConfig":"238"},{"size":5018,"mtime":1623470581018,"results":"289","hashOfConfig":"238"},{"size":1395,"mtime":1623470581019,"results":"290","hashOfConfig":"238"},{"size":4707,"mtime":1623593992526,"results":"291","hashOfConfig":"238"},{"size":838,"mtime":1623470581016,"results":"292","hashOfConfig":"238"},{"size":3337,"mtime":1623593992511,"results":"293","hashOfConfig":"238"},{"size":3419,"mtime":1623593992513,"results":"294","hashOfConfig":"238"},{"size":2015,"mtime":1623593992513,"results":"295","hashOfConfig":"238"},{"size":995,"mtime":1623470580978,"results":"296","hashOfConfig":"238"},{"size":972,"mtime":1623470580977,"results":"297","hashOfConfig":"238"},{"size":795,"mtime":1623470580963,"results":"298","hashOfConfig":"238"},{"size":2134,"mtime":1623470580990,"results":"299","hashOfConfig":"238"},{"size":2504,"mtime":1623470581012,"results":"300","hashOfConfig":"238"},{"size":10824,"mtime":1623593992524,"results":"301","hashOfConfig":"238"},{"size":1529,"mtime":1623470580975,"results":"302","hashOfConfig":"238"},{"size":2255,"mtime":1623470581010,"results":"303","hashOfConfig":"238"},{"size":874,"mtime":1623470581008,"results":"304","hashOfConfig":"238"},{"size":664,"mtime":1623470580961,"results":"305","hashOfConfig":"238"},{"size":1906,"mtime":1623593992525,"results":"306","hashOfConfig":"238"},{"size":3190,"mtime":1623593992525,"results":"307","hashOfConfig":"238"},{"size":8661,"mtime":1623470581003,"results":"308","hashOfConfig":"238"},{"size":2332,"mtime":1623593992512,"results":"309","hashOfConfig":"238"},{"size":3695,"mtime":1623470581001,"results":"310","hashOfConfig":"238"},{"size":1295,"mtime":1623470580999,"results":"311","hashOfConfig":"238"},{"size":811,"mtime":1623470581007,"results":"312","hashOfConfig":"238"},{"size":82,"mtime":1623470581014,"results":"313","hashOfConfig":"238"},{"size":2247,"mtime":1623470581015,"results":"314","hashOfConfig":"238"},{"size":429,"mtime":1623470581015,"results":"315","hashOfConfig":"238"},{"size":179,"mtime":1623470581009,"results":"316","hashOfConfig":"238"},{"size":798,"mtime":1623470581043,"results":"317","hashOfConfig":"238"},{"size":75,"mtime":1623470580974,"results":"318","hashOfConfig":"238"},{"size":222,"mtime":1623470581014,"results":"319","hashOfConfig":"238"},{"size":950,"mtime":1623593931349,"results":"320","hashOfConfig":"238"},{"size":7690,"mtime":1623593992514,"results":"321","hashOfConfig":"238"},{"size":5051,"mtime":1623593931347,"results":"322","hashOfConfig":"238"},{"size":8181,"mtime":1623593992514,"results":"323","hashOfConfig":"238"},{"size":1598,"mtime":1623470580962,"results":"324","hashOfConfig":"238"},{"size":803,"mtime":1623593931361,"results":"325","hashOfConfig":"238"},{"size":7521,"mtime":1623594008322,"results":"326","hashOfConfig":"238"},{"size":5872,"mtime":1623470581044,"results":"327","hashOfConfig":"238"},{"size":846,"mtime":1623470581045,"results":"328","hashOfConfig":"238"},{"size":11262,"mtime":1623470581020,"results":"329","hashOfConfig":"238"},{"size":9388,"mtime":1623470580990,"results":"330","hashOfConfig":"238"},{"size":582,"mtime":1623470580974,"results":"331","hashOfConfig":"238"},{"size":3941,"mtime":1623594008323,"results":"332","hashOfConfig":"238"},{"size":1372,"mtime":1623593992526,"results":"333","hashOfConfig":"238"},{"size":5894,"mtime":1623470581000,"results":"334","hashOfConfig":"238"},{"size":2882,"mtime":1623470581002,"results":"335","hashOfConfig":"238"},{"size":134,"mtime":1623470581042,"results":"336","hashOfConfig":"238"},{"size":93,"mtime":1623470580968,"results":"337","hashOfConfig":"238"},{"size":93,"mtime":1623470580965,"results":"338","hashOfConfig":"238"},{"size":87,"mtime":1623470580971,"results":"339","hashOfConfig":"238"},{"size":188,"mtime":1623470581021,"results":"340","hashOfConfig":"238"},{"size":8866,"mtime":1623593931337,"results":"341","hashOfConfig":"238"},{"size":1428,"mtime":1623593931335,"results":"342","hashOfConfig":"238"},{"size":357,"mtime":1623593931340,"results":"343","hashOfConfig":"238"},{"size":3577,"mtime":1623470581020,"results":"344","hashOfConfig":"238"},{"size":184,"mtime":1623470581043,"results":"345","hashOfConfig":"238"},{"size":5249,"mtime":1623470580968,"results":"346","hashOfConfig":"238"},{"size":2726,"mtime":1623470580965,"results":"347","hashOfConfig":"238"},{"size":208,"mtime":1623470580971,"results":"348","hashOfConfig":"238"},{"size":387,"mtime":1623470580967,"results":"349","hashOfConfig":"238"},{"size":5728,"mtime":1623593931337,"results":"350","hashOfConfig":"238"},{"size":3029,"mtime":1623593931335,"results":"351","hashOfConfig":"238"},{"size":5707,"mtime":1623593931336,"results":"352","hashOfConfig":"238"},{"size":809,"mtime":1623470580962,"results":"353","hashOfConfig":"238"},{"size":872,"mtime":1623470580962,"results":"354","hashOfConfig":"238"},{"size":1755,"mtime":1623470580966,"results":"355","hashOfConfig":"238"},{"size":1525,"mtime":1623470580965,"results":"356","hashOfConfig":"238"},{"size":3381,"mtime":1623470580967,"results":"357","hashOfConfig":"238"},{"size":3958,"mtime":1623593931336,"results":"358","hashOfConfig":"238"},{"size":1082,"mtime":1623470580966,"results":"359","hashOfConfig":"238"},{"size":2733,"mtime":1623470580986,"results":"360","hashOfConfig":"238"},{"size":1036,"mtime":1623470580989,"results":"361","hashOfConfig":"238"},{"size":3605,"mtime":1623470580987,"results":"362","hashOfConfig":"238"},{"size":4392,"mtime":1623593992514,"results":"363","hashOfConfig":"238"},{"size":2025,"mtime":1623593931348,"results":"364","hashOfConfig":"238"},{"size":7660,"mtime":1623593931348,"results":"365","hashOfConfig":"238"},{"size":8755,"mtime":1623593931347,"results":"366","hashOfConfig":"238"},{"size":1161,"mtime":1623470580988,"results":"367","hashOfConfig":"238"},{"size":1504,"mtime":1623470580987,"results":"368","hashOfConfig":"238"},{"size":1450,"mtime":1623470580988,"results":"369","hashOfConfig":"238"},{"size":803,"mtime":1623470580988,"results":"370","hashOfConfig":"238"},{"size":4034,"mtime":1623470580981,"results":"371","hashOfConfig":"238"},{"size":3364,"mtime":1623470581006,"results":"372","hashOfConfig":"238"},{"size":883,"mtime":1623593992526,"results":"373","hashOfConfig":"238"},{"size":3688,"mtime":1623470581004,"results":"374","hashOfConfig":"238"},{"size":491,"mtime":1623470581005,"results":"375","hashOfConfig":"238"},{"size":2441,"mtime":1623470580998,"results":"376","hashOfConfig":"238"},{"size":161,"mtime":1623470581011,"results":"377","hashOfConfig":"238"},{"size":10504,"mtime":1623593992522,"results":"378","hashOfConfig":"238"},{"size":126,"mtime":1623470580976,"results":"379","hashOfConfig":"238"},{"size":1328,"mtime":1623593992525,"results":"380","hashOfConfig":"238"},{"size":5009,"mtime":1623593992512,"results":"381","hashOfConfig":"238"},{"size":2495,"mtime":1623593992520,"results":"382","hashOfConfig":"238"},{"size":2273,"mtime":1623593992520,"results":"383","hashOfConfig":"238"},{"size":610,"mtime":1623593992518,"results":"384","hashOfConfig":"238"},{"size":3319,"mtime":1623593992518,"results":"385","hashOfConfig":"238"},{"size":3182,"mtime":1623593992518,"results":"386","hashOfConfig":"238"},{"size":4426,"mtime":1623593992519,"results":"387","hashOfConfig":"238"},{"size":1927,"mtime":1623470581017,"results":"388","hashOfConfig":"238"},{"size":849,"mtime":1623470581018,"results":"389","hashOfConfig":"238"},{"size":827,"mtime":1623470581020,"results":"390","hashOfConfig":"238"},{"size":801,"mtime":1623470581017,"results":"391","hashOfConfig":"238"},{"size":934,"mtime":1623470581018,"results":"392","hashOfConfig":"238"},{"size":818,"mtime":1623470581018,"results":"393","hashOfConfig":"238"},{"size":871,"mtime":1623470581018,"results":"394","hashOfConfig":"238"},{"size":862,"mtime":1623470581019,"results":"395","hashOfConfig":"238"},{"size":844,"mtime":1623470581019,"results":"396","hashOfConfig":"238"},{"size":2206,"mtime":1623470581017,"results":"397","hashOfConfig":"238"},{"size":854,"mtime":1623470581018,"results":"398","hashOfConfig":"238"},{"size":1519,"mtime":1623470581017,"results":"399","hashOfConfig":"238"},{"size":1323,"mtime":1623470581019,"results":"400","hashOfConfig":"238"},{"size":839,"mtime":1623470581016,"results":"401","hashOfConfig":"238"},{"size":5655,"mtime":1623470581020,"results":"402","hashOfConfig":"238"},{"size":1470,"mtime":1623470581016,"results":"403","hashOfConfig":"238"},{"size":814,"mtime":1623470581019,"results":"404","hashOfConfig":"238"},{"size":7505,"mtime":1623470581017,"results":"405","hashOfConfig":"238"},{"size":75,"mtime":1623470580975,"results":"406","hashOfConfig":"238"},{"size":5340,"mtime":1623593992523,"results":"407","hashOfConfig":"238"},{"size":1735,"mtime":1623593931362,"results":"408","hashOfConfig":"238"},{"size":799,"mtime":1623593931362,"results":"409","hashOfConfig":"238"},{"size":291,"mtime":1623470581015,"results":"410","hashOfConfig":"238"},{"size":281,"mtime":1623470581015,"results":"411","hashOfConfig":"238"},{"size":261,"mtime":1623470581016,"results":"412","hashOfConfig":"238"},{"size":342,"mtime":1623470581014,"results":"413","hashOfConfig":"238"},{"size":380,"mtime":1623470581015,"results":"414","hashOfConfig":"238"},{"size":310,"mtime":1623470581015,"results":"415","hashOfConfig":"238"},{"size":3657,"mtime":1623593992517,"results":"416","hashOfConfig":"238"},{"size":807,"mtime":1623593992515,"results":"417","hashOfConfig":"238"},{"size":1608,"mtime":1623593931356,"results":"418","hashOfConfig":"238"},{"size":3099,"mtime":1623593931333,"results":"419","hashOfConfig":"238"},{"size":21092,"mtime":1623593992516,"results":"420","hashOfConfig":"238"},{"size":1607,"mtime":1623593931354,"results":"421","hashOfConfig":"238"},{"size":5229,"mtime":1623593992517,"results":"422","hashOfConfig":"238"},{"size":6066,"mtime":1623593992517,"results":"423","hashOfConfig":"238"},{"size":291,"mtime":1623470581016,"results":"424","hashOfConfig":"238"},{"size":271,"mtime":1623470581016,"results":"425","hashOfConfig":"238"},{"size":860,"mtime":1623470581014,"results":"426","hashOfConfig":"238"},{"size":759,"mtime":1623470581014,"results":"427","hashOfConfig":"238"},{"size":576,"mtime":1623470581015,"results":"428","hashOfConfig":"238"},{"size":2373,"mtime":1623593992518,"results":"429","hashOfConfig":"238"},{"size":1918,"mtime":1623593992518,"results":"430","hashOfConfig":"238"},{"size":661,"mtime":1623470581013,"results":"431","hashOfConfig":"238"},{"size":359,"mtime":1623470581015,"results":"432","hashOfConfig":"238"},{"size":3482,"mtime":1623470581014,"results":"433","hashOfConfig":"238"},{"size":3550,"mtime":1623593992523,"results":"434","hashOfConfig":"238"},{"size":617,"mtime":1623470580975,"results":"435","hashOfConfig":"238"},{"size":1825,"mtime":1623470581004,"results":"436","hashOfConfig":"238"},{"size":661,"mtime":1623470581003,"results":"437","hashOfConfig":"238"},{"size":649,"mtime":1623470581046,"results":"438","hashOfConfig":"238"},{"size":2570,"mtime":1623470581001,"results":"439","hashOfConfig":"238"},{"size":1914,"mtime":1623470581005,"results":"440","hashOfConfig":"238"},{"size":1920,"mtime":1623470581007,"results":"441","hashOfConfig":"238"},{"size":2647,"mtime":1623593992519,"results":"442","hashOfConfig":"238"},{"size":4044,"mtime":1623593992520,"results":"443","hashOfConfig":"238"},{"size":2372,"mtime":1623593992521,"results":"444","hashOfConfig":"238"},{"size":1638,"mtime":1623470580993,"results":"445","hashOfConfig":"238"},{"size":2867,"mtime":1623470580993,"results":"446","hashOfConfig":"238"},{"size":1173,"mtime":1623470580994,"results":"447","hashOfConfig":"238"},{"size":1878,"mtime":1623593992520,"results":"448","hashOfConfig":"238"},{"size":2338,"mtime":1623593992512,"results":"449","hashOfConfig":"238"},{"size":8350,"mtime":1623593992519,"results":"450","hashOfConfig":"238"},{"size":2868,"mtime":1623593992516,"results":"451","hashOfConfig":"238"},{"size":1809,"mtime":1623470580997,"results":"452","hashOfConfig":"238"},{"size":1565,"mtime":1623470580979,"results":"453","hashOfConfig":"238"},{"size":227,"mtime":1623470580977,"results":"454","hashOfConfig":"238"},{"size":1960,"mtime":1623470580980,"results":"455","hashOfConfig":"238"},{"size":2138,"mtime":1623593992521,"results":"456","hashOfConfig":"238"},{"size":3622,"mtime":1623593992516,"results":"457","hashOfConfig":"238"},{"size":536,"mtime":1623470581043,"results":"458","hashOfConfig":"238"},{"size":1015,"mtime":1623470580995,"results":"459","hashOfConfig":"238"},{"size":801,"mtime":1623470580963,"results":"460","hashOfConfig":"238"},{"size":637,"mtime":1623470580991,"results":"461","hashOfConfig":"238"},{"size":880,"mtime":1623593992512,"results":"462","hashOfConfig":"238"},{"size":1881,"mtime":1623470580994,"results":"463","hashOfConfig":"238"},{"size":2065,"mtime":1623470580997,"results":"464","hashOfConfig":"238"},{"size":3916,"mtime":1623593992511,"results":"465","hashOfConfig":"238"},{"size":3302,"mtime":1623593992517,"results":"466","hashOfConfig":"238"},{"size":731,"mtime":1623470581002,"results":"467","hashOfConfig":"238"},{"size":93,"mtime":1623470580968,"results":"468","hashOfConfig":"238"},{"size":2153,"mtime":1623470580973,"results":"469","hashOfConfig":"238"},{"size":1823,"mtime":1623593992510,"results":"470","hashOfConfig":"238"},{"size":3097,"mtime":1623470580968,"results":"471","hashOfConfig":"238"},{"size":53035,"mtime":1623658220409,"results":"472","hashOfConfig":"238"},{"size":7396,"mtime":1623645035712,"results":"473","hashOfConfig":"238"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},"86f3jr",{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"476"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"476"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"476"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"476"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"476"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"476"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"476"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"476"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"476"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"476"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"476"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"530","usedDeprecatedRules":"476"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"476"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":2,"source":"540","usedDeprecatedRules":"476"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"476"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"548","usedDeprecatedRules":"476"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"476"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":1,"source":"558","usedDeprecatedRules":"476"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"476"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574","usedDeprecatedRules":"476"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"583","usedDeprecatedRules":"476"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"586","usedDeprecatedRules":"476"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"589","usedDeprecatedRules":"476"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"592","usedDeprecatedRules":"476"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599","usedDeprecatedRules":"476"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608","usedDeprecatedRules":"476"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"476"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"476"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"476"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"476"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"476"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"632","usedDeprecatedRules":"476"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"635","usedDeprecatedRules":"476"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"476"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"476"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"654","usedDeprecatedRules":"476"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"476"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"476"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"476"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"686","usedDeprecatedRules":"476"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"689","messages":"690","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"691","usedDeprecatedRules":"476"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"694","usedDeprecatedRules":"476"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"697","usedDeprecatedRules":"476"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"702","usedDeprecatedRules":"476"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"709","usedDeprecatedRules":"476"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"712","usedDeprecatedRules":"476"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"727","messages":"728","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"729","usedDeprecatedRules":"476"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"732","usedDeprecatedRules":"476"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"735","messages":"736","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"749","usedDeprecatedRules":"476"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"752","usedDeprecatedRules":"476"},{"filePath":"753","messages":"754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"757","usedDeprecatedRules":"476"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"762","messages":"763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"768","usedDeprecatedRules":"476"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"775","messages":"776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"777","messages":"778","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"779","usedDeprecatedRules":"476"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"782","usedDeprecatedRules":"476"},{"filePath":"783","messages":"784","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"785","usedDeprecatedRules":"476"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"788","usedDeprecatedRules":"476"},{"filePath":"789","messages":"790","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"791","messages":"792","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"793","messages":"794","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"797","messages":"798","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"799","usedDeprecatedRules":"476"},{"filePath":"800","messages":"801","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"802","messages":"803","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"804","usedDeprecatedRules":"476"},{"filePath":"805","messages":"806","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"809","messages":"810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"811","messages":"812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"813","messages":"814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"815","messages":"816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"817","messages":"818","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"819","messages":"820","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"821","usedDeprecatedRules":"476"},{"filePath":"822","messages":"823","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"824","usedDeprecatedRules":"476"},{"filePath":"825","messages":"826","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"827","usedDeprecatedRules":"476"},{"filePath":"828","messages":"829","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"830","messages":"831","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"832","usedDeprecatedRules":"476"},{"filePath":"833","messages":"834","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"835","usedDeprecatedRules":"476"},{"filePath":"836","messages":"837","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"838","usedDeprecatedRules":"476"},{"filePath":"839","messages":"840","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"841","messages":"842","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"843","messages":"844","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"845","messages":"846","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"847","messages":"848","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"849","messages":"850","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"851","messages":"852","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"853","messages":"854","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"855","messages":"856","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"857","messages":"858","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"859","messages":"860","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"861","messages":"862","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"863","messages":"864","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"865","messages":"866","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"867","messages":"868","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"869","messages":"870","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"871","messages":"872","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"873","messages":"874","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"875","messages":"876","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"877","messages":"878","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"879","usedDeprecatedRules":"476"},{"filePath":"880","messages":"881","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"882","usedDeprecatedRules":"476"},{"filePath":"883","messages":"884","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"885","usedDeprecatedRules":"476"},{"filePath":"886","messages":"887","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"888"},{"filePath":"889","messages":"890","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"891","messages":"892","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"893","messages":"894","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"895","messages":"896","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"897","messages":"898","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"899","messages":"900","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"901","usedDeprecatedRules":"476"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"904","messages":"905","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"906","messages":"907","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"908","usedDeprecatedRules":"476"},{"filePath":"909","messages":"910","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"911","usedDeprecatedRules":"476"},{"filePath":"912","messages":"913","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"914","messages":"915","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"916","usedDeprecatedRules":"476"},{"filePath":"917","messages":"918","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"919","usedDeprecatedRules":"476"},{"filePath":"920","messages":"921","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"922","messages":"923","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"924","messages":"925","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"926","messages":"927","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"928","messages":"929","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"930","messages":"931","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"932","usedDeprecatedRules":"476"},{"filePath":"933","messages":"934","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"935","usedDeprecatedRules":"476"},{"filePath":"936","messages":"937","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"938","messages":"939","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"940","messages":"941","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"942","messages":"943","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"944","messages":"945","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"946","messages":"947","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"948","messages":"949","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"950","messages":"951","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"952","messages":"953","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"954","messages":"955","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"956","messages":"957","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"958","messages":"959","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"960","usedDeprecatedRules":"476"},{"filePath":"961","messages":"962","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"963","usedDeprecatedRules":"476"},{"filePath":"964","messages":"965","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"966","usedDeprecatedRules":"476"},{"filePath":"967","messages":"968","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"969","messages":"970","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"971","messages":"972","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"973","messages":"974","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"975","usedDeprecatedRules":"476"},{"filePath":"976","messages":"977","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"978","usedDeprecatedRules":"476"},{"filePath":"979","messages":"980","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"981","usedDeprecatedRules":"476"},{"filePath":"982","messages":"983","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"984","usedDeprecatedRules":"476"},{"filePath":"985","messages":"986","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"987","usedDeprecatedRules":"476"},{"filePath":"988","messages":"989","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"990","messages":"991","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"992","messages":"993","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"994","usedDeprecatedRules":"476"},{"filePath":"995","messages":"996","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"997","usedDeprecatedRules":"476"},{"filePath":"998","messages":"999","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"1000","messages":"1001","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"1004","messages":"1005","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"1006","messages":"1007","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"1008","messages":"1009","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1010","usedDeprecatedRules":"476"},{"filePath":"1011","messages":"1012","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"1013","messages":"1014","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1015","usedDeprecatedRules":"476"},{"filePath":"1016","messages":"1017","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"1018","usedDeprecatedRules":"476"},{"filePath":"1019","messages":"1020","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"1021","messages":"1022","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1023","usedDeprecatedRules":"476"},{"filePath":"1024","messages":"1025","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"1026","messages":"1027","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"1028","messages":"1029","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":"1030","usedDeprecatedRules":"476"},{"filePath":"1031","messages":"1032","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},{"filePath":"1033","messages":"1034","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"1035","messages":"1036","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"476"},"/Users/lehoa/icetea/work/redkite/frontend-user/src/index.tsx",[],["1037","1038"],"/Users/lehoa/icetea/work/redkite/frontend-user/src/reportWebVitals.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/App.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/configureStore.ts",["1039","1040"],"import { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer, Transform } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createFilter } from 'redux-persist-transform-filter';\nimport thunk from 'redux-thunk';\n\nimport rootReducer, { RootState } from './reducers';\n\nconst initialState = {\n  user: {\n    data: '',\n    loading: false,\n    error: '',\n  },\n};\n\nconst middlewares = [thunk];\n\nconst userStateFilter = createFilter('user', ['data']);\nconst investorStateFilter = createFilter('investor', ['data']);\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: [],\n  whitelist: ['wallet', 'connector', 'appNetwork'],\n  transforms: [userStateFilter, investorStateFilter]\n};\n\nconst persistedReducer = persistReducer<RootState>(persistConfig, rootReducer);\n\nlet store = createStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware(...middlewares)));\nlet persistor = persistStore(store);\n\nexport default () => {\n  return { store, persistor }\n}\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/routes.tsx",["1041","1042","1043","1044","1045","1046","1047"],"import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Route, Switch, withRouter, RouteComponentProps, Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useWeb3React } from '@web3-react/core';\nimport useProviderConnect from './components/Base/HeaderDefaultLayout/hooks/useProviderConnect';\nimport { settingAppNetwork, NetworkUpdateType } from './store/actions/appNetwork';\nimport { AppContext } from './AppContext';\n\nimport { clearAlert } from './store/actions/alert'\nimport ErrorPage from './pages/ErrorPage';\nimport NotFoundPage from './pages/NotFoundPage';\nimport ErrorBoundary from './components/Base/ErrorBoundary';\nimport PrivateRoute from './components/Base/PrivateRoute';\n\nimport BuyToken from './pages/BuyToken';\nimport Dashboard from './pages/Dashboard';\nimport NetworkChange from './pages/NetworkChange';\nimport ChangePassword from './pages/ChangePassword';\nimport ConfirmEmail from './pages/ConfirmEmail';\nimport AppContainer from \"./AppContainer\";\nimport PrivacyPolicy from \"./pages/PrivacyPolicy\";\nimport Terms from \"./pages/Terms\";\n\nimport InvestorRegister from \"./pages/Register/InvestorRegister\";\nimport InvestorForgotPassword from \"./pages/ForgotPassword/InvestorForgotPassword\";\nimport InvestorResetPassword from \"./pages/ResetPassword/InvestorResetPassword\";\nimport InvestorLogin from \"./pages/Login/InvestorLogin\";\n\nimport AccountV2 from \"./pages/AccountV2\";\nimport Landing from \"./pages/Landing\";\nimport Pools from \"./pages/Pools\";\n\nimport JoinPolkaSmith from \"./pages/JoinPolkaSmith\"\n//@ts-ignore\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\nimport 'react-notifications/lib/notifications.css';\nimport {adminRoute, publicRoute} from \"./utils\";\nimport ComingSoon from \"./pages/ComingSoon/ComingSoon\";\n\n/**\n * Main App routes.\n */\nconst Routes: React.FC<RouteComponentProps> = (props: RouteComponentProps) => {\n    const dispatch = useDispatch();\n    const alert = useSelector((state: any) => state.alert);\n    const { history } = props;\n\n    const { deactivate } = useWeb3React();\n    const [binanceAvailable, setBinanceAvailable] = useState(false);\n    const [openConnectWallet, setOpenConnectWallet] = useState<boolean>(false);\n    const [currentConnectedWallet, setCurrentConnectedWallet] = useState<any>(undefined);\n\n    const logout = () => {\n        deactivate();\n        dispatch(settingAppNetwork(NetworkUpdateType.Wallet, undefined));\n        setCurrentConnectedWallet(undefined);\n        handleConnectorDisconnect();\n    }\n\n    const {\n        handleProviderChosen,\n        connectWalletLoading,\n        currentConnector,\n        walletName,\n        setWalletName,\n        loginError,\n        appNetworkLoading,\n        handleConnectorDisconnect,\n    } = useProviderConnect(\n        setOpenConnectWallet,\n        openConnectWallet,\n        binanceAvailable\n    );\n\n    useEffect(() => {\n        document.onreadystatechange = function () {\n            if (document.readyState == \"complete\") {\n                setBinanceAvailable(true);\n            }\n        }\n    }, []);\n\n    useEffect(() => {\n        const { type, message } = alert;\n        if (type && message) {\n            NotificationManager[type](message);\n        }\n    }, [alert]);\n\n    useEffect(() => {\n        history.listen((location, action) => {\n            dispatch(clearAlert());\n        });\n    }, []);\n\n    return (\n        <AppContext.Provider\n            value={{\n                binanceAvailable,\n                handleProviderChosen,\n                connectWalletLoading,\n                walletName,\n                setWalletName,\n                loginError,\n                appNetworkLoading,\n                handleConnectorDisconnect,\n                currentConnector,\n                logout,\n                setCurrentConnectedWallet,\n                openConnectWallet,\n                setOpenConnectWallet,\n                currentConnectedWallet\n            }}\n        >\n            <div>\n                <Switch>\n                    {/* <Route\n            exact path=\"/\"\n            render={() => <Redirect to={`${'/home'}`} />}\n          /> */}\n                    <Route path={`${'/join-polkasmith'}`} component={JoinPolkaSmith} />\n                    <Route exact path={`${'/dashboard'}`} component={Dashboard} />\n                    <Route path={`${'/buy-token/:id'}`} component={BuyToken} />\n                    <Route path={'/register'} component={InvestorRegister} />\n                    <Route path={'/login'} component={InvestorLogin} />\n                    <Route path={'/forgot-password/investor'} exact component={InvestorForgotPassword} />\n                    <Route path={'/reset-password/investor/:token'} component={InvestorResetPassword} />\n                    <Route path={'/confirm-email/:token'} component={ConfirmEmail} />\n                    <Route path={'/network-change'} component={NetworkChange} />\n                    <Route path={'/change-password/:role?'} component={ChangePassword} />\n                    <Route path={'/account'} component={AccountV2} />\n                    <Route path={'/pools'} component={Pools} />\n                    <Route path={'/privacy'} component={PrivacyPolicy} />\n                    <Route path={'/terms'} component={Terms} />\n                    <Route path={'/'} component={Landing} />\n\n                    <Route path={'/coming-soon'} component={ComingSoon} />\n                    <Route component={NotFoundPage} />\n                </Switch>\n            </div>\n        </AppContext.Provider>\n    )\n};\n\nconst RoutesHistory = withRouter(Routes);\n\nconst routing = function createRouting() {\n    return (\n        <>\n            <NotificationContainer />\n            <Router>\n                <AppContainer>\n                    <ErrorBoundary>\n                        <RoutesHistory />\n                    </ErrorBoundary>\n                </AppContainer>\n            </Router>\n        </>\n    );\n};\n/**\n * Wrap the app routes into router\n *\n * PROPS\n * =============================================================================\n * @returns {React.Node}\n */\nexport default routing;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/themes/DefaultTheme/DefaultTheme.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/AppContext.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/appNetwork.ts",["1048"],"import { ConnectorNames } from '../../constants/connectors';\nimport { appNetworkActions } from '../constants/appNetwork';\nimport { AnyAction } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nexport enum NetworkUpdateType {\n  Wallet = \"Wallet\",\n  App = \"App\",\n  Connector = \"Connector\"\n} \n\nexport const settingAppNetwork = (networkType: string, updatedVal: string | undefined) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: appNetworkActions.APP_NETWORKS_SETTING_LOADING });\n\n    try {\n      const { appChainID, walletChainID } = getState().appNetwork.data;\n\n      if (networkType in NetworkUpdateType) {\n        const updatedNetworkData = {\n          appChainID: networkType === NetworkUpdateType.App ? updatedVal: appChainID,\n          walletChainID: networkType === NetworkUpdateType.Wallet ? updatedVal: walletChainID,\n        }\n\n        dispatch({\n          type: appNetworkActions.APP_NETWORKS_SETTING_SUCCESS,\n          payload: updatedNetworkData\n        })\n      } else {\n        throw new Error(\"Wrong update network type!\");\n      }\n\n    } catch (error) {\n      dispatch({\n        type: appNetworkActions.APP_NETWORKS_SETTING_ERROR,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const settingCurrentConnector = (connectorName: string | undefined) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n    try {\n      dispatch({ \n        type: appNetworkActions.CONNECTOR_SETTING_SUCCESS,\n        payload: connectorName \n      })\n    } catch (error) {\n      dispatch({\n        type: appNetworkActions.CONNECTOR_SETTING_ERROR,\n        payload: error\n      });\n    }\n  }\n};\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/alert.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/AppContainer.tsx",["1049","1050","1051"],"import React, {useEffect, useState} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { userActions } from './store/constants/user';\nimport { logout } from './store/actions/user';\nimport { useTypedSelector } from './hooks/useTypedSelector';\nimport { getWeb3Instance, isMetaMaskInstalled } from './services/web3';\nimport { withRouter } from 'react-router-dom';\nimport InstallMetameask from './components/Base/InstallMetamask';\nimport BigNumber from 'bignumber.js';\nimport {adminRoute, checkIsAdminRoute, checkIsInvestorRoute, publicRoute} from \"./utils\";\nBigNumber.config({ EXPONENTIAL_AT: 50 });\nBigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_FLOOR });\n\nconst NETWORK_ID = process.env.REACT_APP_NETWORK_ID as string;\nconst BACK_URL_NETWORK_CHANGE = 'BACK_URL_NETWORK_CHANGE';\nconst BACK_URL_NETWORK_CHANGE_OWNER = 'BACK_URL_NETWORK_CHANGE_OWNER';\n\nconst AppContainer = (props: any) => {\n  const dispatch = useDispatch();\n  const { data: loginUser } = useTypedSelector(state => state.user);\n  const { data: loginInvestor } = useTypedSelector(state => state.investor);\n\n  const web3Instance = getWeb3Instance();\n\n  const onLoginWithoutLoginPage = async () => {\n    if (isMetaMaskInstalled()) {\n      const { history } = props;\n      const { ethereum } = window as any;\n\n      ethereum.request({\n        method: 'net_version'\n      }).then((currentNetworkId: string) => {\n        if (currentNetworkId && currentNetworkId !== NETWORK_ID) {\n          if (history) {\n            const pathName = history.location.pathname;\n            if (pathName !== '/network-change' && pathName !== '/dashboard/network-change') {\n              console.log('NET_VERSION:', currentNetworkId);\n              if (checkIsAdminRoute(pathName)) {\n                localStorage.setItem(BACK_URL_NETWORK_CHANGE_OWNER, pathName);\n                history.push('/dashboard/network-change');\n              } else if (checkIsInvestorRoute(pathName)) {\n                localStorage.setItem(BACK_URL_NETWORK_CHANGE, pathName);\n                history.push('/network-change');\n              }\n            }\n          }\n          return;\n        }\n      });\n\n      web3Instance?.eth.getAccounts().then(accounts => {\n        console.log('NO_ACCOUNT');\n        if (accounts.length === 0) {\n          dispatch({ type: userActions.USER_CONNECT_WALLET_LOCK });\n          const pathName = history.location.pathname;\n\n          console.log('dispatch(logout());', pathName);\n\n          if (pathName !== '/network-change' && pathName !== '/dashboard/network-change') {\n            console.log('Mismatch route: /network-change');\n\n            let isInvestor = false;\n            if (loginUser && checkIsAdminRoute(history.location.pathname)) {\n              isInvestor = false;\n              dispatch(logout(isInvestor));\n            } else if (loginInvestor && checkIsInvestorRoute(history.location.pathname)) {\n              isInvestor = true;\n              dispatch(logout(isInvestor));\n            }\n            setTimeout(() => {\n              // Switch redirect\n              if (checkIsAdminRoute(history.location.pathname)) {\n                history.push(adminRoute('/login'));\n              } else if (checkIsInvestorRoute(history.location.pathname)) {\n                history.push(publicRoute('/login'));\n              }\n            }, 1500);\n          }\n        }\n      });\n\n    }\n  };\n\n  useEffect(()  => {\n    // onLoginWithoutLoginPage();\n  }, [props.location.pathname]);\n\n  useEffect(() => {\n    const windowObj = window as any;\n    const { ethereum } = windowObj;\n\n    if (ethereum) {\n      /* web3Instance?.eth.getAccounts().then(accounts => { */\n      /*     accounts[0] && dispatch({ */\n      /*       type: userActions.USER_CONNECT_WALLET_SUCCESS, payload: accounts[0] */\n      /*     }); */\n      /* }); */\n\n      ethereum.on('accountsChanged', function (accounts: any) {\n        // console.log('accountsChanged');\n        // const account = accounts.length ? accounts[0] : '';\n        //\n        // if (account) {\n        //   if (loginUser && account !== loginUser.wallet_address) {\n        //     dispatch(logout());\n        //   }\n        //   if (loginInvestor && account !== loginInvestor.wallet_address) {\n        //     dispatch(logout(true));\n        //   } else {\n        //     dispatch({\n        //       type: userActions.USER_CONNECT_WALLET_SUCCESS,\n        //       payload: account,\n        //     });\n        //   }\n        // } else {\n        //   dispatch(logout());\n        //   dispatch({\n        //     type: userActions.USER_CONNECT_WALLET_LOCK,\n        //   });\n        // }\n      });\n\n      ethereum.on('chainChanged', (newNetworkId: string) => {\n        // console.log('chainChanged');\n        // const { history } = props;\n        // const pathName = history.location.pathname;\n        // let backUrlKey = checkIsAdminRoute(pathName) ? BACK_URL_NETWORK_CHANGE_OWNER : BACK_URL_NETWORK_CHANGE;\n        //\n        // console.log('pathName', pathName);\n        // console.log('backUrlKey', backUrlKey);\n        //\n        // if (Number(NETWORK_ID) !== Number(newNetworkId)) {\n        //   console.log('CHANGE_TO_OTHER_NETWORK');\n        //   if (pathName !== '/network-change') {\n        //     localStorage.setItem(backUrlKey, pathName);\n        //     if (checkIsAdminRoute(pathName)) {\n        //       history.push('/dashboard/network-change');\n        //     } else {\n        //       history.push('/network-change');\n        //     }\n        //   }\n        //   return true;\n        // }\n        //\n        // const backUrl = localStorage.getItem(backUrlKey);\n        // console.log('SAME_NETWORK');\n        // console.log('backUrl', backUrl);\n        //\n        // if (backUrl) {\n        //   if (backUrlKey === BACK_URL_NETWORK_CHANGE_OWNER) {\n        //     history.push('/dashboard');\n        //   } else {\n        //     history.push(backUrl);\n        //   }\n        //   setTimeout(() => {\n        //     localStorage.removeItem(backUrlKey);\n        //   }, 1000);\n        // }\n\n      });\n    }\n  }, [loginUser, loginInvestor]);\n\n  return (\n    <>\n      {props.children}\n    </>\n  );\n};\n\nexport default withRouter(AppContainer);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/hooks/useProviderConnect.ts",["1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062"],"import {useState, useEffect, SetStateAction, Dispatch, useCallback, useContext} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { UnsupportedChainIdError, useWeb3React } from '@web3-react/core';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport BigNumber from 'bignumber.js';\n\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { useTypedSelector } from '../../../../hooks/useTypedSelector';\nimport { ConnectorNames } from '../../../../constants/connectors';\nimport {\n  APP_NETWORKS_ID,\n  ETH_CHAIN_ID,\n  BSC_CHAIN_ID,\n  ChainIdNameMapping,\n  chainId,\n  NETWORK_NAME_MAPPINGS\n} from '../../../../constants/network';\nimport { requestSupportNetwork } from '../../../../utils/setupNetwork';\nimport { getAppNetworkName } from '../../../../utils/network/getAppNetworkName';\nimport { connectWalletSuccess, disconnectWallet } from '../../../../store/actions/wallet';\nimport getAccountBalance from '../../../../utils/getAccountBalance';\n\nimport { settingAppNetwork, NetworkUpdateType, settingCurrentConnector } from '../../../../store/actions/appNetwork';\nimport {alertFailure} from \"../../../../store/actions/alert\";\n\nconst useProviderConnect = (\n  setOpenConnectDialog?: Dispatch<SetStateAction<boolean>>,\n  openConnectDialog?: boolean,\n  binanceAvailable?: boolean\n) => {\n  const dispatch = useDispatch();\n\n  const { appChainID, walletChainID } = useTypedSelector(state => state.appNetwork).data;\n\n  const [account, setAccount] = useState<string | undefined>(undefined);\n\n  const [appNetworkLoading, setAppNetworkLoading] = useState(false);\n  const [walletNameSuccess, setWalletNameSuccess] = useState<string | undefined>(undefined);\n  const [walletName, setWalletName] = useState<(undefined | string)[]>([]);\n  const [currentConnector, setCurrentConnector] = useState<undefined | AbstractConnector>(undefined);\n  const [connectWalletLoading, setConnectWalletLoading] = useState(false);\n  const [loginError, setLoginError] = useState('');\n\n  const {activate, active, connector, chainId, error, account: connectedAccount, deactivate } = useWeb3React();\n\n  const previousAccount = usePrevious(account);\n  const activePrevious = usePrevious(active);\n  const previousConnector = usePrevious(connector);\n\n  useEffect(() => {\n      if (connectWalletLoading && ((active && !activePrevious) || (connector && connector !== previousConnector && !error))) {\n        setConnectWalletLoading(false);\n        setOpenConnectDialog && setOpenConnectDialog(false);\n      }\n    }, [\n      active,\n      connector,\n      error,\n      previousAccount,\n      previousConnector,\n      activePrevious,\n      connectWalletLoading,\n      setOpenConnectDialog,\n      setConnectWalletLoading\n  ]);\n\n   useEffect(() => {\n    const handleWeb3ReactUpdate = (updated: any) => {\n      if (updated.account) {\n        if (updated.account) {\n          setAccount(updated.account);\n        } else setAccount(undefined);\n      }\n\n      if (updated.chainId) {\n        const chainId = Number(updated.chainId).toString();\n\n        if (APP_NETWORKS_ID.indexOf(chainId.toString()) >= 0) {\n          // dispatch(\n          //   settingAppNetwork(\n          //   NetworkUpdateType.App,\n          //   APP_NETWORKS_ID[APP_NETWORKS_ID.indexOf(chainId.toString())] as string\n          // ));\n        }\n\n        chainId && dispatch(settingAppNetwork(NetworkUpdateType.Wallet, chainId.toString()))\n      }\n    }\n\n    const handleWeb3ReactError = (err: any) => {\n      if (err === 'NaN ChainId') {\n        dispatch(settingAppNetwork(NetworkUpdateType.Wallet, undefined));\n        setLoginError(`App network (${appChainID}) doesn't mach to network selected in wallet: NaN. Learn how to change network in wallet or`);\n      }\n    }\n\n    if (currentConnector && !active && !error) {\n      currentConnector.on('Web3ReactUpdate', handleWeb3ReactUpdate)\n      currentConnector.on('Web3ReactError', handleWeb3ReactError);\n      currentConnector.on('Web3ReactDeactivate', handleConnectorDisconnect);\n    }\n\n    return () => {\n      if (currentConnector && currentConnector.removeListener) {\n        currentConnector.removeListener('Web3ReactUpdate', handleWeb3ReactUpdate);\n        currentConnector.removeListener('Web3ReactError', handleWeb3ReactError);\n        currentConnector.removeListener('Web3ReactDeactivate', handleConnectorDisconnect);\n      }\n    }\n  }, [currentConnector, connectedAccount]);\n\n  useEffect(() => {\n    currentConnector && setAppNetworkLoading(true);\n  }, [appChainID]);\n\n  // UseEffect for watching change app network loading\n  useEffect(() => {\n    if (!appNetworkLoading) {\n      setOpenConnectDialog && setOpenConnectDialog(false);\n      setConnectWalletLoading(false);\n    }\n  }, [appNetworkLoading]);\n\n  // UseEffect for trying login after fullfilled app chain id and connector\n   useEffect(() => {\n      const tryLoginAfterSwitch = async () => {\n        currentConnector\n        && appChainID\n        && ((appChainID === BSC_CHAIN_ID && binanceAvailable) || appChainID === ETH_CHAIN_ID)\n        && await tryActivate(currentConnector, appChainID, walletName[walletName.length - 1] as string);\n      }\n\n      currentConnector && appChainID && walletName.length > 0 && tryLoginAfterSwitch();\n    }, [currentConnector, appChainID, walletName, binanceAvailable]);\n\n    useEffect(() => {\n      walletChainID && !openConnectDialog && !appNetworkLoading && switchNetwork(appChainID, walletChainID);\n    }, [walletChainID, appNetworkLoading, appChainID, openConnectDialog]);\n\n    // UseEffect for setting wallet id after login success\n    useEffect(() => {\n      if (!connectWalletLoading) {\n        chainId && dispatch(settingAppNetwork(NetworkUpdateType.Wallet, chainId.toString()));\n        connectedAccount && setAccount(connectedAccount);\n      }\n    }, [connectWalletLoading, connectedAccount, chainId])\n\n    // Handle Provider choose\n    const handleProviderChosen = (name: string, connector: AbstractConnector) => {\n      console.log('Wallet Connected: ', name);\n      setCurrentConnector(connector);\n      walletName.indexOf(name) < 0 && setWalletName([...walletName, name]);\n    }\n\n  const switchNetwork = (appChainID: string, walletChainID: string) => {\n    if (appChainID && walletChainID) {\n      Number(appChainID) !== Number(walletChainID) ?\n        setLoginError(`App network (${getAppNetworkName(appChainID)}) doesn't mach to network selected in wallet: ${ChainIdNameMapping[Number(walletChainID) as chainId]}.`) : setLoginError('');\n      currentConnector && activate(currentConnector, undefined, true).catch(err =>\n        console.log('Fail when switch between network:', err.message)\n      );\n    }\n\n    return;\n  }\n\n\n\n\n\n  const tryActivate = useCallback(async (connector: AbstractConnector, appChainID: string, wallet: string) => {\n      try {\n        if (!connectWalletLoading) {\n          setConnectWalletLoading(true);\n\n          if (wallet === ConnectorNames.MetaMask || wallet === ConnectorNames.BSC) {\n            await requestSupportNetwork(appChainID, wallet);\n          }\n\n          if (connector instanceof WalletConnectConnector && connector.walletConnectProvider?.wc?.uri) {\n            connector.walletConnectProvider = undefined;\n          }\n\n          if (connector && walletName) {\n            if (wallet === ConnectorNames.Fortmatic) {\n              connector.on(\"OVERLAY_READY\", () => {\n                setOpenConnectDialog && setOpenConnectDialog(false);\n              });\n            }\n\n            await activate(connector, undefined, true)\n            .then(() => {\n              dispatch(settingCurrentConnector(wallet));\n              setWalletNameSuccess(wallet);\n            })\n            .catch(async error => {\n\n              if (error instanceof UnsupportedChainIdError) {\n                console.debug('Error when activate: ', error.message);\n                dispatch(disconnectWallet());\n                setCurrentConnector(undefined);\n                setConnectWalletLoading(false);\n                setWalletName([]);\n                localStorage.removeItem('walletconnect');\n\n                // await activate(connector);\n                const currentChainId = await connector?.getChainId();\n                // const b = connector?.supportedChainIds;\n\n                dispatch(alertFailure(`App network (${NETWORK_NAME_MAPPINGS[appChainID]}) doesn\\'t mach to network selected in wallet: ${NETWORK_NAME_MAPPINGS[currentChainId]}. Please change network in wallet  or  change app network.`));\n\n                return;\n              } else {\n                dispatch(disconnectWallet());\n                setConnectWalletLoading(false);\n                setWalletName(walletName.filter(name => wallet !== name));\n                console.debug('Error when try to activate: ', error.message);\n                return;\n              }\n            })\n          }\n        }\n      } catch (error) {\n        console.log(error.message);\n        setLoginError(error.message);\n        setCurrentConnector(undefined);\n      }\n\n      setAppNetworkLoading(false);\n  }, [connector, appChainID, walletName]);\n\n  useEffect(() => {\n    const getAccountDetails = async () => {\n      if (appChainID && connectedAccount && walletNameSuccess) {\n        const accountBalance = await getAccountBalance(appChainID, walletChainID, connectedAccount as string, walletNameSuccess);\n\n        dispatch(\n          connectWalletSuccess(\n            walletNameSuccess,\n            [connectedAccount],\n            {\n              [connectedAccount]: new BigNumber(accountBalance._hex).div(new BigNumber(10).pow(18)).toFixed(5)\n            }\n          )\n        );\n\n        setConnectWalletLoading(false);\n      }\n    }\n    getAccountDetails();\n  }, [walletNameSuccess, connectedAccount, appChainID, walletChainID]);\n\n  const handleConnectorDisconnect = useCallback(() => {\n    dispatch(disconnectWallet());\n    dispatch(settingCurrentConnector(undefined));\n    dispatch(settingAppNetwork(NetworkUpdateType.Wallet, undefined));\n\n    localStorage.removeItem(\"walletconnect\");\n\n    deactivate();\n    setAccount(undefined);\n    setWalletName([]);\n    setWalletNameSuccess(undefined);\n    setCurrentConnector(undefined);\n    setConnectWalletLoading(false);\n    setLoginError('');\n  }, []);\n\n  return {\n    handleProviderChosen,\n    setWalletName,\n    walletName,\n    connectWalletLoading,\n    walletNameSuccess,\n    loginError,\n    currentConnector,\n    appNetworkLoading,\n    handleConnectorDisconnect\n  }\n}\n\nexport default useProviderConnect;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Register/InvestorRegister.tsx",["1063","1064","1065","1066","1067","1068"],"import React, {useEffect, useRef, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {CircularProgress, TextField} from '@material-ui/core';\nimport {Link, withRouter} from 'react-router-dom';\nimport {useForm} from 'react-hook-form';\nimport { useWeb3React } from '@web3-react/core';\n\nimport {alertFailure} from '../../store/actions/alert';\nimport {connectWallet, register as registerAccount, resetUserState} from '../../store/actions/user';\nimport Button from '../../components/Base/Button';\nimport {userAlreadyExists} from '../../utils/user';\nimport {publicRoute} from \"../../utils\";\nimport InvestorLayout from \"../InvestorLayout/InvestorLayout\";\nimport TextTitle from \"../InvestorLayout/TextTitle\";\nimport ConnectYourWallet from \"../InvestorLayout/ConnectYourWallet\";\nimport useStyles from './style'\nimport Logo from '../InvestorLayout/Logo'\n\nconst EMAIL_REGEX = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst InvestorRegister: React.FC<any> = (props: any) => {\n  const dispatch = useDispatch();\n  const styles = useStyles();\n\n  const [loadingUserExists, setLoadingUserExists] = useState(false);\n  const [userExists, setUserExists] = useState(false);\n  const [currentPage, setCurrentPage] = useState('walletConnect');\n  const { loading: userRegisterLoading = false, error: errorRegister } = useSelector((state: any) => state.userRegister);\n  const { data: loginInvestor, loading: investorLoginLoading, error } = useSelector((state: any) => state.investor);\n  const { account: connectedAccount, library } = useWeb3React();\n\n  const { register, watch, getValues, setValue, errors, handleSubmit } = useForm({\n    mode: 'onChange'\n  });\n\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n\n  const renderErrorRequired = (errors: any, prop: string) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (error || errorRegister) {\n      dispatch(alertFailure(error || errorRegister));\n    }\n  }, [error, errorRegister]);\n\n  useEffect(() => {\n    if (connectedAccount) {\n      setCurrentPage('signIn');\n    } else {\n      setCurrentPage('walletConnect');\n    }\n  }, [connectedAccount]);\n\n  useEffect(() => {\n    const checkUserExists = async () => {\n      if (currentPage === 'signIn' && connectedAccount) {\n        setLoadingUserExists(true);\n\n        const userExists = await userAlreadyExists(connectedAccount);\n        setLoadingUserExists(false);\n\n        setUserExists(userExists);\n      } else setUserExists(false);\n    }\n\n    connectedAccount && checkUserExists();\n  }, [currentPage, connectedAccount, loginInvestor]);\n\n  useEffect(() => {\n    if (loginInvestor) {\n      props.history.push(publicRoute('/'));\n    }\n\n    return () => {\n      error && dispatch(resetUserState());\n    }\n  }, [loginInvestor, error]);\n\n  const handleFormSubmit = (data: any) =>  {\n    dispatch(registerAccount({\n      ...data,\n      address: connectedAccount,\n      library\n    }));\n  }\n\n  const render = () => {\n    if (currentPage === 'walletConnect') {\n      return (\n        <ConnectYourWallet>\n          <Button\n            label={'Connect Wallet'}\n            buttonType=\"primary\"\n            onClick={handleUserLogin}\n          />\n        </ConnectYourWallet>\n      )\n    } else {\n      if (loadingUserExists) {\n        return (\n          <div className=\"login__user-loading\">\n            <CircularProgress size={75} thickness={4} value={100} />\n            <p className=\"login__user-loading-text\">Loading Ethereum Wallet</p>\n          </div>\n        );\n      } else {\n        return (\n          <>\n            <div className=\"login__logo-ether-title\">\n              <Logo></Logo>\n              <TextTitle>\n                Create An Account\n              </TextTitle>\n            </div>\n            <form onSubmit={handleSubmit(handleFormSubmit)} className={styles.loginForm}>\n              <TextField id=\"standard-secondary\" value={connectedAccount} label=\"Current Ethereum Address\" color=\"secondary\" className=\"login__form-field\" disabled />\n              <div>\n                <TextField\n                  label=\"Email *\"\n                  name=\"email\"\n                  inputProps={{ maxLength: 100 }}\n                  inputRef={register({\n                    required: true,\n                    validate: {\n                      isValidEmail: value => {\n                        if (!EMAIL_REGEX.test(value)) {\n                          return 'Invalid email address';\n                        }\n\n                        return true;\n                      }\n                    }\n                  })}\n                  color=\"secondary\"\n                  className=\"login__form-field\"\n                />\n                <p className=\"login__form-error-message\">\n                  {\n                    errors.email && errors.email.type !== 'required' ? errors.email.message: renderErrorRequired(errors, 'email')\n                  }\n                </p>\n              </div>\n\n              <Button\n                label={'Sign up'}\n                buttonType=\"primary\"\n                className={'login__form-cta'}\n                loading={investorLoginLoading}\n                disabled={investorLoginLoading}\n              />\n              <div className=\"signup\">\n                <span>Have an account ?&nbsp;</span>\n                <Link className=\"login__form-desc login__form-forgot-password\" to={publicRoute('/login')}>Sign in ?</Link>\n              </div>\n            </form>\n          </>\n        )\n      }\n    }\n  }\n\n  const handleUserLogin = () => {\n    dispatch(connectWallet());\n  };\n\n  return (\n    <InvestorLayout>\n      {render()}\n    </InvestorLayout>\n  )\n};\n\nexport default withRouter(InvestorRegister);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ForgotPassword/InvestorForgotPassword.tsx",["1069","1070","1071","1072","1073","1074"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TextField, CircularProgress } from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport {withRouter, useParams, Link} from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\n\nimport { alertFailure, alertSuccess } from '../../store/actions/alert';\nimport { BaseRequest } from '../../request/Request';\nimport useStyles from './style';\nimport {adminRoute, apiRoute, publicRoute} from \"../../utils\";\nimport InvestorLayout from \"../InvestorLayout/InvestorLayout\";\nimport TextTitle from \"../InvestorLayout/TextTitle\";\nimport TextSubTitle from \"../InvestorLayout/TextSubTitle\";\nimport Button from \"../../components/Base/Button\";\n\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst getMessageParams = (isInvestor: boolean = false) => {\n  const msgSignature = MESSAGE_INVESTOR_SIGNATURE;\n\n  return [{\n    type: 'string',      // Any valid solidity type\n    name: 'Message',     // Any string label you want\n    value: msgSignature  // The value to sign\n  }]\n};\n\nconst loginLogo = '/images/login-logo.png';\n\nconst InvestorForgotPassword: React.FC<any> = (props: any) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const { data: loginInvestor } = useSelector((state: any) => state.investor);\n  const { data: ethAddress } = useSelector((state: any) => state.userConnect);\n  const [resetPasswordLoading, setResetPasswordLoading] = useState(false);\n\n  const { register, errors, handleSubmit } = useForm({\n    mode: 'onChange'\n  });\n\n  const renderErrorRequired = (errors: any, prop: string) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (loginInvestor) {\n      props.history.push('/');\n    }\n  }, [loginInvestor, props.history]);\n\n  const handleFormSubmit = async (data: any) =>  {\n    setResetPasswordLoading(true);\n\n    const windowObj = window as any;\n    const { ethereum } = windowObj;\n\n     await ethereum.sendAsync({\n          method: 'eth_signTypedData',\n          params: [getMessageParams(true), ethAddress],\n          from: ethAddress,\n      }, async function(err: Error, result: any) {\n        if (err || result.error) {\n           const errMsg = err.message || result.error.message\n           dispatch(alertFailure(errMsg));\n           setResetPasswordLoading(false);\n            return;\n        }\n\n        let url = apiRoute('/forgot-password');\n        const baseRequest = new BaseRequest();\n        const response = await baseRequest.post(url, {\n          signature: result.result,\n          email: data.email,\n          wallet_address: ethAddress,\n        }) as any;\n\n        const resObj = await response.json();\n\n       if (resObj?.status !== 200) {\n         dispatch(alertFailure(resObj.message));\n       } else {\n         dispatch(alertSuccess('Request successful, please check your inbox.'));\n       }\n\n        setResetPasswordLoading(false);\n      })\n  }\n\n  const render = () => {\n    return (\n      <>\n        <TextTitle>\n          Forgot Password\n        </TextTitle>\n        <TextSubTitle>\n          Enter your email address below to reset password\n        </TextSubTitle>\n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"login__form\">\n          <TextField\n            name=\"email\"\n            label=\"Email\"\n            inputRef={register({ required: true })}\n            inputProps={{ maxLength: 255 }}\n            color=\"secondary\"\n            className=\"login__form-field\"\n          />\n          <p className=\"login__form-error-message\">\n          {\n            renderErrorRequired(errors, 'email')\n          }\n          </p>\n          <Link className=\"login__form-desc login__form-forgot-password\" to={publicRoute('/login')}>Sign in ?</Link>\n          <Link className=\"login__form-desc login__form-forgot-password\" to={publicRoute('/register')}>Sign up ?</Link>\n\n          <Button\n            label={'Submit'}\n            buttonType=\"primary\"\n            className={'login__form-cta'}\n            loading={resetPasswordLoading}\n            disabled={resetPasswordLoading}\n          />\n\n        </form>\n      </>\n    )\n  }\n\n\n  return (\n    <InvestorLayout>\n      {render()}\n    </InvestorLayout>\n  )\n};\n\nexport default withRouter(InvestorForgotPassword);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Login/InvestorLogin.tsx",["1075","1076","1077","1078"],"import React, {useEffect, useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useWeb3React } from '@web3-react/core';\nimport {useDispatch} from 'react-redux';\nimport {TextField} from '@material-ui/core';\nimport {withRouter} from 'react-router-dom';\nimport { HashLoader } from 'react-spinners';\nimport {useForm} from 'react-hook-form';\n\nimport { AppContext } from '../../AppContext';\nimport { userActions } from '../../store/constants/user';\nimport { alertFailure } from '../../store/actions/alert';\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\nimport { disconnectWalletLayer2 } from '../../store/actions/wallet';\nimport { login, register as userRegister } from '../../store/actions/user';\nimport useStyles from './style';\nimport Button from '../../components/Base/Button';\nimport {userAlreadyExists} from '../../utils/user';\nimport InvestorLayout from \"../InvestorLayout/InvestorLayout\";\nimport TextTitle from \"../InvestorLayout/TextTitle\";\nimport useCommonStyle from '../../styles/CommonStyle'\nimport Logo from '../InvestorLayout/Logo'\n\nconst EMAIL_REGEX = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst InvestorLogin: React.FC<any> = (props: any) => {\n  const classes = useStyles();\n  const common = useCommonStyle();\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const { handleConnectorDisconnect } = useContext(AppContext);\n  const [loadingUserExists, setLoadingUserExists] = useState(false);\n  const [userExists, setUserExists] = useState(false);\n  const { loading: investorLoginLoading, error } = useTypedSelector(state => state.investor);\n  const { loading: investorRegisterLoading } = useTypedSelector(state => state.investorRegister);\n  const { account:  connectedAccount, library } = useWeb3React();\n  const { register, errors, handleSubmit } = useForm({\n    mode: 'onChange'\n  });\n\n  const renderErrorRequired = (errors: any, prop: string) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  }\n\n  useEffect(() => {\n    dispatch(alertFailure(error));\n\n    return () => {\n      dispatch({ type: userActions.INVESTOR_PURGE });\n    }\n  }, [error]);\n\n  useEffect(() => {\n    const checkUserExists = async () => {\n      if (connectedAccount) {\n        setLoadingUserExists(true);\n\n        const userExists = await userAlreadyExists(connectedAccount, true);\n        setLoadingUserExists(false);\n\n        setUserExists(userExists);\n      }     \n    } \n\n    connectedAccount ? checkUserExists(): history.push('/');\n\n    return () => { \n      const accessToken = localStorage.getItem(\"investor_access_token\");\n      if (!accessToken) {\n        dispatch(disconnectWalletLayer2()); \n      }\n\n      if (!connectedAccount) {\n        handleConnectorDisconnect && handleConnectorDisconnect();\n      }\n    }\n  }, [connectedAccount, handleConnectorDisconnect]);\n\n  const handleFormSubmit = (data: any) => {\n    if (userExists) {\n      connectedAccount && library && dispatch(login(connectedAccount, library));\n    } else {\n      connectedAccount && library && dispatch(userRegister({ \n        email: data.email, \n        address: connectedAccount, \n        library \n      }));\n    }\n  }\n\n  const render = () => {\n    if (loadingUserExists) {\n      return (\n        <div className=\"login__user-loading\" style={{ height: 660, maxHeight: 660, display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column'}}>\n          <HashLoader color={'#3232DC'} />\n          <p className=\"login__user-loading-text\" style={{ textAlign: 'center', color: '#999999' }}>Loading Ethereum Wallet</p>\n        </div>\n       );\n    } else {\n      return (\n        <>\n          <Logo/>\n          <TextTitle>\n            Wallet Connected\n          </TextTitle>\n          <form onSubmit={handleSubmit(handleFormSubmit)} className={classes.loginForm}>\n            <TextField id=\"standard-secondary\" value={connectedAccount} label=\"Current Ethereum Address\" color=\"secondary\" className=\"login__form-field\" disabled />\n            {\n              !userExists && (\n                <>\n                  <TextField\n                    label=\"Email *\"\n                    name=\"email\"\n                    inputProps={{ maxLength: 100 }}\n                    inputRef={register({\n                      required: true,\n                      validate: {\n                        isValidEmail: value => {\n                          if (!EMAIL_REGEX.test(value)) {\n                            return 'Invalid email address';\n                          }\n\n                          return true;\n                        }\n                      }\n                    })}\n                    color=\"secondary\"\n                    className=\"login__form-field\"\n                    />\n                    <p className=\"login__form-error-message\">\n                    {\n                      errors.email && errors.email.type !== 'required' ? errors.email.message: renderErrorRequired(errors, 'email')\n                    }\n                  </p>\n                </>\n              )\n            }\n            <p className={\"login__form-desc login__form-privacy \" + common.nnn1424h}>\n              By clicking sign in you indicate that you have read and agree to our <a>Terms of Service</a> and <a>Privacy Policy</a>\n            </p>\n            <Button\n              label={userExists ? 'Sign in': 'Sign up'}\n              buttonType=\"primary\"\n              className={'login__form-cta'}\n              loading={investorLoginLoading || investorRegisterLoading}\n            />\n          </form>\n        </>\n      )\n    }\n  }\n\n  return (\n    <InvestorLayout>\n      {render()}\n    </InvestorLayout>\n  )\n\n};\n\nexport default withRouter(InvestorLogin);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ResetPassword/InvestorResetPassword.tsx",["1079","1080","1081"],"import React, {useEffect, useRef, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {CircularProgress, TextField} from '@material-ui/core';\nimport {Link, useParams, withRouter} from 'react-router-dom';\nimport {useForm} from 'react-hook-form';\nimport _ from 'lodash';\nimport {alertFailure, alertSuccess} from '../../store/actions/alert';\nimport {BaseRequest} from '../../request/Request';\nimport {adminRoute, apiRoute, publicRoute} from \"../../utils\";\nimport InvestorLayout from \"../InvestorLayout/InvestorLayout\";\nimport TextTitle from \"../InvestorLayout/TextTitle\";\nimport TextSubTitle from \"../InvestorLayout/TextSubTitle\";\nimport Button from \"../../components/Base/Button\";\n\nconst MESSAGE_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst msgParams = [\n  {\n    type: 'string',      // Any valid solidity type\n    name: 'Message',     // Any string label you want\n    value: MESSAGE_SIGNATURE  // The value to sign\n },\n];\n\nconst InvestorResetPassword: React.FC<any> = (props: any) => {\n  const dispatch = useDispatch();\n  const baseRequest = new BaseRequest();\n\n  const { token } = useParams() as any;\n  const { data: loginInvestor } = useSelector((state: any) => state.investor);\n  const { data: loginUser } = useSelector((state: any) => state.user);\n  const { data: ethAddress } = useSelector((state: any) => state.userConnect);\n  const [isAvailableLoading, setIsAvailableLoading] = useState(false);\n  const [isAvailable, setIsAvailable] = useState(false);\n  const [resetPasswordLoading, setResetPasswordLoading] = useState(false);\n\n  const { register, watch, errors, handleSubmit } = useForm({\n    mode: 'onChange'\n  });\n\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n\n  const renderErrorRequired = (errors: any, prop: string) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  }\n\n  useEffect(() => {\n    const isInvestor = true;\n    const dataLoginInvestor = _.cloneDeep(loginInvestor);\n    if (isInvestor && !!dataLoginInvestor) {\n      props.history.push(publicRoute('/'));\n    }\n  }, [loginInvestor]);\n\n  useEffect(() => {\n    const isAvailableToken = async () => {\n      setIsAvailableLoading(true);\n\n      const response = await baseRequest.get(apiRoute(`/check-token/${token}`)) as any;\n      const resObj = await response.json();\n\n      if (resObj?.status !== 200 || resObj?.data.status !== 200) {\n        dispatch(alertFailure('Forgot password link has expired'));\n        props.history.push(publicRoute('/login'));\n        return ;\n      }\n      setIsAvailableLoading(false);\n      setIsAvailable(true);\n    };\n\n    if (!loginInvestor) {\n      isAvailableToken();\n    }\n  }, [token]);\n\n  const handleFormSubmit = async (data: any) =>  {\n     try {\n      setResetPasswordLoading(true);\n\n      const windowObj = window as any;\n      const { ethereum } = windowObj;\n\n      await ethereum.sendAsync({\n        method: 'eth_signTypedData',\n        params: [msgParams, ethAddress],\n        from: ethAddress,\n      }, async function(err: Error, result: any) {\n        if (err || result.error) {\n          const errMsg = err.message || result.error.message\n          dispatch(alertFailure(errMsg));\n          setResetPasswordLoading(false);\n          return;\n        }\n\n        const response = await baseRequest.post(apiRoute(`/reset-password/${token}`), {\n          password: data.password,\n          signature: result.result,\n          wallet_address: ethAddress,\n        }) as any;\n\n        const resObj = await response.json();\n\n        if (resObj?.status !== 200) {\n          dispatch(alertFailure(resObj.message));\n        } else {\n          dispatch(alertSuccess('Reset password successful!'));\n        }\n        setResetPasswordLoading(false);\n\n        const isInvestor = true;\n        const redirectUrl = isInvestor ? publicRoute('/login') : adminRoute('/login');\n        props.history.push(redirectUrl);\n      })\n    } catch (err) {\n      dispatch(alertFailure(err.message));\n      setResetPasswordLoading(false);\n    }\n  }\n\n  const render = () => {\n    if (isAvailableLoading) {\n      return <div style={{ textAlign: 'center' }}><CircularProgress size={70} /></div>\n    } else if (!isAvailableLoading && isAvailable) {\n    return (\n      <>\n        <TextTitle>\n          Reset Password\n        </TextTitle>\n        <TextSubTitle>\n          Enter your new password below to reset password\n        </TextSubTitle>\n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"login__form\">\n          <TextField name=\"password\" inputRef={register({\n            required: true ,\n            minLength: {\n              value: 8,\n              message: \"Password must have at least 8 characters\"\n            }})} inputProps={{ maxLength: 255, type: 'password' }} label=\"Password *\" color=\"secondary\" className=\"login__form-field\" />\n          <p className=\"login__form-error-message\">\n          {\n            errors.password && errors.password.type !== 'required' ? errors.password.message: renderErrorRequired(errors, 'password')\n          }\n          </p>\n          <TextField name=\"passwordConfirmation\" inputRef={register({\n            required: true,\n            validate: value => value === password.current || \"The passwords do not match\"\n          })} inputProps={{ maxLength: 255, type: 'password' }} label=\"Password Confirmation *\" color=\"secondary\" className=\"login__form-field\" />\n          <p className=\"login__form-error-message\">\n          {\n            errors.passwordConfirmation && errors.passwordConfirmation.type !== 'required' ? errors.passwordConfirmation.message: errors.confirmationPassword ? errors.confirmationPassword.message: renderErrorRequired(errors, 'passwordConfirmation')\n          }\n          </p>\n\n          <Link className=\"login__form-desc login__form-forgot-password\" to={publicRoute('/login')}>Sign in ?</Link>\n          <Link className=\"login__form-desc login__form-forgot-password\" to={publicRoute('/register')}>Sign up ?</Link>\n\n          <Button\n            label={'Submit'}\n            buttonType=\"primary\"\n            className={'login__form-cta'}\n            loading={resetPasswordLoading}\n            disabled={resetPasswordLoading}\n          />\n\n        </form>\n      </>\n      )\n    }\n  }\n\n  return (\n    <InvestorLayout>\n      {render()}\n    </InvestorLayout>\n  )\n};\n\nexport default withRouter(InvestorResetPassword);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ComingSoon/ComingSoon.tsx",["1082","1083"],"import React, {useEffect, useState} from 'react';\nimport moment from \"moment\";\nimport {withRouter} from \"react-router-dom\";\n\nimport useStyles from './style';\nimport Logo from '../InvestorLayout/Logo';\nimport CountDownCounter from './CountDownCounter';\nimport {unixTimeNow} from '../../utils/convertDate';\n\nconst ComingSoon = (props: any) => {\n  const campaignDetail = props.campaignDetail;  // Campaign Detail from BuyToken Page\n  const styles = useStyles();\n  const countdown = props.countdown;\n  const countDownUnix = moment(countdown || new Date()).unix();\n\n  useEffect(() => {\n    const clockInterval = setInterval(() => {\n      const now = unixTimeNow();\n      if (now >= countDownUnix) {\n        window.location.reload();\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(clockInterval);\n    }\n  }, []);\n\n  // @ts-ignore\n  return (\n    <div className={styles.comingSoonWrapper}>\n      <div className={styles.countdownWrapper}>\n        <div className={styles.starterCommingSoon}>\n          <Logo/>\n          <div className={styles.comingsoonText}>Coming Soon</div>\n        </div>\n\n        {!!countdown &&\n          <CountDownCounter\n            countdown={countdown}\n            campaignDetail={campaignDetail}\n          />\n        }\n\n        {campaignDetail &&\n          <div className={styles.campaignNext}>\n            We Are Getting Ready To Launch &nbsp;<span className={styles.campaignTitle}>{campaignDetail.title}</span>&nbsp; Campaign!\n          </div>\n        }\n      </div>\n    </div>\n  );\n};\n\n\nexport default withRouter(ComingSoon);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/index.ts",["1084"],"import { combineReducers } from 'redux';\nimport {\n  campaignsReducer,\n  campaignCreateReducer,\n  campaignDetailReducer,\n  campaignICORegisterReducer,\n  campaignAffiliateCreateReducer,\n  campaignErc20RateSetReducer,\n  campaignLatestReducer,\n  campaignEditReducer,\n  campaignStatusToggleReducer,\n  campaignRefundTokensReducer,\n  campaignProcessingReducer,\n  campaignLatestActiveReducer\n} from './campaign'\nimport { transactionCampaignReducer } from './transaction'\nimport { affiliateCampaignReducer, affiliateLinkGenerateReducer } from './affiliate'\nimport { getTokensReducer, createTokenReducer } from './token'\nimport { alertReducer } from './alert'\nimport userReducer, { userConnectReducer, userRegisterReducer, investorReducer, investorRegisterReducer, userProfileReducer, userProfileUpdateReducer } from './user';\nimport { buyTokenReducer, buyTokenPurchasableReducer } from './buy-token';\nimport {claimTokenReducer,claimTokenClaimableReducer, stakedTokensClaimReducer } from \"./claim-token\"\nimport { usdtAllowanceReducer } from './usdt-allowance';\nimport { usdtApproveReducer } from './usdt-approve';\nimport { settingDetailReducer } from './setting-detail';\nimport { settingFeeRateReducer } from './setting-fee-rate';\nimport { settingRevenueAddressReducer } from './setting-revenue-address';\nimport { settingDeactivateReducer } from './setting-deactivate';\nimport { settingOwnerReducer } from './setting-owner';\nimport { balanceReducer } from './balance';\nimport { usdtDetailReducer } from './usdt-detail';\nimport { appNetworkReducer, connectorReducer } from './appNetwork';\nimport { walletReducer } from './wallet';\nimport { \n  getTiersReducer,\n  getUserTierReducer,\n  depositReducer,\n  withdrawReducer,\n  getUserInfoReducer,\n  withdrawFeeReducer,\n  withdrawPercentReducer,\n  ratesReducer\n} from './sota-tiers'\nimport { getAllowanceReducer, approveReducer } from './sota-token';\nimport { messageReducer } from './message';\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  investor: investorReducer,\n  investorRegister: investorRegisterReducer,\n  userConnect: userConnectReducer,\n  userRegister: userRegisterReducer,\n  userProfile: userProfileReducer,\n  userProfileUpdate: userProfileUpdateReducer,\n  campaigns: campaignsReducer,\n  campaignProcessing: campaignProcessingReducer,\n  campaignCreate: campaignCreateReducer,\n  campaignEdit: campaignEditReducer,\n  campaignDetail: campaignDetailReducer,\n  campaignICORegister: campaignICORegisterReducer,\n  campaignAffiliateCreate: campaignAffiliateCreateReducer,\n  campaignErc20RateSet: campaignErc20RateSetReducer,\n  campaignLatest: campaignLatestReducer,\n  campaignLatestActive: campaignLatestActiveReducer,\n  campaignStatusToggle: campaignStatusToggleReducer,\n  campaignRefundTokens: campaignRefundTokensReducer,\n  transactionCampaign: transactionCampaignReducer,\n  affiliateCampaign: affiliateCampaignReducer,\n  affiliateLinkGenerate: affiliateLinkGenerateReducer,\n  buyToken: buyTokenReducer,\n  buyTokenPurchasable: buyTokenPurchasableReducer,\n  claimToken: claimTokenReducer,\n  stakedToken: stakedTokensClaimReducer,\n  usdtAllowance: usdtAllowanceReducer,\n  usdtApprove: usdtApproveReducer,\n  settingDetail: settingDetailReducer,\n  settingFeeRate: settingFeeRateReducer,\n  settingRevenueAddress: settingRevenueAddressReducer,\n  settingOwner: settingOwnerReducer,\n  settingDeactivate: settingDeactivateReducer,\n  tokensByUser:  getTokensReducer,\n  tokenCreateByUser: createTokenReducer,\n  balance: balanceReducer,\n  usdtDetail: usdtDetailReducer,\n  alert: alertReducer,\n  appNetwork: appNetworkReducer,\n  connector: connectorReducer,\n  wallet: walletReducer,\n  tiers: getTiersReducer,\n  userTier: getUserTierReducer,\n  deposit: depositReducer,\n  withdraw: withdrawReducer,\n  userInfo: getUserInfoReducer,\n  allowance: getAllowanceReducer,\n  approve: approveReducer,\n  withdrawFee: withdrawFeeReducer,\n  withdrawPercent: withdrawPercentReducer,\n  rates: ratesReducer,\n  messages: messageReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/ErrorBoundary/index.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/appNetwork.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/alert.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/user.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/user.ts",["1085","1086","1087","1088"],"import {alertFailure, alertSuccess} from '../../store/actions/alert';\nimport { ConnectorNames, connectorNames } from '../../constants/connectors';\nimport { userActions } from '../constants/user';\nimport { walletActions } from '../constants/wallet';\nimport { alertActions } from '../constants/alert';\nimport { BaseRequest } from '../../request/Request';\nimport { getWeb3Instance } from '../../services/web3';\nimport { AnyAction, Dispatch } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { Web3Provider } from '@ethersproject/providers'\nimport { ethers } from 'ethers';\n\ntype UserRegisterProps = {\n  email: string;\n  address: string;\n  library: Web3Provider;\n}\n\ntype UserProfileProps = {\n  firstName: string;\n  lastName: string;\n  email: string;\n  userName: string;\n  avatar: string;\n}\n\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst getMessageParams = () => {\n  const msgSignature = MESSAGE_INVESTOR_SIGNATURE;\n\n  return [{\n    type: 'string',      // Any valid solidity type\n    name: 'Message',     // Any string label you want\n    value: msgSignature // The value to sign\n  }]\n}\n\nexport const getParamsWithConnector = (connectedAccount: string) => ({\n  [ConnectorNames.BSC]: {\n    method: 'eth_sign',\n    params: [connectedAccount, MESSAGE_INVESTOR_SIGNATURE]\n  },\n  [ConnectorNames.WalletConnect]: {\n    method: 'eth_sign',\n    params: [connectedAccount, MESSAGE_INVESTOR_SIGNATURE]\n  },\n  [ConnectorNames.WalletLinkConnect]: {\n    method: 'eth_sign',\n    params: [connectedAccount, MESSAGE_INVESTOR_SIGNATURE]\n  },\n  [ConnectorNames.Fortmatic]: {\n    method: 'eth_signTypedData',\n    params: [getMessageParams(), connectedAccount]\n  },\n  [ConnectorNames.MetaMask]: {\n    method: 'eth_signTypedData',\n    params: [getMessageParams(), connectedAccount]\n  },\n})\n\nconst dispatchErrorWithMsg = (dispatch: Dispatch, action: string, msg: string) => {\n  dispatch({\n    type: action,\n    payload: msg\n  })\n}\n\nconst getCurrentAccount = async () => {\n  const web3Instance = getWeb3Instance();\n  const accounts = await web3Instance?.eth.getAccounts();\n\n  if (accounts && accounts.length !== 0) {\n    return accounts[0];\n  }\n\n  return undefined;\n}\n\nexport const logout = (isInvestor: boolean = false) => {\n  isInvestor ? localStorage.removeItem(\"investor_access_token\"): localStorage.removeItem(\"access_token\");\n\n  return {\n    type: !isInvestor ? userActions.USER_LOGOUT: userActions.INVESTOR_LOGOUT\n  }\n}\n\nexport const resetUserState = (isInvestor: boolean = false) => {\n  return {\n    type: !isInvestor ? userActions.USER_PURGE: userActions.INVESTOR_PURGE\n  }\n}\n\nexport const clearUserProfileUpdate = () => {\n  return {\n    type: userActions.USER_PROFILE_UPDATE_CLEAR_ERROR\n  }\n}\n\nexport const login = (connectedAccount: string, library: Web3Provider) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    try {\n      dispatch({\n        type: userActions.INVESTOR_LOGIN_LOADING\n      });\n\n      const baseRequest = new BaseRequest();\n      const connector = getState().connector.data;\n      const paramsWithConnector = getParamsWithConnector(connectedAccount)[connector as connectorNames];\n\n      if (connectedAccount && library && paramsWithConnector) {\n        const provider = library.provider;\n        if (connector !== ConnectorNames.WalletConnect) {\n          const res = await (provider as any).sendAsync({\n              method: paramsWithConnector.method,\n              params: paramsWithConnector.params\n          }, async function(err: Error, result: any) {\n            if (err || result.error) {\n               const errMsg = (err.message || (err as any).error) || result.error.message\n               console.log('Error when signing message: ', errMsg);\n                dispatchErrorWithMsg(dispatch, userActions.INVESTOR_LOGIN_FAILURE, errMsg);\n            } else {\n              console.log(result.result);\n              const response = await baseRequest.post(`/user/login`, {\n                signature: result.result,\n                wallet_address: connectedAccount,\n              }) as any;\n\n              const resObj = await response.json();\n\n              if (resObj.status && resObj.status === 200 && resObj.data) {\n                const { token, user } = resObj.data;\n\n                localStorage.setItem('investor_access_token', token.token);\n\n                dispatch({ type: walletActions.WALLET_CONNECT_LAYER2_SUCCESS });\n\n                dispatch({\n                  type: userActions.INVESTOR_LOGIN_SUCCESS,\n                  payload: user\n                });\n\n              }\n\n              if (resObj.status && resObj.status !== 200) {\n                if (resObj.status == 404) {\n                  // redirect to register page\n                  dispatch(alertFailure(resObj.message));\n                  dispatchErrorWithMsg(dispatch, userActions.INVESTOR_LOGIN_FAILURE, '');\n                } else {\n                  // show error\n                  console.log('RESPONSE Login: ', resObj);\n                  dispatch(alertFailure(resObj.message));\n                  dispatchErrorWithMsg(dispatch, userActions.INVESTOR_LOGIN_FAILURE, '');\n                }\n              }\n            }\n          });\n        } else {\n          var rawMessage = MESSAGE_INVESTOR_SIGNATURE;\n          var rawMessageLength = new Blob([rawMessage]).size\n          var message = ethers.utils.toUtf8Bytes(\"\\x19Ethereum Signed Message:\\n\" + rawMessageLength + rawMessage)\n          var messageHash = ethers.utils.keccak256(message)\n          var params = [\n            connectedAccount,\n            messageHash\n          ]\n          await (library as any).provider.enable();\n\n          var signature = await (library as any).provider.wc.signMessage(params);\n          console.log(signature);\n        }\n      }\n    } catch (error) {\n      console.log('ERROR Login: ', error);\n      dispatch(alertFailure(error.message));\n      dispatchErrorWithMsg(dispatch, userActions.INVESTOR_LOGIN_FAILURE, '');\n    }\n  }\n}\n\nexport const register = ({ email, address: connectedAccount, library }: UserRegisterProps) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({\n      type: userActions.INVESTOR_REGISTER_LOADING\n    });\n    try {\n      const baseRequest = new BaseRequest();\n\n      const connector = getState().connector.data;\n      const paramsWithConnector = getParamsWithConnector(connectedAccount)[connector as connectorNames];\n\n      if (connectedAccount && library && paramsWithConnector) {\n        const provider = library.provider;\n        provider && await (provider as any).sendAsync({\n            method: paramsWithConnector.method,\n            params: paramsWithConnector.params\n        }, async function(err: Error, result: any) {\n          if (err || result.error) {\n             const errMsg = (err.message || (err as any).error) || result.error.message\n              dispatchErrorWithMsg(dispatch, userActions.INVESTOR_REGISTER_FAILURE, errMsg);\n              return;\n          }\n\n          const response = await baseRequest.post(`/user/register/`, {\n            email,\n            wallet_address: connectedAccount,\n            signature: result.result,\n          }) as any;\n\n          const resObj = await response.json();\n\n          if (resObj.status && resObj.status === 200) {\n\n            if (resObj.data) {\n              const { token, user } = resObj.data;\n\n              localStorage.setItem('investor_access_token', token.token);\n\n              dispatch({ type: walletActions.WALLET_CONNECT_LAYER2_SUCCESS });\n\n              dispatch({\n                type: alertActions.SUCCESS_MESSAGE,\n                payload: 'Register Account Successful'\n              });\n\n              dispatch({\n                type: userActions.INVESTOR_REGISTER_SUCCESS,\n                payload: user\n              });\n\n              dispatch({\n                type: userActions.INVESTOR_LOGIN_SUCCESS,\n                payload: user\n              });\n\n            } else {\n              dispatch({\n                type: alertActions.SUCCESS_MESSAGE,\n                payload: resObj.message\n              });\n\n              dispatch({\n                type: userActions.INVESTOR_REGISTER_SUCCESS,\n                payload: resObj.message\n              });\n            }\n\n          }\n\n          if (resObj.status && resObj.status !== 200) {\n            console.log('RESPONSE Register: ', resObj);\n            dispatch(alertFailure(resObj.message));\n            dispatchErrorWithMsg(dispatch, userActions.INVESTOR_REGISTER_FAILURE, '');\n          }\n        });\n      }\n    } catch (error) {\n      console.log('ERROR Register: ', error);\n      dispatch(alertFailure(error.message));\n      dispatchErrorWithMsg(dispatch, userActions.INVESTOR_REGISTER_FAILURE, '');\n    }\n  }\n};\n\nexport const connectWallet = () => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n    dispatch({ type: userActions.USER_CONNECT_WALLET_LOADING });\n    try {\n      const windowObj = window as any;\n      const { ethereum } = windowObj;\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n      const loginUser = accounts.length ? accounts[0] : '';\n\n      if (loginUser) {\n        dispatch({\n          type: userActions.USER_CONNECT_WALLET_SUCCESS,\n          payload: loginUser\n        });\n      } else {\n        dispatch(logout());\n      }\n    } catch (error) {\n      dispatch({\n        type: userActions.USER_CONNECT_WALLET_FAILURE,\n        payload: error\n      });\n    }\n  }\n}\n\nexport const getUserDetail = () => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n    dispatch({ type: userActions.USER_PROFILE_LOADING });\n    try {\n      const baseRequest = new BaseRequest();\n\n      const response = await baseRequest.get('/user/profile') as any;\n      const resObj = await response.json();\n\n      if (resObj.status && resObj.status === 200) {\n        dispatch({\n          type: userActions.USER_PROFILE_SUCCESS,\n          payload: resObj.data.user\n        })\n      } else {\n        dispatch({\n          type: userActions.USER_PROFILE_FAILURE,\n          payload: resObj.message\n        })\n      }\n    } catch (error) {\n      dispatch({\n        type: userActions.USER_PROFILE_FAILURE,\n        payload: error\n      });\n    }\n  }\n}\n\nexport const updateUserProfile = (updatedUser: UserProfileProps) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n    try {\n      dispatch({\n        type: userActions.USER_PROFILE_UPDATE_LOADING\n      });\n\n      const baseRequest = new BaseRequest();\n      const ethAddress = await getCurrentAccount();\n\n      if (ethAddress) {\n        const windowObj = window as any;\n        const { ethereum } = windowObj;\n        const { avatar } = updatedUser;\n       await ethereum.sendAsync({\n            method: 'eth_signTypedData',\n            params: [getMessageParams(), ethAddress],\n            from: ethAddress,\n        }, async function(err: Error, result: any) {\n          if (err || result.error) {\n             const errMsg = err.message || result.error.message\n              dispatchErrorWithMsg(dispatch, userActions.USER_PROFILE_UPDATE_FAILURE, errMsg);\n          } else {\n            const response = await baseRequest.post(`/user/update-profile`, {\n              avatar,\n              signature: result.result\n            }) as any;\n\n            const resObj = await response.json();\n\n            if (resObj.status && resObj.status === 200 && resObj.data) {\n              const { user } = resObj.data;\n\n              dispatch(alertSuccess('Update profile successful!'));\n\n              dispatch({\n                type: userActions.USER_LOGIN_SUCCESS,\n                payload: user\n              });\n\n              dispatch({\n                type: userActions.USER_PROFILE_UPDATE_SUCCESS,\n                payload: user\n              });\n            }\n\n            if (resObj.status && resObj.status !== 200) {\n              dispatchErrorWithMsg(dispatch, userActions.USER_PROFILE_UPDATE_FAILURE, resObj.message);\n            }\n          }\n        });\n      }\n    } catch (error) {\n      dispatchErrorWithMsg(dispatch, userActions.USER_PROFILE_UPDATE_FAILURE, error.message);\n    }\n  }\n}\n\nexport const joinPool = (connectedAccount: string, library: Web3Provider, poolId?: number) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    try {\n      const baseRequest = new BaseRequest();\n      const connector = getState().connector.data;\n      const paramsWithConnector = getParamsWithConnector(connectedAccount)[connector as connectorNames];\n\n      if (connectedAccount && library && paramsWithConnector) {\n        const provider = library.provider;\n        if (connector !== ConnectorNames.WalletConnect) {\n          const res = await (provider as any).sendAsync({\n              method: paramsWithConnector.method,\n              params: paramsWithConnector.params\n          }, async function(err: Error, result: any) {\n            if (err || result.error) {\n               const errMsg = (err.message || (err as any).error) || result.error.message\n               console.log('Error when signing message: ', errMsg);\n                dispatchErrorWithMsg(dispatch, userActions.INVESTOR_LOGIN_FAILURE, errMsg);\n            } else {\n              console.log(result.result);\n              const response = await baseRequest.post(`/user/login`, {\n                signature: result.result,\n                wallet_address: connectedAccount,\n              }) as any;\n\n              const resObj = await response.json();\n\n              if (resObj.status && resObj.status === 200 && resObj.data) {\n                const { token, user } = resObj.data;\n\n                localStorage.setItem('investor_access_token', token.token);\n\n                dispatch({ type: walletActions.WALLET_CONNECT_LAYER2_SUCCESS });\n\n                dispatch({\n                  type: userActions.INVESTOR_LOGIN_SUCCESS,\n                  payload: user\n                });\n\n              }\n\n              if (resObj.status && resObj.status !== 200) {\n                if (resObj.status == 404) {\n                  // redirect to register page\n                  dispatch(alertFailure(resObj.message));\n                  dispatchErrorWithMsg(dispatch, userActions.INVESTOR_LOGIN_FAILURE, '');\n                } else {\n                  // show error\n                  console.log('RESPONSE Login: ', resObj);\n                  dispatch(alertFailure(resObj.message));\n                  dispatchErrorWithMsg(dispatch, userActions.INVESTOR_LOGIN_FAILURE, '');\n                }\n              }\n            }\n          });\n        } else {\n          var rawMessage = MESSAGE_INVESTOR_SIGNATURE;\n          var rawMessageLength = new Blob([rawMessage]).size\n          var message = ethers.utils.toUtf8Bytes(\"\\x19Ethereum Signed Message:\\n\" + rawMessageLength + rawMessage)\n          var messageHash = ethers.utils.keccak256(message)\n          var params = [\n            connectedAccount,\n            messageHash\n          ]\n          await (library as any).provider.enable();\n\n          var signature = await (library as any).provider.wc.signMessage(params);\n          console.log(signature);\n        }\n      }\n    } catch (error) {\n      console.log('ERROR Login: ', error);\n      dispatch(alertFailure(error.message));\n      dispatchErrorWithMsg(dispatch, userActions.INVESTOR_LOGIN_FAILURE, '');\n    }\n  }\n}\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/index.tsx",["1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103"],"import React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport {HashLoader} from \"react-spinners\";\nimport {Link, useLocation, useParams} from 'react-router-dom';\nimport {useDispatch} from 'react-redux';\n//@ts-ignore\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport BigNumber from 'bignumber.js';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport withWidth, {isWidthDown, isWidthUp} from '@material-ui/core/withWidth';\n\nimport {useTypedSelector} from '../../hooks/useTypedSelector';\nimport usePoolDetailsMapping, {PoolDetailKey} from './hooks/usePoolDetailsMapping';\nimport useAuth from '../../hooks/useAuth';\nimport usePoolDetails from '../../hooks/usePoolDetails';\nimport useTokenSoldProgress from './hooks/useTokenSoldProgress';\nimport usePoolJoinAction from './hooks/usePoolJoinAction';\nimport useFetch from '../../hooks/useFetch';\n\nimport Tiers from '../AccountV2/Tiers';\nimport LotteryWinners from './LotteryWinners';\nimport PoolAbout from './PoolAbout';\nimport ClaimToken from './ClaimToken';\nimport MyTier from './MyTier';\nimport BuyTokenForm from './BuyTokenForm';\nimport Button from './Button';\nimport StatusBar from './StatusBar';\nimport Countdown from '../../components/Base/Countdown';\nimport DefaultLayout from '../../components/Layout/DefaultLayout';\nimport {ETH_CHAIN_ID, NETWORK_BSC_NAME, NETWORK_ETH_NAME} from '../../constants/network';\nimport {getPoolCountDown} from '../../utils/getPoolCountDown';\nimport {getPoolStatus} from '../../utils/getPoolStatus';\nimport {numberWithCommas} from '../../utils/formatNumber';\n\nimport {sotaTiersActions} from '../../store/constants/sota-tiers';\n\nimport useStyles from './style';\nimport {pushMessage} from '../../store/actions/message';\nimport {getIconCurrencyUsdt} from \"../../utils/usdt\";\nimport {POOL_TYPE, TIER_LEVELS} from \"../../constants\";\nimport PoolInfoTable from \"./PoolInfoTable/PoolInfoTable\";\nimport WhiteListUserGuideBanner from \"./WhiteListUserGuideBanner/WhiteListUserGuideBanner\";\nimport {getEtherscanName, getEtherscanTransactionAddress} from \"../../utils/network\";\nimport PoolIsEndMessage from \"./PoolIsEndMessage/PoolIsEndMessage\";\n\nconst copyImage = \"/images/copy.svg\";\nconst poolImage = \"/images/pool_circle.svg\";\nconst iconClose = \"/images/icons/close.svg\";\n\nenum HeaderType {\n  Main = \"Main\",\n  About = \"About the project\",\n  Participants = \"Winner\",\n  MyTier = \"My Tier\"\n}\n\nconst headers = [HeaderType.Main, HeaderType.MyTier, HeaderType.About, HeaderType.Participants];\n\nconst ETHERSCAN_BASE_URL = process.env.REACT_APP_ETHERSCAN_BASE_URL;\n\nconst BuyToken: React.FC<any> = (props: any) => {\n  const dispatch = useDispatch();\n  const styles = useStyles();\n\n  const [buyTokenSuccess, setBuyTokenSuccess] = useState<boolean>(false);\n\n  const [copiedAddress, setCopiedAddress] = useState(false);\n  const [activeNav, setActiveNav] = useState(HeaderType.About);\n  const [disableAllButton, setDisableAllButton] = useState<boolean>(false);\n\n  const { pathname } = useLocation();\n  const { id } = useParams() as any;\n  /* const userTier = useTypedSelector(state => state.userTier).data; */\n  const { appChainID } = useTypedSelector(state => state.appNetwork).data;\n  const { poolDetails, loading: loadingPoolDetail } = usePoolDetails(id);\n  const { isAuth, connectedAccount, wrongChain } = useAuth();\n  // Fetch token sold, total tokens sold\n  const { tokenSold, soldProgress } = useTokenSoldProgress(\n      poolDetails?.poolAddress,\n      poolDetails?.amount,\n      poolDetails?.networkAvailable,\n      poolDetails,\n  );\n  const { joinPool, poolJoinLoading, joinPoolSuccess } = usePoolJoinAction({ poolId: poolDetails?.id });\n  const { data: existedWinner } = useFetch<Array<any>>(\n    poolDetails ? `/pool/${poolDetails?.id}/check-exist-winner?wallet_address=${connectedAccount}`: undefined,\n    poolDetails?.method !== \"whitelist\"\n  );\n\n  const { data: pickedWinner } = useFetch<Array<any>>(\n    poolDetails ? `/pool/${poolDetails?.id}/check-picked-winner`: undefined,\n    poolDetails?.method !== \"whitelist\"\n  );\n\n  const { data: alreadyJoinPool } = useFetch<boolean>(\n    poolDetails && connectedAccount ?\n    `/user/check-join-campaign/${poolDetails?.id}?wallet_address=${connectedAccount}`\n    : undefined\n  );\n  const { data: verifiedEmail = true } = useFetch<boolean>(\n    poolDetails && connectedAccount && isAuth ?\n    `/user/check-wallet-address?wallet_address=${connectedAccount}`\n    : undefined\n  );\n  const { data: currentUserTier } = useFetch<any>(\n    id && connectedAccount ?\n    `pool/${id}/user/${connectedAccount}/current-tier`\n    : undefined,\n  );\n  const { data: winnersList } = useFetch<any>(`/user/winner-list/${id}?page=1&limit=10&`);\n\n  const poolDetailsMapping = usePoolDetailsMapping(poolDetails);\n\n  // Use for check whether pool exist in selected network or not\n  const networkAvailable = poolDetails?.networkAvailable === 'eth'? NETWORK_ETH_NAME: NETWORK_BSC_NAME;\n  const appNetwork = appChainID === ETH_CHAIN_ID ? 'eth': 'bsc';\n  const ableToFetchFromBlockchain = appNetwork === poolDetails?.networkAvailable && !wrongChain;\n\n  const userBuyLimit = currentUserTier?.max_buy || 0;\n  const userBuyMinimum = currentUserTier?.min_buy || 0;\n\n  // With Whitelist situation, Enable when join time < current < end join time\n  // With FCFS, always disable join button\n  const joinTimeInDate = poolDetails?.joinTime ? new Date(Number(poolDetails?.joinTime) * 1000): undefined;\n  const endJoinTimeInDate = poolDetails?.endJoinTime ? new Date(Number(poolDetails?.endJoinTime) * 1000): undefined;\n  const startBuyTimeInDate = poolDetails?.startBuyTime ? new Date(Number(poolDetails?.startBuyTime) * 1000): undefined;\n  const endBuyTimeInDate = poolDetails?.endBuyTime ? new Date(Number(poolDetails?.endBuyTime) * 1000): undefined;\n  /* const tierStartBuyInDate = new Date(Number(currentUserTier?.start_time) * 1000); */\n  /* const tierEndBuyInDate = new Date(Number(currentUserTier?.end_time) * 1000); */\n  const releaseTimeInDate = poolDetails?.releaseTime ? new Date(Number(poolDetails?.releaseTime) * 1000): undefined;\n\n  // Get Currency Info\n  const { currencyIcon, currencyName } = getIconCurrencyUsdt({\n    purchasableCurrency: poolDetails?.purchasableCurrency,\n    networkAvailable: poolDetails?.networkAvailable,\n  });\n\n  const today = new Date();\n  const availableJoin = poolDetails?.method === 'whitelist' && joinTimeInDate && endJoinTimeInDate\n    ? (\n      today >= joinTimeInDate &&\n      today <= endJoinTimeInDate &&\n      currentUserTier &&\n      /* today <= tierEndBuyInDate && */\n      connectedAccount &&\n      !wrongChain &&\n      new BigNumber(currentUserTier?.level || 0).gte(poolDetails?.minTier)\n      && verifiedEmail\n    )\n    : false;\n\n  const availablePurchase = startBuyTimeInDate && endBuyTimeInDate &&\n    today >= startBuyTimeInDate &&\n    today <= endBuyTimeInDate &&\n    /* today >= tierStartBuyInDate && */\n    /* today <= tierEndBuyInDate && */\n    poolDetails?.isDeployed &&\n    verifiedEmail;\n    /* (poolDetails?.method === 'whitelist' ? alreadyJoinPool: true); */\n\n  // Get Pool Status\n  const poolStatus = getPoolStatus(\n    joinTimeInDate,\n    endJoinTimeInDate,\n    startBuyTimeInDate,\n    endBuyTimeInDate,\n    releaseTimeInDate,\n    new BigNumber(tokenSold).div(poolDetails?.amount || 1).toFixed(),\n    poolDetails?.type !== 'swap',\n    poolDetails?.method\n  );\n\n  const displayCountDownTime = useCallback((\n    method: string | undefined,\n    startJoinTime: Date | undefined,\n    endJoinTime: Date| undefined,\n    startBuyTime: Date | undefined,\n    endBuyTime: Date | undefined\n  ) => {\n    return getPoolCountDown(startJoinTime, endJoinTime, startBuyTime, endBuyTime, method);\n  }, [poolDetails?.method, joinTimeInDate, endJoinTimeInDate, startBuyTimeInDate, endBuyTimeInDate]);\n\n  const { date: countDownDate, display } = displayCountDownTime(poolDetails?.method, joinTimeInDate, endJoinTimeInDate, startBuyTimeInDate, endBuyTimeInDate)\n\n  const shortenAddress = (address: string, digits: number = 4) => {\n    return `${address.substring(0, digits + 2)}...${address.substring(42 - digits)}`\n  }\n\n  const userTiersAnnotationText = useMemo(() => {\n    if (!verifiedEmail) {\n      return 'Determined at whitelist closing';\n    }\n\n    if (pickedWinner && poolDetails) {\n      const approximateValue = new BigNumber(userBuyLimit).dividedBy(poolDetails?.ethRate || 0);\n      return `\n        *Individual caps: ${numberWithCommas(userBuyLimit.toString())} ${currencyName} - ${' '} \n        Estimated equivalent of ${numberWithCommas(approximateValue.toFixed())} ${poolDetails?.tokenDetails?.symbol}\n      `;\n    }\n\n    return 'Determined at whitelist closing';\n  }, [existedWinner, userBuyLimit, poolDetails, verifiedEmail]);\n\n  useEffect(() => {\n    setActiveNav(HeaderType.Main);\n    if (!poolDetails?.isDeployed) setActiveNav(HeaderType.About);\n    if (availablePurchase) setActiveNav(HeaderType.Main);\n  }, [availablePurchase, poolDetails]);\n\n  // Auto Scroll To Top When redirect from other pages\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  // Hide main tab after end buy time\n  useEffect(() => {\n    if (\n      endBuyTimeInDate && endBuyTimeInDate < new Date() &&\n      activeNav === HeaderType.Main\n    ) setActiveNav(HeaderType.About);\n  }, [endBuyTimeInDate]);\n\n  useEffect(() => {\n    currentUserTier && dispatch({\n      type: sotaTiersActions.USER_TIER_SUCCESS,\n      payload: currentUserTier.level\n    })\n  }, [currentUserTier]);\n\n  useEffect(() => {\n    const appNetwork = appChainID === ETH_CHAIN_ID ? 'eth': 'bsc';\n    setDisableAllButton(appNetwork !== poolDetails?.networkAvailable);\n    if(appNetwork !== poolDetails?.networkAvailable && poolDetails) {\n      dispatch(pushMessage(`Please switch to ${poolDetails?.networkAvailable.toLocaleUpperCase()} network to do Join pool, Approve/Buy tokens.`))\n    } else {\n      dispatch(pushMessage(''));\n    }\n  }, [appChainID, poolDetails])\n\n  const render = () => {\n    if (loadingPoolDetail)  {\n      return (\n        <div className={styles.loader} style={{ marginTop: 70 }}>\n          <HashLoader loading={true} color={'#3232DC'} />\n          <p className={styles.loaderText}>\n            <span style={{ marginRight: 10 }}>Loading Pool Details ...</span>\n          </p>\n        </div>\n      )\n    }\n\n    if ((!poolDetails || !poolDetails?.isDisplay) && !loadingPoolDetail) {\n      return <p style={{\n        color: 'white',\n        textAlign: 'center',\n        fontSize: 16,\n        fontWeight: 700,\n        marginTop: 20\n      }}>\n        This pool does not exist. Try later! 🙂\n      </p>\n    } else {\n      return (\n        <>\n          <header className={styles.poolDetailHeader}>\n            <div className={styles.poolHeaderWrapper}>\n              <div className={styles.poolHeaderImage}>\n                <img src={poolDetails?.banner || poolImage} alt=\"pool-image\" className={styles.poolImage}/>\n              </div>\n              <div className={styles.poolHeaderInfo}>\n                <h2 className={styles.poolHeaderTitle}>\n                  {poolDetails?.title}\n                </h2>\n                <Tooltip title={<p style={{ fontSize: 15, textAlign: 'left' }}>Token ICO Address</p>}>\n                    <p className={styles.poolHeaderAddress}>\n                      {isWidthUp('sm', props.width) && poolDetails?.tokenDetails?.address}\n                      {isWidthDown('xs', props.width) && shortenAddress(poolDetails?.tokenDetails?.address || '', 8)}\n\n                      <CopyToClipboard text={poolDetails?.tokenDetails?.address || ''}\n                        onCopy={() => {\n                        setCopiedAddress(true);\n                        setTimeout(() => {\n                          setCopiedAddress(false);\n                          }, 2000);\n                        }}\n                      >\n                      {\n                        !copiedAddress ? <img src={copyImage} alt=\"copy-icon\" className={styles.poolHeaderCopy} />\n                        : <p style={{ color: '#6398FF', marginLeft: 10 }}>Copied</p>\n                      }\n                      </CopyToClipboard>\n                    </p>\n                </Tooltip>\n                {isWidthUp('md', props.width) && <StatusBar currentStatus={poolStatus} />}\n              </div>\n            </div>\n            <div className={styles.poolType}>\n              <span className={styles.poolHeaderType}>\n                <div className={styles.poolHeaderTypeInner}>\n                  <img src={poolDetails?.networkIcon} />\n                  <strong className={styles.poolHeaderNetworkAvailable}>{networkAvailable}</strong>\n                </div>\n              </span>\n              <span className={`${styles.poolStatus} ${styles.poolStatus}--${poolStatus}`}>\n                {poolStatus}\n              </span>\n            </div>\n            {ableToFetchFromBlockchain && (winnersList && winnersList.total > 0) && verifiedEmail &&\n            (currentUserTier && currentUserTier.level == TIER_LEVELS.DOVE) &&\n              <p className={styles.poolTicketWinner}>\n                {existedWinner &&\n                <div>\n                  {\n                    [...Array(3)].map((num, index) => (\n                      <img src=\"/images/fire-cracker.svg\" alt=\"file-cracker\" key={index} />\n                    ))\n                  }\n                </div>\n                }\n                {!existedWinner &&\n                <div>\n                  {\n                    [...Array(3)].map((num, index) => (\n                      <img style={{ paddingLeft: 5 }} src=\"/images/icons/warning.svg\" alt=\"file-cracker\" key={index} />\n                    ))\n                  }\n                </div>\n                }\n                <span style={{ marginLeft: 14 }}>\n                  {/*Congratulations! You have won the lottery!*/}\n                  {existedWinner &&\n                    <p className={styles.LotteryWinnersMessage}>\n                      Congratulations! You have won the lottery. You can buy up to {numberWithCommas(`${userBuyLimit}`)} {currencyName}.\n                    </p>\n                  }\n                  {!existedWinner &&\n                    <p className={styles.LotteryWinnersMessage}>\n                      Unfortunately, you did not win a ticket to buy this time! See you next time.\n                    </p>\n                  }\n                </span>\n              </p>\n            }\n            {endBuyTimeInDate && new Date() > endBuyTimeInDate && ableToFetchFromBlockchain &&\n              <p className={styles.poolTicketWinner}>\n                <div>\n                  {\n                    [...Array(3)].map((num, index) => (\n                      <img src=\"/images/fire-cracker.svg\" alt=\"file-cracker\" key={index} />\n                    ))\n                  }\n                </div>\n                <span style={{ marginLeft: 14 }}>\n                  <PoolIsEndMessage\n                    poolDetails={poolDetails}\n                  />\n                </span>\n              </p>\n            }\n            {\n              !verifiedEmail && (\n                <p className={styles.poolTicketWinner}>\n                  <div>\n                    <img src=\"/images/red-warning.svg\" alt=\"warning\" />\n                  </div>\n                  <span style={{ marginLeft: 14 }}>\n                    Your account has not been verified. To verify your account, please click&nbsp;\n                    <Link\n                      to=\"/account\"\n                      style={{ color: 'white', textDecoration: 'underline' }}\n                    >\n                      here\n                    </Link>.\n                  </span>\n                </p>\n              )\n            }\n            {\n              // (joinTimeInDate || 0) <= today && today <= (endJoinTimeInDate || 0) &&\n              (poolDetails?.joinTime || 0) <= (today.getTime() / 1000) && (today.getTime() / 1000) <= (poolDetails?.endJoinTime || 0) &&\n\n              <>\n                {!(alreadyJoinPool || joinPoolSuccess) &&\n                  (\n                    <p className={styles.poolTicketWinner}>\n                      <div>\n                        <img src=\"/images/tick.svg\" alt=\"warning\" />\n                      </div>\n                      <span style={{ marginLeft: 14 }}>\n                        You must click the Apply Whitelist button to join the pool whitelist.\n                      </span>\n                    </p>\n                  )\n                }\n                {\n                (alreadyJoinPool || joinPoolSuccess) &&\n                  (\n                    <WhiteListUserGuideBanner\n                      poolDetails={poolDetails}\n                    />\n                  )\n                }\n              </>\n            }\n          </header>\n          <main className={styles.poolDetailInfo}>\n            <div className={styles.poolDetailTierWrapper}>\n              <div className={styles.poolDetailIntro}>\n              {\n                (loadingPoolDetail) ? (\n                  <div className={styles.loader}>\n                    <HashLoader loading={true} color={'#3232DC'} />\n                    <p className={styles.loaderText}>\n                      <span style={{ marginRight: 10 }}>Loading Pool Details ...</span>\n                    </p>\n                  </div>\n                ):  poolDetailsMapping &&\n                (\n                  <>\n                    <PoolInfoTable\n                      poolDetailsMapping={poolDetailsMapping}\n                      poolDetails={poolDetails}\n                    />\n\n                    <div className={styles.btnGroup}>\n                      {\n                        (availableJoin && !alreadyJoinPool && !joinPoolSuccess && !disableAllButton) &&\n                        <Button\n                          text={(!alreadyJoinPool && !joinPoolSuccess) ? 'Apply Whitelist': 'Applied Whitelist '}\n                          // text={(!joinPoolSuccess) ? 'Apply Whitelist': 'Applied Whitelist '}\n                          backgroundColor={'#D01F36'}\n                          // disabled={!availableJoin || alreadyJoinPool || joinPoolSuccess || disableAllButton}\n                          loading={poolJoinLoading}\n                          onClick={joinPool}\n                          style={{\n                            minWidth: 125,\n                            padding: '0 20px',\n                          }}\n                        />\n                      }\n\n                      <Button\n                        text={getEtherscanName({ networkAvailable: poolDetails?.networkAvailable })}\n                        backgroundColor={'#3232DC'}\n                        onClick={() => {\n                          const url = getEtherscanTransactionAddress({ appChainID: appChainID, address: poolDetails?.tokenDetails?.address });\n                          poolDetails && window.open(url as string, '_blank')\n                        }}\n                        disabled={!poolDetails?.tokenDetails?.address}\n                      />\n                    </div>\n                  </>\n                )\n              }\n              </div>\n              <div className={styles.poolDetailTier}>\n                <Tiers\n                  hideStatistics\n                  showMoreInfomation={true}\n                  tiersBuyLimit={poolDetails?.buyLimit || [] }\n                  tokenSymbol={`${poolDetails?.purchasableCurrency?.toUpperCase()}`}\n                  verifiedEmail={verifiedEmail}\n                  userTier={currentUserTier?.level || 0}\n                />\n                <p className={styles.poolDetailMaxBuy}>\n                  {/* *Max bought: {numberWithCommas(userBuyLimit.toString())} {poolDetails?.purchasableCurrency?.toUpperCase()} */}\n                  {userTiersAnnotationText}\n                </p>\n                <div className={styles.poolDetailProgress}>\n                  <p className={styles.poolDetailProgressTitle}>Swap Progress</p>\n                  {isWidthUp('sm', props.width) && <div className={styles.poolDetailProgressStat}>\n                    <span className={styles.poolDetailProgressPercent}>\n                      {numberWithCommas(new BigNumber(soldProgress).gt(99) ? '100': soldProgress)}%\n                    </span>\n                    <span>\n                      {\n                        numberWithCommas(new BigNumber(tokenSold).gt(`${poolDetails?.amount}`) ? `${poolDetails?.amount}`: tokenSold)}&nbsp;\n                        / {numberWithCommas(`${poolDetails?.amount}` || \"0\")\n                      }\n                    </span>\n                  </div>}\n                  {isWidthDown('xs', props.width) && <div className={styles.poolDetailProgressStat}>\n                    <span className={styles.poolDetailProgressPercent}>\n                      {parseFloat(soldProgress).toFixed(2)}%\n                    </span>\n                    <span>\n                      {\n                        numberWithCommas(new BigNumber(tokenSold).gt(`${poolDetails?.amount}`) ? `${poolDetails?.amount}`: tokenSold)}&nbsp;\n                        / {numberWithCommas(`${poolDetails?.amount}` || \"0\")\n                      }\n                    </span>\n                  </div>}\n                  <div className={styles.progress}>\n                    <div className={styles.achieved} style={{ width: `${new BigNumber(soldProgress).gt(100) ? '100': soldProgress}%` }}></div>\n                  </div>\n                </div>\n                <div className={styles.poolDetailStartTime}>\n                  {\n                    display ? (\n                      <>\n                        <span className={styles.poolDetailStartTimeTitle}>{display}</span>\n                        <Countdown startDate={countDownDate} />\n                      </>\n                    ): (\n                      <p\n                        style={{\n                          color: '#D01F36',\n                          marginTop: 40,\n                          font: 'normal normal bold 14px/18px DM Sans'\n                        }}>\n                        <PoolIsEndMessage\n                          poolDetails={poolDetails}\n                        />\n                      </p>\n                    )\n                  }\n                </div>\n              </div>\n            </div>\n            <div className={styles.poolDetailBuy}>\n              <nav className={styles.poolDetailBuyNav}>\n                <ul className={styles.poolDetailLinks}>\n                  {\n                    headers.map((header) => {\n                      if (header === HeaderType.Main\n                        && endBuyTimeInDate && new Date() > endBuyTimeInDate\n                      ) {\n                        return;\n                      }\n\n                      if (\n                        header !== HeaderType.About &&\n                        header !== HeaderType.MyTier &&\n                        header !== HeaderType.Participants &&\n                        (!poolDetails?.isDeployed || endBuyTimeInDate && endBuyTimeInDate < new Date())\n                      ) {\n                        return;\n                      }\n\n                      return <li\n                        className={`${styles.poolDetailLink} ${activeNav === header ? `${styles.poolDetailLinkActive}`: ''}`}\n                        onClick={() => setActiveNav(header)}\n                        key={header}\n                      >\n                        {header}\n                      </li>\n                    })\n                  }\n                </ul>\n              </nav>\n              <div className={styles.poolDetailBuyForm}>\n                {\n                  activeNav === HeaderType.Main\n                  && endBuyTimeInDate && new Date() <= endBuyTimeInDate\n                  && (\n                      <BuyTokenForm\n                        disableAllButton={disableAllButton}\n                        existedWinner={existedWinner}\n                        alreadyJoinPool={alreadyJoinPool}\n                        joinPoolSuccess={joinPoolSuccess}\n                        tokenDetails={poolDetails?.tokenDetails}\n                        networkAvailable={poolDetails?.networkAvailable || ''}\n                        rate={poolDetails?.ethRate}\n                        poolAddress={poolDetails?.poolAddress}\n                        maximumBuy={userBuyLimit}\n                        minimumBuy={userBuyMinimum}\n                        poolAmount={poolDetails?.amount}\n                        purchasableCurrency={poolDetails?.purchasableCurrency?.toUpperCase()}\n                        poolId={poolDetails?.id}\n                        joinTime={joinTimeInDate}\n                        method={poolDetails?.method}\n                        availablePurchase={availablePurchase}\n                        ableToFetchFromBlockchain={ableToFetchFromBlockchain}\n                        minTier={poolDetails?.minTier}\n                        isDeployed={poolDetails?.isDeployed}\n                        startBuyTimeInDate={startBuyTimeInDate}\n                        endBuyTimeInDate={endBuyTimeInDate}\n                        endJoinTimeInDate={endJoinTimeInDate}\n                        tokenSold={tokenSold}\n                        setBuyTokenSuccess={setBuyTokenSuccess}\n                        isClaimable={poolDetails?.type === 'claimable'}\n                        currentUserTier={currentUserTier}\n                      />\n                   )\n                }\n                {\n                  activeNav === HeaderType.About && (\n                     <PoolAbout\n                       website={poolDetails?.website}\n                       exchangeRate={poolDetailsMapping && poolDetailsMapping[PoolDetailKey.exchangeRate].display}\n                       description={poolDetails?.description}\n                     />\n                  )\n                }\n                {\n                  activeNav === HeaderType.Participants && (\n                    <LotteryWinners\n                      poolId={poolDetails?.id}\n                      userWinLottery={existedWinner ? true: false}\n                      maximumBuy={userBuyLimit}\n                      purchasableCurrency={poolDetails?.purchasableCurrency.toUpperCase()}\n                      verifiedEmail={verifiedEmail ? true: false}\n                    />\n                   )\n                }\n                {\n                  activeNav === HeaderType.MyTier &&\n                    <MyTier\n                      tiers={poolDetails?.tiersWithDetails}\n                      poolDetails={poolDetails}\n                    />\n                }\n                {\n                  poolDetails?.type === POOL_TYPE.CLAIMABLE && (\n                    <ClaimToken\n                      releaseTime={poolDetails?.releaseTime ? releaseTimeInDate : undefined}\n                      ableToFetchFromBlockchain={ableToFetchFromBlockchain}\n                      poolAddress={poolDetails?.poolAddress}\n                      tokenDetails={poolDetails?.tokenDetails}\n                      buyTokenSuccess={buyTokenSuccess}\n                      poolId={poolDetails?.id}\n                      disableAllButton={disableAllButton}\n                      poolDetails={poolDetails}\n                    />\n                 )\n                }\n              </div>\n            </div>\n          </main>\n        </>\n      )\n    }\n  }\n\n  return (\n    <DefaultLayout>\n      <div className={styles.poolDetailContainer}>\n        {render()}\n     </div>\n    </DefaultLayout>\n  )\n}\n\nexport default withWidth()(BuyToken);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ChangePassword/index.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/NetworkChange/index.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Landing/index.tsx",["1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115"],"import React, { useRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport _ from 'lodash';\nimport useStyles from './style';\nimport commonStyles from '../../styles/CommonStyle'\nimport { LandingCard } from './Card';\nimport LandingLayout from '../../components/Layout/LandingLayout'\nimport withWidth, { isWidthUp, isWidthDown } from '@material-ui/core/withWidth';\n//@ts-ignore\nimport { Fade, LightSpeed } from 'react-reveal';\nimport ModalContent from './ModalContent';\n\nconst cardImage = '/images/icons/card-image.jpg';\nconst arrowRightIcon = '/images/icons/arrow-right.svg';\nconst background = '/images/icons/background2.svg';\nconst landingBackground2 = '/images/landing/landing-bg2.svg'\nconst landingBackground = '/images/landing/landing-bg.svg'\nconst landingBackgroundXs = '/images/landing/landing-bg-xs.svg'\n\nconst Dashboard = (props: any) => {\n  const styles = useStyles();\n  const common = commonStyles();\n  const [showModal, setShowModal] = useState(false);\n\n  const cardsInfo = [{\n    image: '/images/landing/image1.svg',\n    title: 'Multi-chain, flexible options',\n    description: 'Red Kite supports both Ethereum and BSC pools, and are testing Polkadot pools on PolkaFoundry testnet to become the first launchpad on Polkadot, with flexible pool types and whitelist conditions.',\n    backgroundColor: 'linear-gradient(180deg, rgba(147, 19, 51, 0.69) 0%, #060B26 50%)'\n  },\n  {\n    image: '/images/landing/image2.svg',\n    title: 'Hand-picked projects',\n    description: 'We hand-pick projects cautiously, scrutinize and verify the project team’s origin and legitimacy, innovation of idea, and their capacity to execute their vision.',\n    backgroundColor: 'linear-gradient(180deg, #234650 0%, #060B26 50%)'\n  },\n  {\n    image: '/images/landing/image6.svg',\n    title: 'Tier and Reputation',\n    description: \"Our bot system automatically monitors participants' behavior to set reputation points for each partcicipants based on their actions. Reputation will affect a participant's tier and their ability to participate in next launches.\",\n    backgroundColor: 'linear-gradient(180deg, #50A3CF 0%, #060B26 50%)'\n  },\n  {\n    image: '/images/landing/image3.svg',\n    title: 'Fairness',\n    description: \"We understand that opportunities should be delivered fairly and efficiently. Red Kite's lane-based swap system ensures everybody has a chance to join accordingly based on their tier without having to resort to gas war.\",\n    backgroundColor: 'linear-gradient(180deg, #50307D 0%, #060B26 50%)'\n  },\n  {\n    image: '/images/landing/image4.svg',\n    title: 'Integrated Vesting Schedule',\n    description: 'Red Kite goes with a Distribution Portal for projects to vest their sold tokens. This feature can also be used for pre-sale or post-sale secondary offerings.',\n    backgroundColor: 'linear-gradient(180deg, #274F89 0%, #060B26 43.95%)'\n  },\n  {\n    image: '/images/landing/image5.svg',\n    title: 'Parachain Crowdloan',\n    description: 'Kusama and Polkadot parachain auctions are around the corner. Red Kite supports crowdloan campaigns for projects to collect KSM and DOT tokens effectively for winning the auction.',\n    backgroundColor: 'linear-gradient(180deg, #5C274F 0%, #060B26 43.33%)'\n  }]\n\n  return (\n    <LandingLayout>\n      <div className={styles.container + ' ' + styles.animation} style={{minHeight: '550px'}}>\n        {isWidthUp('sm', props.width) && <img src={landingBackground} alt=\"\"/>}\n        {isWidthDown('xs', props.width) && <img src={landingBackgroundXs} alt=\"\"/>}\n        <div className=\"main-content\">\n          {isWidthUp('sm', props.width) && <div className=\"title\">\n            <Fade left>\n              <h1 className={common.nnb1214d}>Soar with Red Kite</h1>\n            </Fade>\n          </div>}\n          {isWidthDown('xs', props.width) && <div className=\"title\">\n            <h1 className={common.nnb1214d}>Soar with <br/>Red Kite</h1>\n          </div>}\n          <Fade right>\n            <div className=\"description\">\n            <p className={common.nnb1824d}>Launch hand-picked projects and help them shine.<br/>Hold $PKF to participate.</p>\n            </div>\n          </Fade>\n          <Fade bottom>\n            <div className=\"buttons\">\n              <a href=\"#/dashboard\">\n                <button className={common.nnb1418d}>View all projects</button>\n              </a>\n              <a href=\"https://t.me/PolkaFoundryANN\" target=\"_blank\">\n                <button className={common.nnb1418d + ' btn'}>\n                Subscribe to upcoming projects&nbsp;&nbsp;\n                <img src={arrowRightIcon}/>\n                </button>\n              </a>\n            </div>\n          </Fade>\n        </div>\n      </div>\n      <div className={styles.cardContainer}>\n        <h2 className={common.nnb2832d}>Unparalleled Features</h2>\n        <div className=\"main-content\">\n          <Fade>\n            {cardsInfo.map((cardInfo, index) => {\n              return <LandingCard key={index} cardInfo={cardInfo} />\n            })}\n          </Fade>\n        </div>\n      </div>\n        <div className={styles.container}>\n          <img src={landingBackground2} alt=\"\" className=\"bg2\"/>\n          <div className=\"main-content\">\n            <LightSpeed delay={1500} left>\n              <div className=\"title\">\n                {isWidthUp('sm', props.width) && <h2 className={common.nnb1214d}>The first IDO will start in the first half of May,<br/>subscribe to PolkaFoundry Telegram for updates</h2>}\n                {isWidthDown('xs', props.width) && <h2 className={common.nnb1214d}>Get Alerts For <br/>New Pools</h2>}\n                {/* {isWidthDown('xs', props.width) && <h2 className={common.nnb1214d}>Get Alerts For New Pools</h2>} */}\n              </div>\n              <div className=\"description\">\n                {isWidthDown('xs', props.width) && <p className={common.nnn1424h} style={{opacity: 0.7, margin: '19px 0 -23px 0'}}>Subscribe to get notified about new pools and other relevant events.</p>}\n              </div>\n              <div className=\"buttons\">\n                <a href=\"https://t.me/PolkaFoundryANN\" target=\"_blank\">\n                  <button className={common.nnb1418d + ' btn'}>\n                    Subscribe to upcoming projects&nbsp;&nbsp;\n                    <img src={arrowRightIcon}/>\n                  </button>\n                </a>\n              </div>\n            </LightSpeed>\n          </div>\n        </div>\n      {showModal && <ModalContent setShowModal={setShowModal}/>}\n    </LandingLayout>\n  );\n};\n\nexport default withWidth()(withRouter(Dashboard));\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Pools/index.tsx",["1116","1117","1118","1119","1120","1121","1122","1123","1124","1125"],"import {useEffect, useState} from 'react';\nimport {useSelector} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {debounce} from 'lodash';\nimport DefaultLayout from '../../components/Layout/DefaultLayout';\nimport useStyles from './style';\nimport useCommonStyle from '../../styles/CommonStyle';\nimport {convertFromWei, getContractInstance, getContractInstanceWeb3, getPoolContract} from '../../services/web3';\nimport POOL_ABI from '../../abi/Pool.json';\nimport Pool from './Pool';\nimport withWidth, {isWidthDown, isWidthUp} from '@material-ui/core/withWidth';\nimport useFetch from '../../hooks/useFetch';\nimport useAuth from '../../hooks/useAuth';\n\nimport Pagination from '@material-ui/lab/Pagination';\nimport {getPoolStatusByPoolDetail} from \"../../utils/getPoolStatusByPoolDetail\";\nimport {NETWORK_AVAILABLE, NFT_PLUS_AMOUNT_PRODUCTION} from \"../../constants\";\nimport BigNumber from 'bignumber.js';\nimport {getProgressWithPools} from \"../../utils/campaign\";\n\nconst iconSearch = 'images/icons/search.svg';\n\nconst Pools = (props: any) => {\n  const styles = useStyles();\n  const commonStyle = useCommonStyle();\n  const { data: appChain } = useSelector((state: any) => state.appNetwork);\n  const { data: connector } = useSelector((state: any) => state.connector);\n\n  const [tabActive, setTabActive] = useState(1);\n  const [input, setInput] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(1);\n  const [pools, setPools] = useState([]);\n\n  const { connectedAccount } = useAuth();\n\n  const getPoolsPrefixUri = () => {\n    let uri = '/pools'\n    if (tabActive === 1) {\n      return uri;\n    }\n\n    if (tabActive === 2) {\n      return `${uri}/top-pools`;\n    }\n\n    if (tabActive === 3) {\n      return `${uri}/user/${connectedAccount}/joined-pools`;\n    }\n  }\n\n  const { data: poolsList, loading: loadingGetPool } = useFetch<any>(\n    `${getPoolsPrefixUri()}?page=${currentPage}&limit=10&title=${input}`\n  );\n\n  console.log('poolsList: ', poolsList);\n\n  const handleInputChange = debounce((e: any) => {\n    Promise.resolve().then(() => {\n      setInput(e.target.value);\n      setCurrentPage(1);\n    });\n  }, 500);\n\n  // const getTokenSold = async (pool: any) => {\n  //   let result = '0';\n  //   try {\n  //     const networkAvailable = pool.network_available || pool.networkAvailable;\n  //     const poolHash = pool.campaign_hash || pool.campaignHash;\n  //     const contract = getPoolContract({ networkAvailable, poolHash });\n  //     if (contract) {\n  //       result = await contract.methods.tokenSold().call();\n  //       result = convertFromWei(result.toString());\n  //     }\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  //   return result;\n  // }\n\n  useEffect(() => {\n    const manipulatePoolsData = async () => {\n      setTotalPage(poolsList.lastPage);\n      setCurrentPage(poolsList.page);\n\n      let listData = poolsList.data;\n      let poolWithStatus = [];\n      for (let i = 0; i < listData.length; i++) {\n        const pool = listData[i];\n        const status = await getPoolStatusByPoolDetail(pool, 0);\n        console.log('Pool STATUS:', status);\n\n        poolWithStatus.push({\n          ...pool,\n          status,\n        });\n      }\n\n      poolsList.data = poolWithStatus;\n      listData = poolWithStatus;\n\n      // if(!appChain || !connector) return;\n\n      // await Promise.all(listData.map(async (pool: any) => {\n      //   if (pool.is_deploy === 0) return;\n      //   const tokenSold = await getTokenSold(pool);\n      //   pool.tokenSold = tokenSold;\n      // }));\n\n      setPools(listData);\n    };\n\n    poolsList && poolsList.data && manipulatePoolsData();\n  }, [poolsList, appChain, connector]);\n\n  const handleChangeTab = (tab: number) => {\n    setTabActive(tab);\n  }\n\n  return (\n    <DefaultLayout>\n      <div className={styles.poolsContainer}>\n        <div className={styles.tabs}>\n          <span\n            className={styles.btnTab + (tabActive === 1 ? ' active ' : ' ') + commonStyle.nnb1418d}\n            onClick={() => handleChangeTab(1)}\n          >All Pools</span>\n          <span\n            className={styles.btnTab + (tabActive === 2 ? ' active ' : ' ') + commonStyle.nnb1418d}\n            onClick={() => handleChangeTab(2)}\n          >Top Pools</span>\n          <span\n            className={styles.btnTab + (tabActive === 3 ? ' active ' : ' ') + commonStyle.nnb1418d}\n            onClick={() => handleChangeTab(3)}\n          >Pools Joined</span>\n        </div>\n        <div className={styles.tabContent}>\n          <h2>List Pools</h2>\n          <div className={styles.searchGroup}>\n            <input\n              type=\"text\"\n              placeholder=\"Search by Pool name\"\n              className={commonStyle.nnn1424h}\n              onChange={handleInputChange}\n            />\n            <img src={iconSearch}/>\n          </div>\n          <table style={{ width: '100%' }} className={styles.listPools}>\n            <thead className={styles.poolsHead}>\n              {isWidthUp('md', props.width) && <tr>\n                <th style={{minWidth: '240px', width: '24%'}}>Pool Name</th>\n                <th style={{minWidth: '120px', width: '12%'}}>Ratio</th>\n                <th style={{minWidth: '120px', width: '12%'}}>Access</th>\n                <th style={{minWidth: '400px', width: '40%'}}>Progress</th>\n                <th style={{minWidth: '120px', width: '12%'}}>Status</th>\n              </tr>}\n              {isWidthDown('sm', props.width) && <tr>\n                <th style={{minWidth: '150px', width: '50%'}}>Pool Name</th>\n                <th style={{minWidth: '90px', width: '30%'}}>Progress</th>\n                <th style={{minWidth: '60px', width: '20%'}}>Status</th>\n              </tr>}\n            </thead>\n            <tbody className={styles.poolsBody + (pools.length <= 0 ? ' loading' : '')}>\n              {pools.length > 0 && pools.map((pool: any, index: number) => {\n                return <tr key={index}><Pool pool={pool}/></tr>\n              })}\n              {/* {pools.length <= 0 && <tr className=\"loading\"><td><CircularProgress size={80} /></td></tr>} */}\n            </tbody>\n            <tfoot>\n            </tfoot>\n          </table>\n          <div className={styles.pagination}>\n            {\n              totalPage > 1 && <Pagination\n                count={totalPage}\n                color=\"primary\"\n                style={{ marginTop: 30 }} className={styles.pagination}\n                onChange={(e: any, value: any) => {\n                  if (!loadingGetPool) {\n                    setCurrentPage(value)\n                  }\n                }}\n                page={currentPage}\n              />\n            }\n          </div>\n        </div>\n      </div>\n    </DefaultLayout>\n  );\n};\n\nexport default withWidth()(withRouter(Pools));\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/PrivacyPolicy/index.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ConfirmEmail/index.tsx",["1126"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { CircularProgress } from '@material-ui/core';\nimport { withRouter, useParams } from 'react-router-dom';\n\nimport { alertFailure, alertSuccess } from '../../store/actions/alert';\nimport { BaseRequest } from '../../request/Request';\nimport useStyles from './style';\nimport { apiRoute } from \"../../utils\";\nimport DefaultLayout from '../../components/Layout/DefaultLayout';\nimport { Link } from 'react-router-dom';\n\nconst logo = '/images/logo-red-kite.svg'\n\nconst ConfirmEmail: React.FC<any> = (props: any) => {\n  const styles = useStyles();\n  const dispatch = useDispatch();\n\n  const [confirmEmailLoading, setConfirmEmailLoading] = useState(false);\n  const [verifySuccess, setVerifySuccess] = useState(false);\n\n  const { token } = useParams() as any;\n\n  useEffect(() => {\n    const confirmEmail = async () => {\n      setConfirmEmailLoading(true);\n\n      if (token) {\n        const baseRequest = new BaseRequest();\n\n        const response = await baseRequest.get(apiRoute(`/confirm-email/${token}`)) as any;\n        const resObj = await response.json();\n\n        if (resObj.status && resObj.status === 200) {\n          dispatch(alertSuccess('Email address confirmed'));\n          setVerifySuccess(true)\n        } else {\n          dispatch(alertFailure(resObj.message));\n          setVerifySuccess(false)\n        }\n      }\n\n      setConfirmEmailLoading(false);\n    }\n\n    confirmEmail();\n  }, []);\n\n  return (\n    <DefaultLayout>\n      {confirmEmailLoading && <div className={styles.contentLoading}>\n        <div style={{ textAlign: 'center' }}>\n          <CircularProgress size={80} />\n          <p style={{ marginTop: 10, fontSize: 17, fontWeight: 600 }}>\n            Email Confirmation Processing ...\n          </p>\n        </div>\n      </div>}\n      {!confirmEmailLoading && verifySuccess && <div className={styles.confirmEmail}>\n        <img src={logo} alt=\"\"/>\n        <h2>Email address confirmed</h2>\n        <p>You have successfully updated your email address. Please use your new email address to log in.</p>\n        <Link to=\"/account\">Return</Link>\n      </div>}\n      {!confirmEmailLoading && !verifySuccess && <div className={styles.confirmEmail}>\n        <img src={logo} alt=\"\"/>\n        <h2>Email address verify failure</h2>\n        <p>Active account link has expried.</p>\n        <Link to=\"/account\">Return</Link>\n      </div>}\n    </DefaultLayout>\n  )\n};\n\nexport default withRouter(ConfirmEmail);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Dashboard/index.tsx",["1127","1128","1129","1130","1131","1132","1133","1134","1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158"],"import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport DefaultLayout from '../../components/Layout/DefaultLayout';\nimport useStyles from './style';\nimport Card from './Card';\nimport usePools from '../../hooks/usePools';\nimport {BUY_TYPE, POOL_TYPE} from '../../constants';\nimport {convertFromWei, getPoolContract} from '../../services/web3';\nimport {getPoolStatusByPoolDetail} from \"../../utils/getPoolStatusByPoolDetail\";\nimport {PoolStatus} from \"../../utils/getPoolStatus\";\n\nconst arrowRightIcon = '/images/icons/arrow-right.svg';\nconst background = '/images/icons/background2.svg';\n\nconst Dashboard = (props: any) => {\n  const styles = useStyles();\n  const dispatch = useDispatch();\n  let { pools = [], pagination, loading } = usePools();\n  const [upcomingPools, setUpcomingPools] = useState([]);\n  const [featurePools, setFeaturePools] = useState([]);\n  const { data: appChain } = useSelector((state: any) => state.appNetwork);\n  const { data: connector } = useSelector((state: any) => state.connector);\n  const [poolFetched, setPoolFetched] = useState(false);\n\n  const getTokenSold = async (pool: any) => {\n    let result = '0';\n    try {\n      // const contract = getContractInstance(POOL_ABI, pool.campaign_hash || '', connector, appChain.appChainID);\n      // if (contract) {\n      //   result = await contract.methods.tokenSold().call();\n      //   result = convertFromWei(result.toString());\n      // }\n      const networkAvailable = pool.network_available || pool.networkAvailable;\n      const poolHash = pool.campaign_hash || pool.campaignHash;\n      const contract = getPoolContract({ networkAvailable, poolHash });\n      if (contract) {\n        result = await contract.methods.tokenSold().call();\n        result = convertFromWei(result.toString());\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    return result;\n  }\n\n  const checkBuyTime = (pool: any) => {\n    return !pool.start_time || !pool.finish_time\n  }\n\n  const checkJoinTime = (pool: any) => {\n    return !pool.start_join_pool_time || !pool.end_join_pool_time\n  }\n\n  const checkTBA = (pool: any) => {\n    return pool.pool_type == POOL_TYPE.SWAP && pool.buy_type == BUY_TYPE.FCFS && checkBuyTime(pool)\n    || pool.pool_type == POOL_TYPE.SWAP && pool.buy_type == BUY_TYPE.WHITELIST_LOTTERY && (checkBuyTime(pool) || checkJoinTime(pool))\n    || pool.pool_type == POOL_TYPE.CLAIMABLE && pool.buy_type == BUY_TYPE.FCFS && (checkBuyTime(pool) || !pool.release_time)\n    || pool.pool_type == POOL_TYPE.CLAIMABLE && pool.buy_type == BUY_TYPE.WHITELIST_LOTTERY && (checkBuyTime(pool) || checkJoinTime(pool) || !pool.release_time)\n  };\n\n  const setStatusPools = async () => {\n    for (let i = 0; i < pools.length; i++) {\n      const pool: any = pools[i];\n      const status = await getPoolStatusByPoolDetail(pool, 0);\n      console.log('Status Pool:', status);\n      pool.status = status;\n    }\n    // pools.forEach(async (pool: any) => {\n    //   const status = await getPoolStatusByPoolDetail(pool, 0);\n    //   console.log('Status Pool:', status);\n    //   pool.status = status;\n    // });\n    setUpcomingPools(pools.filter((pool: any) => pool?.status != PoolStatus.Claimable && pool?.status != PoolStatus.Closed && pool?.is_display == 1))\n    setFeaturePools(pools.filter((pool: any) => (pool?.status == PoolStatus.Claimable || pool?.status == PoolStatus.Closed) && pool?.is_display == 1))\n  };\n\n  useEffect(() => {\n    if(pools.length == 0 || poolFetched) return;\n    setStatusPools();\n    setPoolFetched(true);\n  }, [pools]);\n\n  useEffect(() => {\n    if(!appChain) return\n    pools.forEach(async (pool: any) => {\n      if(pool.is_deploy === 0) return\n      const tokenSold = await getTokenSold(pool)\n      pool.tokenSold = tokenSold\n    })\n  },[appChain, connector, pools])\n\n  return (\n    <DefaultLayout>\n      {/* <BackgroundComponent/> */}\n      <div className={styles.listPools}>\n        <h2>Upcoming Pools</h2>\n        <div className=\"pools\">\n          {upcomingPools.map((pool: any, index) => {\n            return index < 8 && <Card pool={pool} key={pool.id} autoFetch={true} />\n          })}\n        </div>\n        {/*<button className=\"btn\" onClick={() => window.open('https://t.me/PolkaFoundryANN', '_blank')}>*/}\n        {/*  Get Notified&nbsp;*/}\n        {/*  <img src={arrowRightIcon}/>*/}\n        {/*</button>*/}\n        <button className=\"btn\" onClick={() => props.history.push('/pools')}>\n          View all Pools&nbsp;\n          <img src={arrowRightIcon}/>\n        </button>\n      </div>\n      <div className={styles.listPools} style={{marginTop: '220px'}}>\n        <h2>Featured Pools</h2>\n        <div className=\"pools\">\n          {featurePools.map((pool: any, index) => {\n            return index < 8 && <Card pool={pool} key={pool.id} autoFetch={false} />\n          })}\n        </div>\n        {/*<a href=\"https://t.me/PolkaFoundryANN\" target=\"_blank\" className=\"btn\" style={{width: '170px'}}>*/}\n        {/*  View all Pools&nbsp;*/}\n        {/*  <img src={arrowRightIcon}/>*/}\n        {/*</a>*/}\n        <button className=\"btn\" onClick={() => props.history.push('/pools')}>\n          View all Pools&nbsp;\n          <img src={arrowRightIcon}/>\n        </button>\n      </div>\n      <div className={styles.getAlert}>\n        <img src={background}/>\n        <div className=\"content\">\n          <h2>Get Alerts For New Pools</h2>\n          <p>Subscribe to get notified about new pools and other relevant events.</p>\n          <button className=\"btn\" onClick={() => window.open('https://t.me/PolkaFoundryANN', '_blank')}>\n            Subscribe to upcoming pools&nbsp;\n            <img src={arrowRightIcon}/>\n          </button>\n        </div>\n      </div>\n    </DefaultLayout>\n  );\n};\n\nexport default withRouter(Dashboard);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/NotFoundPage/index.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Terms/index.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/index.tsx",["1159","1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178"],"import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport _ from 'lodash';\nimport { getBalance } from '../../store/actions/balance';\nimport { getTiers, getUserTier, getUserInfo, getRates } from '../../store/actions/sota-tiers';\nimport { getAllowance } from '../../store/actions/sota-token';\nimport Tiers from './Tiers';\nimport DefaultLayout from '../../components/Layout/DefaultLayout';\nimport AccountInformation from './AccountInformation';\nimport ManageTier from './ManageTier';\nimport useStyles from './style';\nimport useAuth from '../../hooks/useAuth';\nimport useTokenDetails from '../../hooks/useTokenDetails';\nimport useFetch from '../../hooks/useFetch';\nimport TierInfomation from './TierInfomation';\nimport { CONVERSION_RATE, USER_STATUS } from '../../constants';\nimport RedKite from '../../abi/RedKiteTiers.json';\nimport { getContractInstance, SmartContractMethod } from '../../services/web3';\nimport BigNumber from 'bignumber.js'\nimport useUserTier from '../../hooks/useUserTier';\n\nconst TOKEN_ADDRESS = process.env.REACT_APP_PKF || '';\nconst TOKEN_UNI_ADDRESS = process.env.REACT_APP_UNI_LP || '';\nconst TOKEN_MANTRA_ADDRESS = process.env.REACT_APP_MANTRA_LP || '';\n\nconst iconWarning = \"/images/icons/warning.svg\";\nconst iconClose = \"/images/icons/close.svg\";\n\nconst AccountV2 = (props: any) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const { data: balance = {} } = useSelector((state: any) => state.balance);\n  const { data: userInfo = {} } = useSelector((state: any) => state.userInfo);\n  const { isAuth, connectedAccount, wrongChain } = useAuth();\n  const [isLoading, setIsLoading] = useState(true);\n  const { tokenDetails: tokenPKFDetails } = useTokenDetails(TOKEN_ADDRESS, 'eth');\n  const { tokenDetails: tokenUniLPDetails } = useTokenDetails(TOKEN_UNI_ADDRESS, 'eth');\n  const { tokenDetails: tokenMantraLPDetails } = useTokenDetails(TOKEN_MANTRA_ADDRESS, 'eth');\n  const { data: data = {}, loading, error } = useFetch<any>(`/user/profile?wallet_address=${connectedAccount}`);\n  const [emailVerified, setEmailVeryfied] = useState(0);\n  const [email, setEmail] = useState<string>('');\n  const [isKYC, setIsKYC] = useState(false);\n  const [showAlertVerifyEmail, setShowAlertVerifyEmail] = useState(true);\n  const [listTokenDetails, setListTokenDetails] = useState([]) as any;\n  const { data: appChainID } = useSelector((state: any) => state.appNetwork)\n  const [rates, setRates] = useState([]) as any;\n  const { currentTier, totalStaked, totalUnstaked, total } = useUserTier(connectedAccount || '', 'eth')\n\n  useEffect(() => {\n    if (isAuth && connectedAccount && !wrongChain) {\n      dispatch(getBalance(connectedAccount));\n      dispatch(getUserTier(connectedAccount));\n      dispatch(getAllowance(connectedAccount));\n    }\n  }, [isAuth, wrongChain, connectedAccount]);\n\n  useEffect(() => {\n    setEmail('')\n    setEmailVeryfied(USER_STATUS.UNVERIFIED)\n    setIsKYC(false)\n  }, [connectedAccount]);\n\n  useEffect(() => {\n    setListTokenDetails([tokenPKFDetails, tokenUniLPDetails, tokenMantraLPDetails]);\n  }, [tokenPKFDetails, tokenUniLPDetails, tokenMantraLPDetails]);\n\n  useEffect(() => {\n    if(data && data.user && data.user) {\n      setEmail(data.user.email)\n      setEmailVeryfied(data.user.status)\n      setIsKYC(data.user.is_kyc == 1 ? true : false)\n    } else {\n      setEmail('')\n      setEmailVeryfied(USER_STATUS.UNVERIFIED)\n      setIsKYC(false)\n    }\n  }, [data]);\n\n  useEffect(() => {\n    dispatch(getRates(CONVERSION_RATE));\n  }, [appChainID])\n\n  return (\n    <DefaultLayout>\n      {emailVerified == USER_STATUS.UNVERIFIED && !loading && showAlertVerifyEmail && connectedAccount && <div className={classes.alertVerifyEmail}>\n        &nbsp;&nbsp;<img src={iconWarning}/>\n        <img src={iconClose} className=\"btn-close\" onClick={() => setShowAlertVerifyEmail(false)}/>\n        &nbsp;&nbsp;\n        {!email && <span>Your account has not been verified. To verify your account, please click on Verify Email button.</span>}\n        {email && <span>Please go to the mail to verify your account.</span>}\n      </div>}\n      <div className={classes.accountContainer}>\n        <div className={classes.mainContent}>\n          <div className={classes.leftPanel}>\n            <AccountInformation\n              classNamePrefix=\"account-infomation\"\n              balance={balance}\n              userInfo={userInfo}\n              tokenPKFDetails={tokenPKFDetails}\n              email={email}\n              emailVerified={emailVerified}\n              setEmail={setEmail}\n              setEmailVeryfied={setEmailVeryfied}\n              isKYC={isKYC}\n              kycStatus={data?.user?.is_kyc}\n              userTier={currentTier}\n            ></AccountInformation>\n            <Tiers\n              showMoreInfomation={false}\n              tokenSymbol={tokenPKFDetails?.symbol}\n              userTier={currentTier}\n              total={total}\n            />\n            <TierInfomation/>\n          </div>\n          <div className={classes.rightPanel}>\n            <ManageTier\n              listTokenDetails={listTokenDetails}\n              emailVerified={emailVerified}\n              totalUnstaked={totalUnstaked}\n              total={total}\n            />\n          </div>\n        </div>\n      </div>\n    </DefaultLayout>\n  );\n};\n\nexport default withRouter(AccountV2);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/wallet.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useTypedSelector.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/usePrevious.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/services/web3.ts",["1179","1180","1181"],"import Web3 from 'web3';\nimport WalletLink from \"walletlink\";\nimport { connectorNames, ConnectorNames, connectorsByName } from '../constants/connectors';\nimport { ETH_CHAIN_ID } from '../constants/network';\nimport {NETWORK_AVAILABLE} from \"../constants\";\n\nconst POOL_ABI = require('../abi/Pool.json');\n\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL || \"\";\nconst BSC_NETWORK_URL = process.env.REACT_APP_BSC_RPC_URL || \"\";\nexport const MAX_INT = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n\nexport enum SmartContractMethod {\n  Write = \"Write\",\n  Read = \"Read\"\n}\n\ntype smartContractMethod = Extract<SmartContractMethod, SmartContractMethod.Write | SmartContractMethod.Read>\n\nexport const getWeb3Instance = () => {\n  const windowObj = window as any;\n  const { ethereum, web3 } = windowObj;\n  if (ethereum && ethereum.isMetaMask) {\n    return new Web3(ethereum);\n  }\n  if (web3) {\n    return new Web3(web3.currentProvider);\n  }\n  return null;\n};\n\nexport const isMetaMaskInstalled = () => {\n  const windowObj = window as any;\n  const { ethereum } = windowObj;\n  return ethereum && ethereum.isMetaMask;\n};\n\n\nexport const getProviderByNetwork = (\n  networkName: connectorNames,\n  appChainID: string,\n  typeMethod: smartContractMethod,\n  forceUsingEther: boolean\n) => {\n  if (forceUsingEther) {\n      return new Web3.providers.HttpProvider(NETWORK_URL);\n  }\n\n  if (appChainID && typeMethod === SmartContractMethod.Read) {\n      return new Web3.providers.HttpProvider(appChainID === ETH_CHAIN_ID ? NETWORK_URL: BSC_NETWORK_URL);\n  }\n\n  const provider = (connectorsByName[networkName as connectorNames] as any);\n  return provider;\n}\n\nexport const getContractInstance =\n  (ABIContract: any,\n   contractAddress: string,\n   networkName: connectorNames = ConnectorNames.MetaMask,\n   appChainID: string = ETH_CHAIN_ID as string,\n   typeMethod: smartContractMethod = SmartContractMethod.Read,\n   forceUsingEther: boolean = false\n  ) => {\n  const provider = getProviderByNetwork(networkName as connectorNames, appChainID, typeMethod, forceUsingEther);\n\n  if (provider) {\n    const web3Instance = new Web3(provider);\n\n    return new web3Instance.eth.Contract(\n      ABIContract,\n      contractAddress,\n    );\n  }\n\n  return;\n};\n\nexport const getContractInstanceWeb3 = (isEth = true) => {\n  let provider = new Web3.providers.HttpProvider(NETWORK_URL);\n  if (!isEth) {\n    provider = new Web3.providers.HttpProvider(BSC_NETWORK_URL);\n  }\n  let web3Instance = new Web3(provider);\n  return web3Instance;\n};\n\nexport const getPoolContract = ({ networkAvailable, poolHash }: any) => {\n  if (networkAvailable == NETWORK_AVAILABLE.BSC) {\n    const web3Instance = getContractInstanceWeb3(false);\n    return new web3Instance.eth.Contract(POOL_ABI, poolHash);\n  } else if (networkAvailable == NETWORK_AVAILABLE.ETH) {\n    const web3Instance = getContractInstanceWeb3(true);\n    return new web3Instance.eth.Contract(POOL_ABI, poolHash);\n  } else {\n    return null;\n  }\n};\n\nexport const getContractInstanceWithEthereum = (ABIContract: any, contractAddress: string) => {\n  const windowObj = window as any;\n  const { ethereum } = windowObj;\n  if (ethereum && ethereum.isMetaMask) {\n    const web3Instance = new Web3(ethereum);\n    return new web3Instance.eth.Contract(ABIContract, contractAddress);\n  } else if (windowObj.web3) {\n    const web3Instance = new Web3(windowObj.web3.currentProvider);\n    return new web3Instance.eth.Contract(ABIContract, contractAddress);\n  } else {\n    return null;\n  }\n};\n\nexport const getContractInstanceWithBSC = (ABIContract: any, contractAddress: string) => {\n  const windowObj = window as any;\n  const { ethereum } = windowObj;\n  const web3Instance = new Web3(ethereum);\n  return new web3Instance.eth.Contract(ABIContract, contractAddress);\n};\n\nexport const convertFromWei = (value: any, unit = 'ether') => {\n  return Web3.utils.fromWei(value);\n};\n\nexport const convertToWei = (value: any, unit = 'ether') => {\n  // const webInstance = getWeb3Instance();\n  // // @ts-ignore\n  // return webInstance.utils.toWei(value, unit);\n  return Web3.utils.toWei(value);\n};\n\nexport const isValidAddress = (address: string) => {\n  return Web3.utils.isAddress(address);\n}\n\nexport const getETHBalance = async (loginUser: string) => {\n  const web3 = getWeb3Instance() as any;\n  if (web3) {\n    const balance = await web3.eth.getBalance(loginUser);\n\n    return web3.utils.fromWei(balance);\n  };\n\n  return 0;\n}\n\nexport const convertToBN = (number: string) => {\n  return Web3.utils.toBN(number)\n}\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/setupNetwork.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/getAccountBalance.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/convertDate.ts",["1182","1183"],"import moment from 'moment'\nimport momentTimezone from 'moment-timezone';\nimport {DATETIME_FORMAT} from \"../constants\";\n\nexport const convertTimeToStringFormat = (date: Date) => {\n  const timezone = momentTimezone.tz(date, moment.tz.guess());\n  return timezone.format(\"h:mm A, DD MMMM YYYY ([GMT]Z)\");\n}\n\nexport const convertTimeToStringFormatWithoutGMT = (date: Date) => {\n  const timezone = momentTimezone.tz(date, moment.tz.guess());\n  return timezone.format(\"h:mm A, DD MMMM YYYY\");\n}\n\nexport const convertUnixTimeToDateTime = (time: number, formatType = 2) => {\n  let type;\n  if (formatType == 1) {\n    type = \"h:mm A, DD MMMM YYYY ([GMT]Z)\";\n  } else if (formatType == 2) {\n    type = \"hh:mm:ss A MM/DD/yyyy [GMT]ZZ\";\n  }\n  return moment.unix(time).format(type);\n}\n\nexport const convertDateTimeToUnix = (time: any): string => {\n  if (!time) return \"\";\n  const unixTime = moment(time).format(\"x\");\n  return moment(time).format('x').substring(0, unixTime.length - 3);\n}\n\nexport const buildMomentTimezone = (datetime: any): any => {\n  if (!datetime) return '';\n\n  // const momentTimezoneObject = moment(datetime).local();\n  const momentTimezoneObject = moment(moment.utc(datetime)).local();\n  return momentTimezoneObject;\n}\n\nexport const convertDateLocalWithTimezone = (datetime: any): string => {\n  if (!datetime) return '';\n  const date = buildMomentTimezone(datetime).format(\"hh:mm:ss A\");\n  return date;\n}\n\nexport const convertTimeLocalWithTimezone = (datetime: any): string => {\n  if (!datetime) return '';\n  const time = buildMomentTimezone(datetime).format(\"MM/DD/YYYY\");\n  return time;\n}\n\nexport const convertDateTimeStringToMomentObject = (datetime: string) => {\n  // Convert datetime from \"2021-05-28 08:45:59\" to Moment Object\n  return moment(datetime, DATETIME_FORMAT);\n};\n\nexport const convertMomentObjectToDateTimeString = (datetime: any) => {\n  // Convert datetime from Moment Object to String \"2021-05-28 08:45:59\"\n  return moment(datetime).format(DATETIME_FORMAT);\n};\n\nexport const unixTimeNow = () => {\n  return parseInt((Date.now() / 1000) + '')\n};\n\nexport const unixTime = (time: any) => {\n  return moment(time).unix();\n};\n\nexport const timeAgo = (time: any) => {\n  return moment(time).fromNow()\n};\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ComingSoon/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/constants/network.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/network/getAppNetworkName.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/constants/connectors.ts",["1184","1185"],"import {BscConnector} from '@binance-chain/bsc-connector'\nimport {URI_AVAILABLE, WalletConnectConnector} from '@web3-react/walletconnect-connector'\nimport {WalletLinkConnector} from '@web3-react/walletlink-connector'\nimport {InjectedConnector} from '@web3-react/injected-connector'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport {FortmaticConnector} from '../connectors/Fortmatic';\nimport {BSC_CHAIN_ID, ETH_CHAIN_ID, NETWORK_BSC_URL} from './network';\n\nimport {FORMATIC_KEY, NETWORK_URL, APP_NETWORKS_NAME } from './network';\n\nconst METAMASK_DEEPLINK = process.env.REACT_APP_METAMASK_DEEPLINK;\nconsole.log('METAMASK_DEEPLINK', METAMASK_DEEPLINK);\nconsole.log('FORMATIC_KEY, NETWORK_URL, APP_NETWORKS_NAME', FORMATIC_KEY, NETWORK_URL, APP_NETWORKS_NAME);\n\nexport const bscConnector = new BscConnector({}) as any;\nexport const injected = new InjectedConnector({});\n\nconst originalChainIdChangeHandler = bscConnector.handleChainChanged;\n\n//@ts-ignore\nbscConnector.handleChainChanged = (chainId: string) => {\n  const chainIdNum = Number(chainId);\n  console.debug(\"Handling 'chainChanged' event with payload\", chainId, isNaN(chainIdNum));\n  if (isNaN(chainIdNum)) {\n    bscConnector.emitError('NaN ChainId');\n    return;\n  }\n  //@ts-ignore\n  originalChainIdChangeHandler(chainId)\n};\n\n// mainnet only\nexport const walletLinkConnect = new WalletLinkConnector({\n  url: process.env.REACT_APP_NETWORK_URL || '',\n  appName: 'Red Kite',\n  appLogoUrl: 'https://redkite.polkafoundry.com/images/logo-red-kite.svg',\n  darkMode: true,\n  // supportedChainIds: [1,4,5],\n});\n\n// mainnet only\nexport const walletConnect = new WalletConnectConnector({\n  rpc: {[Number(ETH_CHAIN_ID)]: NETWORK_URL as string},\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 10000\n});\n\nexport const walletConnectBsc = new WalletConnectConnector({\n  // rpc: { 56: 'https://bsc-dataseed.binance.org/' },\n  rpc: { [Number(BSC_CHAIN_ID)]: 'https://bsc-dataseed.binance.org/' },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 10000\n});\n\n\n// mainnet only\nexport const fortmatic = new FortmaticConnector({\n  apiKey: FORMATIC_KEY ?? '',\n  chainId: 1\n})\n\nexport interface WalletInfo {\n  connector?: AbstractConnector\n  name: string\n  // iconName: string\n  description: string\n  href: string | null\n  // color: string\n  primary?: true\n  mobile?: true\n  mobileOnly?: true,\n  disableIcon: string;\n  icon: string ;\n  deepLink?: string;\n}\n\nexport enum ConnectorNames {\n  MetaMask = \"MetaMask\",\n  BSC = \"BSC Wallet\",\n  WalletConnect = \"WalletConnect\",\n  WalletConnectBsc = \"WalletConnect\",\n  WalletLinkConnect = \"Coinbase Wallet\",\n  Fortmatic = 'Fortmatic'\n}\n\nexport type connectorNames = Extract<ConnectorNames, ConnectorNames.MetaMask | ConnectorNames.BSC | ConnectorNames.WalletConnect | ConnectorNames.WalletLinkConnect | ConnectorNames.Fortmatic>;\n\nexport const SUPPORTED_WALLETS: { [key: string]: WalletInfo } = {\n  METAMASK: {\n    connector: injected,\n    name: ConnectorNames.MetaMask,\n    icon: '/images/metamask.svg',\n    disableIcon: '/images/metamask-disabled.svg',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    mobile: true,\n    deepLink: METAMASK_DEEPLINK\n  },\n  WALLET_CONNECT: {\n    connector: walletConnect,\n    name: ConnectorNames.WalletConnect,\n    icon: '/images/WalletConnect.svg',\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n    disableIcon: '/images/wallet-connect-disabled.svg',\n    href: null,\n    mobile: true\n  },\n  BSC_WALLET: {\n    connector: bscConnector,\n    name: ConnectorNames.BSC,\n    icon: '/images/injected-binance.svg',\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n    disableIcon: '/images/injected-binance-disabled.svg',\n    href: null,\n  },\n  WALLET_LINK: {\n    connector: walletLinkConnect,\n    name: ConnectorNames.WalletLinkConnect,\n    icon: '/images/wallet-link/wallet-link.svg',\n    description: 'Connect to Coinbase Wallet and more...',\n    disableIcon: '/images/wallet-link/wallet-link-disabled.svg',\n    href: null,\n    mobile: true,\n  },\n  // FORTMATIC: {\n  //   connector: fortmatic,\n  //   name: ConnectorNames.Fortmatic,\n  //   icon: '/images/fortmatic.svg',\n  //   description: 'Login using Fortmatic hosted wallet',\n  //   disableIcon: '/images/fortmatic-disabled.svg',\n  //   href: null,\n  //   mobile: true\n  // },\n};\n\nexport const SUPPORTED_WALLETS_BSC: { [key: string]: WalletInfo } = {\n  METAMASK: SUPPORTED_WALLETS.METAMASK,\n  BSC_WALLET: SUPPORTED_WALLETS.BSC_WALLET,\n  WALLET_CONNECT: {\n    connector: walletConnectBsc,\n    name: ConnectorNames.WalletConnect,\n    icon: '/images/WalletConnect.svg',\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n    disableIcon: '/images/wallet-connect-disabled.svg',\n    href: null,\n  },\n}\n\n\nexport const connectorsByName: { [key in ConnectorNames]: AbstractConnector } = {\n  [ConnectorNames.MetaMask]: injected,\n  [ConnectorNames.BSC]: bscConnector,\n  [ConnectorNames.Fortmatic]: fortmatic,\n  [ConnectorNames.WalletConnect]: walletConnect,\n  [ConnectorNames.WalletConnectBsc]: walletConnectBsc,\n  [ConnectorNames.WalletLinkConnect]: walletLinkConnect,\n}\n\nexport const connectorsSupportByNetwork: {[key: string]: { [key:string]: WalletInfo }  } = {\n  [APP_NETWORKS_NAME.METAMASK]: SUPPORTED_WALLETS,\n  [APP_NETWORKS_NAME.BSC]: SUPPORTED_WALLETS_BSC,\n};\n\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/request/Request.ts",["1186"],"import configureStore from '../store/configureStore';\nimport { logout } from '../store/actions/user';\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\n// const version = 9;\n// console.log('Version: ', version);\n\nexport class BaseRequest {\n  static getInstance() {\n    return new this\n  }\n\n  getSignatureMessage(isInvestor: boolean = false) {\n    const msgSignature = MESSAGE_INVESTOR_SIGNATURE;\n    return msgSignature;\n  }\n\n  getHeader(isInvestor: boolean = false) {\n    const token = !isInvestor ? localStorage.getItem('access_token'): localStorage.getItem('investor_access_token');\n\n    return {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      Authorization: 'Bearer ' + token,\n      msgSignature: this.getSignatureMessage(isInvestor),\n    }\n  }\n\n  buildUrl(url: string) {\n    // remove both leading and trailing a slash\n    url = url.replace(/^\\/+|\\/+$/g, '')\n    return `${this.getUrlPrefix()}/${url}`\n  }\n\n  getUrlPrefix() {\n    const BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://06a6fd781d2a.ngrok.io\";\n    return BASE_URL;\n  }\n\n  async post(url: string, data: object, isInvestor: boolean = false) {\n    let resObj: Response;\n\n    try {\n      return fetch(this.buildUrl(url), {\n        method: \"POST\",\n        headers: this.getHeader(isInvestor),\n        body: JSON.stringify(data)\n      })\n      .then(response => {\n        resObj = response.clone();\n        return response.json();\n      })\n      .then(data => {\n        if (data.status && data.status === 401) {\n          if (data.message === 'Token Expired') {\n            configureStore().store.dispatch(logout(isInvestor));\n          }\n        }\n\n        return resObj;\n      });\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async postImage(url: string, data: FormData ) {\n    try {\n      return (fetch(this.buildUrl(url), {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n        },\n        body: data\n      }));\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async put(url: string, data: object) {\n    try {\n      return this._responseHandler(fetch(this.buildUrl(url), {\n        method: \"PUT\",\n        headers: this.getHeader(),\n        body: JSON.stringify(data)\n      }));\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async patch(url: string, data: object) {\n    try {\n      return this._responseHandler(fetch(this.buildUrl(url), {\n        method: \"PATH\",\n        headers: this.getHeader(),\n        body: JSON.stringify(data)\n      })).catch((e: any) => console.log(e.message));\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async get(url: string, isInvestor: boolean = false) {\n    let resObj: Response;\n\n    try {\n      return fetch(this.buildUrl(url), {\n        method: \"GET\",\n        headers: this.getHeader(),\n      })\n      .then(response => {\n        resObj = response.clone();\n        return response.json();\n      })\n      .then(data => {\n        if (data.status && data.status === 401 && data.message === 'Token Expired') {\n          configureStore().store.dispatch(logout(isInvestor));\n        }\n\n        return resObj;\n      });\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async delete(url: string,  data: object) {\n    try {\n      return this._responseHandler(fetch(this.buildUrl(url), {\n        method: \"DELETE\",\n        headers: this.getHeader(),\n        body: JSON.stringify(data)\n      }));\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async _responseHandler(response = {}) {\n    return response;\n  }\n}\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ComingSoon/CountDownCounter.tsx",["1187","1188"],"import React, {useEffect, useState} from 'react';\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport useStyles from './style';\nimport moment from \"moment\";\nimport {unixTimeNow} from \"../../utils/convertDate\";\n\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst daySeconds = 86400;\n\nconst timerProps = {\n  isPlaying: true,\n  size: 150,\n  strokeWidth: 8,\n  // trailColor: '#FFCC00',\n  trailColor: 'white',\n};\n\nconst getTimeSeconds = (time: any) => (minuteSeconds - time) | 0;\nconst getTimeMinutes = (time: any) => ((time % hourSeconds) / minuteSeconds) | 0;\nconst getTimeHours = (time: any) => ((time % daySeconds) / hourSeconds) | 0;\nconst getTimeDays = (time: any) => (time / daySeconds) | 0;\n\nconst CountDownCounter = (props: any) => {\n  const styles = useStyles();\n  const renderTime = (dimension: any, time: any) => {\n    return (\n      <div className={styles.timeWrapper}>\n        <div className={styles.timeText}>{time < 10 ? '0' + time : time}</div>\n        <div className={styles.timeDimension}>{dimension}</div>\n      </div>\n    );\n  };\n\n  const startTime = unixTimeNow(); // use UNIX timestamp in seconds\n  const countdown = moment(props.countdown || new Date());\n  let endTime = countdown.unix(); // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - startTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n\n  // @ts-ignore\n  return (\n    <div className={styles.timers}>\n      <CountdownCircleTimer\n        {...timerProps}\n        // colors={[[\"#7E2E84\"]]}\n        // colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\n        colors={'#FFCC00'}\n        duration={daysDuration}\n        initialRemainingTime={remainingTime}\n      >\n        {({ elapsedTime }) => {\n          return renderTime(\"days\", getTimeDays(daysDuration - (elapsedTime || 0)))\n        }}\n      </CountdownCircleTimer>\n\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={'#FFCC00'}\n        duration={daySeconds}\n        initialRemainingTime={remainingTime % daySeconds}\n        onComplete={(totalElapsedTime) => {\n          return [\n            remainingTime - totalElapsedTime > hourSeconds,\n            0\n          ]\n        }}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"hours\", getTimeHours(daySeconds - (elapsedTime || 0)))\n        }\n      </CountdownCircleTimer>\n\n\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={'#FFCC00'}\n        duration={hourSeconds}\n        initialRemainingTime={remainingTime % hourSeconds}\n        onComplete={(totalElapsedTime) => [\n          remainingTime - totalElapsedTime > minuteSeconds,\n          0\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"minutes\", getTimeMinutes(hourSeconds - (elapsedTime || 0)))\n        }\n      </CountdownCircleTimer>\n\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={'#FFCC00'}\n        duration={minuteSeconds}\n        initialRemainingTime={remainingTime % minuteSeconds}\n        onComplete={(totalElapsedTime) => [\n          remainingTime - totalElapsedTime > 0,\n          0\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"seconds\", getTimeSeconds(elapsedTime))\n        }\n      </CountdownCircleTimer>\n    </div>\n\n  );\n};\n\nexport default CountDownCounter;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/Logo.tsx",["1189"],"import React from 'react';\nimport useStyles from './style_dark';\nimport TextTitle from \"./TextTitle\";\n\nconst byTokenLogo = '/images/logo-red-kite.svg';\n\nconst Logo = (props: any) => {\n  const classes = useStyles();\n\n  return (\n    <div className={`${classes.buyToken}__logo`}>\n      <img src={byTokenLogo} alt=\"logo\" />\n      {/* <TextTitle>\n        Sotatek Starter Launchpad\n      </TextTitle> */}\n    </div>\n  );\n}\n\nexport default Logo;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/TextTitle.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/TextSubTitle.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/InvestorLayout.tsx",["1190"],"import React from 'react';\nimport useStyles from './style_dark';\nimport Logo from \"./Logo\";\nimport BackgroundComponent from './BackgroundComponent'\n\nconst InvestorLayout = (props: any) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.buyToken}>\n      <div className={`${classes.buyToken}__wrapper`}>\n        <div className={`${classes.buyToken}__loading`}>\n          <BackgroundComponent>{props.children}</BackgroundComponent>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default InvestorLayout;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/message.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/sota-tiers.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/sota-token.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/index.ts",["1191","1192","1193","1194","1195"],"import BigNumber from 'bignumber.js';\nimport _ from 'lodash';\nimport {ADMIN_URL_PREFIX, API_URL_PREFIX, ETHERSCAN_BASE_URL, IMAGE_URL_PREFIX, NETWORK_AVAILABLE} from \"../constants\";\nimport axios from \"axios\";\n\n\nexport function formatPrecisionAmount(amount: any, precision: number = 18): string {\n  const rawValue = new BigNumber(`${amount}`).toFixed(precision);\n  return (amount && parseFloat(amount) !== Infinity) ? new BigNumber(rawValue).toFormat() : '0';\n}\n\nexport const routeWithPrefix = (prefix = ADMIN_URL_PREFIX, url = '') => {\n  const truncateUrl = _.trim(url, '/');\n  return `/${prefix}/${truncateUrl}`;\n};\n\nexport const adminRoute = (url = '') => {\n  const truncateUrl = _.trim(url, '/');\n  const resUrl = `/${ADMIN_URL_PREFIX}/${truncateUrl}`;\n  return resUrl;\n};\n\nexport const publicRoute = (url = '') => {\n  const truncateUrl = _.trim(url, '/');\n  const resUrl = `/${truncateUrl}`;\n  return resUrl;\n};\n\nexport const checkIsAdminRoute = (pathname: string) => {\n  return (pathname.indexOf(`/${ADMIN_URL_PREFIX}`) !== -1) || (pathname === '/dashboard/login');\n};\n\nexport const checkIsLoginRoute = (pathname: string) => {\n  return pathname.indexOf(`/login`) !== -1;\n};\n\nexport const checkIsInvestorRoute = (pathname: string) => {\n  return (pathname.indexOf(`/buy-token`) !== -1) ||  (pathname === '/login');\n};\n\nexport const apiRoute = (url = '') => {\n  const truncateUrl = _.trim(url, '/');\n  const resUrl = `/${API_URL_PREFIX}/${truncateUrl}`;\n  return resUrl;\n};\n\nexport const imageRoute = (url = '') => {\n  const truncateUrl = _.trim(url, '/');\n  const resUrl = `${process.env.REACT_APP_API_BASE_URL || ''}/${IMAGE_URL_PREFIX}/${truncateUrl}`;\n  return resUrl;\n};\n\nexport const etherscanRoute = (address = '', poolDetail: any = null) => {\n  let network = '';\n  if (poolDetail) {\n    if (poolDetail.network_available === NETWORK_AVAILABLE.BSC) {\n      network = process.env.REACT_APP_BSC_NETWORK_ID + '';\n    } else {\n      network = process.env.REACT_APP_NETWORK_ID + '';\n    }\n  }\n\n  const networkId = network || localStorage.getItem('NETWORK_ID') || process.env.REACT_APP_NETWORK_ID || '1';\n  const baseUrl = ETHERSCAN_BASE_URL[networkId];\n  const truncateUrl = _.trim(address, '/');\n  const resUrl = `${baseUrl}/${truncateUrl}`;\n  return resUrl;\n};\n\nexport const etherscanAddressRoute = (address = '', poolDetail: any = null) => {\n  return etherscanRoute(`address/${address}`, poolDetail);\n};\n\nexport const etherscanTransactionRoute = (address = '', poolDetail: any = null) => {\n  return etherscanRoute(`tx/${address}`, poolDetail);\n};\n\nexport const getTransactionRowType = (transaction: any) => {\n  if (transaction?.type === 'Refund') {\n    return 'Refund';\n  }\n  if (transaction?.type === 'TokenClaimed') {\n    return 'Claim';\n  }\n  return 'Buy';\n};\n\nexport const getETHPrices = async () => {\n  // To use:\n  // useEffect(() => {\n  //   getPrices().then((resPrices: any) => {\n  //     setPrices(resPrices);\n  //   });\n  // }, []);\n\n  return await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd')\n    .then(function (response) {\n      let resData = JSON.parse(JSON.stringify(response));\n      resData = (resData && resData.data) || {};\n      return (resData && resData.ethereum && resData.ethereum.usd) || 0;\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n};\n\nexport const fixGasLimit = (type = 'deposit') => {\n  let overrides = {};\n  if (process.env.NODE_ENV !== 'production') {\n    if (type == 'deposit') {\n      overrides = {\n        gasLimit: 200000,\n        gasPrice: 10000000000,\n      };\n    } else if (type == 'approve') {\n      overrides = {\n        gasLimit: 500000,\n        gasPrice: 50000000000,\n      };\n    } else if (type == 'claim') {\n      overrides = {\n        gasLimit: 200000,\n        gasPrice: 10000000000,\n      };\n    } else if (type == 'buy') {\n      overrides = {\n        gasLimit: 500000,\n        gasPrice: 10000000000,\n      };\n    }\n  }\n\n  return overrides;\n};\n\nexport const fixGasLimitWithProvider = (library: any, type = 'deposit') => {\n  let overrides = {};\n  return overrides;\n\n  const provider = (library?.provider as any);\n  if (provider?.isWalletLink) {\n    overrides = fixGasLimit(type);\n    console.log('Provider is WalletLink:', provider);\n    console.log('Gas Limit: ', overrides);\n  }\n\n  return overrides;\n};\n\nexport const checkIsWalletLink = (library: any) => {\n  const provider = (library?.provider as any);\n  if (provider?.isWalletLink) {\n    console.log('Provider is WalletLink:', provider);\n  }\n  return !!provider?.isWalletLink;\n};\n\nexport const disconnectWalletLink = (library: any) => {\n  const provider = (library?.provider as any);\n  provider?.close && provider?.close();\n};\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/wallet.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/constants.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useUserTier.ts",["1196","1197","1198","1199"],"import { useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport MANTRA_ABI from '../abi/mantraUnstake.json';\nimport { getContractInstance, SmartContractMethod } from '../services/web3';\nimport _ from 'lodash';\nimport { BigNumber } from 'bignumber.js';\nimport useTokenDetails from './useTokenDetails';\n\nconst SPKF_ADDRESS = process.env.REACT_APP_MANTRA_LP || 'undefined';\n\nexport type UserTier = {\n  currentTier: number;\n  totalStaked: string;\n  totalUnstaked: string;\n  total: string\n}\n\nconst useUserTier = (address: string, networkAvailable: string): UserTier => {\n  const [ currentUserTier, setCurrentUserTier ] = useState<number>(0);\n  const { data: userInfo, loading: userInfoLoading } = useSelector((state: any) => state.userInfo);\n  const { appChainID } = useSelector((state: any) => state.appNetwork).data;\n  const connector  = useTypedSelector(state => state.connector).data;\n  const [ loading, setLoading] = useState<boolean>(true);\n  const { data: tiers, loading: tiersLoading } = useSelector((state: any) => state.tiers);\n  const { tokenDetails, loading: tokenDetailsLoading } = useTokenDetails(SPKF_ADDRESS, 'eth');\n  const [ totalUnstaked, setTotalUnstaked ] = useState<string>('0');\n  const [ total, setTotal ] = useState<string>('0');\n\n\n  const calculateUserTier = (totalStaked: BigNumber) => {\n    let currentTier = 0;\n    for(let i = 0; i < tiers.length; i++) {\n      const tier = new BigNumber(tiers[i])\n      if(tier.lte(totalStaked)) {\n        currentTier = i + 1\n      }\n    }\n    setCurrentUserTier(currentTier);\n  }\n\n  useEffect(() => {\n    (!userInfoLoading && !tiersLoading && userInfo.totalStaked && tokenDetails) ? setLoading(false) : setLoading(true);\n  }, [userInfoLoading, userInfo, tokenDetailsLoading, tokenDetails]);\n\n  useEffect(() => {\n    const getTotalUnstaked = async () => {\n      if(SPKF_ADDRESS && address) {\n        try {\n          const contract = getContractInstance(\n            MANTRA_ABI,\n            SPKF_ADDRESS,\n            connector,\n            appChainID,\n            SmartContractMethod.Read,\n            networkAvailable === 'eth'\n          );\n          const totalUnstakedResult = await contract?.methods.getUnstake(address).call();\n          const totalUnstaked = 0;// (new BigNumber(totalUnstakedResult.amount)).div(new BigNumber(10**(tokenDetails?.decimals || 0)))\n          const totalStaked = new BigNumber(userInfo.totalStaked);\n          let balance = new BigNumber(0); // await contract?.methods.balanceOf(address).call();\n          balance = (new BigNumber(balance).div(Math.pow(10, 18)))\n          console.log('getTotalUnstaked balance', totalUnstakedResult, totalUnstaked, balance);\n\n          const total = totalStaked.plus(totalUnstaked).plus(balance);\n          console.log('getTotalUnstaked total', total);\n          setTotalUnstaked(totalUnstaked.toString());\n          setTotal(total.toString());\n          calculateUserTier(total);\n        }catch(e) {\n          console.log('error', e)\n        }\n      }\n    }\n\n    !loading && getTotalUnstaked();\n  }, [loading, userInfo]);\n\n  useEffect(() => {\n    setTotalUnstaked('0')\n    setTotal('0')\n    setCurrentUserTier(0)\n  }, [address, appChainID])\n\n  return  {\n    currentTier: currentUserTier,\n    totalStaked: userInfo.totalStaked,\n    totalUnstaked,\n    total\n  }\n}\n\nexport default useUserTier;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useTokenDetails.ts",["1200","1201"],"import { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ethers } from 'ethers';\n\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { getContractInstance, SmartContractMethod } from '../services/web3';\nimport ERC20_ABI from '../abi/Erc20.json';\n\nexport type TokenType = {\n  decimals: number;\n  symbol: string;\n  name: string;\n  address: string;\n}\n\nconst useTokenDetails = (address: string, networkAvailable: string) => {\n  const [tokenDetails, setTokenDetails] = useState<TokenType | undefined>(undefined);\n  const [tokenDetailsLoading, setTokenDetailsLoading] = useState<boolean>(false);\n\n  const { appChainID }  = useSelector((state: any) => state.appNetwork).data;\n  const connector  = useTypedSelector(state => state.connector).data;\n\n  useEffect(() => {\n    const fetchTokenDetails = async (address: string) => {\n      setTokenDetailsLoading(true);\n\n      const contract = getContractInstance(\n        ERC20_ABI,\n       address,\n       connector,\n       appChainID,\n       SmartContractMethod.Read,\n       networkAvailable === 'eth'\n      );\n\n      if (contract) {\n        const symbolCall = contract.methods.symbol().call();\n        const decimalsCall = contract.methods.decimals().call();\n        const nameCall = contract.methods.name().call();\n\n        const [symbol, decimals, name] = await Promise.all([symbolCall, decimalsCall, nameCall]);\n\n        setTokenDetailsLoading(false);\n        setTokenDetails({\n          symbol,\n          name,\n          decimals: Number(decimals),\n          address\n        });\n      }\n    }\n\n    address && networkAvailable && ethers.utils.isAddress(address) && fetchTokenDetails(address);\n    if(address == 'TBD') {\n      setTokenDetails({\n        symbol: 'TBA',\n        name: 'TBA',\n        decimals: 18,\n        address: 'Token contract not available yet.'\n      });\n    }\n  }, [address, networkAvailable]);\n\n  return {\n    tokenDetails,\n    loading: tokenDetailsLoading\n  }\n}\n\nexport default useTokenDetails;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useFetch.ts",["1202","1203"],"import { useState, useEffect, useCallback } from 'react';\nimport axios from '../services/axios';\n\ntype useFetchReturnType<T> ={\n  loading: boolean;\n  error: string;\n  data: T | undefined\n}\n\nconst useFetch = <T>(uri: string | undefined, suspendRender: any = false, config: any = {}): useFetchReturnType<T> => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [data, setData] = useState<T | undefined>(undefined);\n  const [error, setError] = useState<string>('');\n\n  const fetchDataFromUri = useCallback(async () => {\n    setLoading(true);\n\n    try {\n      const response = await axios.get(uri as string, config) as any;\n      response.data && setData(response?.data?.data);\n\n      setLoading(false);\n    } catch (error: any) {\n      setLoading(false);\n      setError(error.message);\n    }\n  }, [uri]);\n\n  useEffect(() => {\n    uri && !suspendRender && fetchDataFromUri();\n  }, [uri, suspendRender]);\n\n  return {\n    loading, \n    error,\n    data\n  }\n}\n\nexport default useFetch;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useAuth.ts",["1204"],"import { useState, useEffect } from 'react';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { useWeb3React } from '@web3-react/core';\n\ntype ReturnType = {\n  isAuth: boolean,\n  connectedAccount: string | null | undefined;\n  wrongChain: boolean\n}\n\nconst useAuth = (): ReturnType => {\n  const { active, account, chainId }  = useWeb3React();\n  const [isAuth, setIsAuth] = useState(false);\n\n  const walletsInfo = useTypedSelector(state => state.wallet).entities;\n  const connectorName = useTypedSelector(state => state.connector).data;\n  const { appChainID } = useTypedSelector((state: any) => state.appNetwork).data;\n\n  const activeWallet = connectorName ? walletsInfo[connectorName]: \"\";\n  \n  useEffect(() => {\n    if (active && activeWallet) {\n      setIsAuth(true);\n    } else { \n      setIsAuth(false);\n    }\n  }, [active, activeWallet]);\n\n  return { isAuth, connectedAccount: account, wrongChain: appChainID != chainId };\n}\n\nexport default useAuth;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/ErrorBoundary/ErrorBoundary.tsx",["1205","1206"],"import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {adminRoute} from \"../../../utils\";\n\ninterface State {\n  hasError?: boolean;\n}\n\nclass ErrorBoundary extends Component<any, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error: any, errorInfo: React.ErrorInfo) {\n    console.log('ErrorBoundary - Error Info: ' + errorInfo.componentStack);\n    const { history } = this.props;\n    this.setState({ hasError: true });\n    // history.push({ pathname: adminRoute('/error'), state: { hasError: true } });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default withRouter(ErrorBoundary);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/sota-token.ts",["1207"],"import { sotaTokenActions } from '../constants/sota-token';\nimport { AnyAction } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { getContractInstance } from '../../services/web3';\nimport erc20ABI from '../../abi/Erc20.json';\nimport { MAX_INT } from './../../services/web3';\nimport { Web3Provider } from '@ethersproject/providers'\nimport { getContract } from '../../utils/contract';\nimport { alertFailure, alertSuccess } from '../../store/actions/alert';\n\nexport const getAllowance = (owner: string) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n    dispatch({ type: sotaTokenActions.ALLOWANCE_LOADING });\n    try {\n      const pkfContract = getContractInstance(erc20ABI, process.env.REACT_APP_PKF as string);\n      const pkfResult = await pkfContract?.methods.allowance(owner, process.env.REACT_APP_TIERS).call();\n\n      const uniContract = getContractInstance(erc20ABI, process.env.REACT_APP_UNI_LP as string);\n      const uniResult = await uniContract?.methods.allowance(owner, process.env.REACT_APP_TIERS).call();\n\n      const mantraContract = getContractInstance(erc20ABI, process.env.REACT_APP_MANTRA_LP as string);\n      const mantraResult = await mantraContract?.methods.allowance(owner, process.env.REACT_APP_TIERS).call();\n\n      const result = {\n        pkf: pkfResult,\n        uni: uniResult,\n        mantra: mantraResult\n      }\n\n      dispatch({\n        type: sotaTokenActions.ALLOWANCE_SUCCESS,\n        payload: result,\n      });\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTokenActions.ALLOWANCE_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const approve = (address: string | null | undefined, library: Web3Provider, tokenAddress: string) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n    dispatch({ type: sotaTokenActions.APPROVE_LOADING });\n    try {\n      let result = {} as any;\n\n      const contract = getContract(tokenAddress, erc20ABI, library, address || '');\n      result = await contract?.approve(process.env.REACT_APP_TIERS, MAX_INT);\n      dispatch({\n        type: sotaTokenActions.APPROVE_SUCCESS,\n        payload: result,\n      });\n      await result.wait(1);\n      if(result) {\n        dispatch(getAllowance(address || ''));\n      }\n\n    } catch (error) {\n      console.log(error)\n      dispatch(alertFailure(\"Transaction submit failure\"))\n      dispatch({\n        type: sotaTokenActions.APPROVE_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/sota-tiers.ts",["1208","1209","1210"],"import { sotaTiersActions } from '../constants/sota-tiers';\nimport { AnyAction } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { getContractInstance, convertFromWei, convertToWei, SmartContractMethod } from '../../services/web3';\nimport { getContract } from '../../utils/contract';\nimport RedKite from '../../abi/RedKiteTiers.json';\nimport { getBalance } from './balance';\nimport { Web3Provider } from '@ethersproject/providers'\nimport { alertFailure, alertSuccess } from '../../store/actions/alert';\nimport BigNumber from 'bignumber.js';\n\nimport {getAllowance} from './sota-token';\nimport {fixGasLimit, fixGasLimitWithProvider} from \"../../utils\";\n\nexport const resetTiers = () => {\n  return {\n    type: sotaTiersActions.USER_TIER_RESET\n  }\n}\n\nexport const getTiers = (forceUsingEther: string = 'eth') => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.TIERS_LOADING });\n    try {\n      const { appChainID } = getState().appNetwork.data;\n      const connector  = getState().connector.data;\n\n      const contract = getContractInstance(\n        RedKite.abi,\n        process.env.REACT_APP_TIERS as string,\n        connector,\n        appChainID,\n        SmartContractMethod.Read,\n        forceUsingEther === 'eth'\n      );\n\n      let result = await contract?.methods.getTiers().call();\n\n      result = result.filter((e: any) => e != '0')\n      result = result.map((e: any) => {\n        return parseFloat(convertFromWei(e))\n      })\n\n      dispatch({\n        type: sotaTiersActions.TIERS_SUCCESS,\n        payload: result,\n      });\n\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTiersActions.TIERS_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const getUserTier = (address: string, forceUsingEther: string = 'eth') => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.USER_TIER_LOADING });\n    try {\n      const { appChainID } = getState().appNetwork.data;\n      const connector = getState().connector.data;\n      let result = {};\n\n      const contract = getContractInstance(\n        RedKite.abi,\n        process.env.REACT_APP_TIERS as string,\n        connector,\n        appChainID,\n        SmartContractMethod.Read,\n        forceUsingEther === 'eth'\n      );\n\n      result = await contract?.methods.getUserTier(address).call();\n\n      dispatch({\n        type: sotaTiersActions.USER_TIER_SUCCESS,\n        payload: result,\n      });\n\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTiersActions.USER_TIER_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const getUserInfo = (address: string, forceUsingEther: string = 'eth', tokenAddress: string = '') => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.USER_INFO_LOADING });\n    try {\n      const { appChainID } = getState().appNetwork.data;\n      const connector = undefined;\n      const contract = getContractInstance(\n        RedKite.abi,\n        process.env.REACT_APP_TIERS as string,\n        connector,\n        appChainID,\n        SmartContractMethod.Read,\n        forceUsingEther === 'eth'\n      );\n\n      let result = {};\n\n      const resultPkf = await contract?.methods.userInfo(address, process.env.REACT_APP_PKF).call();\n      const stakedPkf = convertFromWei(resultPkf.staked)\n\n      const resultUni = await contract?.methods.userInfo(address, process.env.REACT_APP_UNI_LP).call();\n      const stakedUni = convertFromWei(resultUni.staked)\n\n      const resultMantra = await contract?.methods.userInfo(address, process.env.REACT_APP_MANTRA_LP).call();\n      const stakedMantra = convertFromWei(resultMantra.staked)\n\n      result = {\n        ...result,\n        resultPkf: resultPkf,\n        pkfStaked: stakedPkf,\n        resultUni: resultUni,\n        uniStaked: stakedUni,\n        resultMantra: resultMantra,\n        mantraStaked: stakedMantra,\n      }\n\n      const resultStaked = await contract?.methods.userTotalStaked(address).call();\n      const totalStaked = convertFromWei(resultStaked)\n      // const totalStaked = parseFloat(stakedPkf) + parseFloat(stakedUni) * 150 + parseFloat(stakedMantra as string)\n\n      result = {\n        ...result,\n        totalStaked: totalStaked\n      }\n\n      dispatch({\n        type: sotaTiersActions.USER_INFO_SUCCESS,\n        payload: result,\n      });\n\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTiersActions.USER_INFO_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const deposit = (address: string | null | undefined, amount: string, library: Web3Provider, tokenAddress: string) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.DEPOSIT_LOADING });\n    try {\n      let result = {} as any;\n      const contract = getContract(process.env.REACT_APP_TIERS as string, RedKite.abi, library, address || '');\n\n      // Fake Gas Limit for Wallet Link\n      // let overrides = fixGasLimitWithProvider(library, 'deposit');\n      // result = await contract?.depositERC20(tokenAddress, convertToWei(amount), overrides);\n      result = await contract?.depositERC20(tokenAddress, convertToWei(amount));\n\n      dispatch({\n        type: sotaTiersActions.DEPOSIT_SUCCESS,\n        payload: result,\n      });\n      await result.wait(1);\n      if(result) {\n        dispatch(getBalance(address || ''));\n        dispatch(getAllowance(address || ''));\n        dispatch(getUserTier(address || ''));\n        dispatch(getUserInfo(address || ''));\n      }\n      dispatch(alertSuccess('You have successfully staked.'));\n    } catch (error) {\n      console.log(error)\n      dispatch(alertFailure(\"Transaction submited failure\"))\n\n      dispatch({\n        type: sotaTiersActions.DEPOSIT_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const withdraw = (address: string | null | undefined, amount: string, library: Web3Provider, tokenAddress: string) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.WITHDRAW_LOADING });\n    try {\n      let result = {} as any;\n\n      const contract = getContract(process.env.REACT_APP_TIERS as string, RedKite.abi, library, address || '');\n      result = await contract?.withdrawERC20(tokenAddress, convertToWei(amount));\n\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_SUCCESS,\n        payload: result,\n      });\n\n      await result.wait(1);\n      if(result) {\n        dispatch(getBalance(address || ''));\n        dispatch(getAllowance(address || ''));\n        dispatch(getUserTier(address || ''));\n        dispatch(getUserInfo(address || ''));\n      }\n      dispatch(alertSuccess('You have successfully unstaked.'));\n\n    } catch (error) {\n      console.log(error)\n      dispatch(alertFailure(\"Transaction submit failure\"))\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const getWithdrawFee = (address: string | null | undefined, amount: string) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.WITHDRAW_FEE_LOADING });\n    try {\n      const { appChainID } = getState().appNetwork.data;\n      const connector = getState().connector.data;\n      let data = {};\n      const contract = getContractInstance(RedKite.abi, process.env.REACT_APP_TIERS as string, connector, appChainID);\n\n      data = await contract?.methods.calculateWithdrawFee(address, process.env.REACT_APP_PKF, convertToWei(amount)).call();\n\n      const fee = convertFromWei(data);\n      const feePercent = parseFloat(fee || '0')*100/parseFloat(amount || '0')\n\n      const result = {\n        fee: fee,\n        feePercent: feePercent\n      }\n\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_FEE_SUCCESS,\n        payload: result,\n      });\n\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_FEE_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\n\nexport const getWithdrawPercent = () => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.WITHDRAW_PERCENT_LOADING });\n    try {\n      const { appChainID } = getState().appNetwork.data;\n      const { connector } = getState().connector.data || \"Metamask\";\n      let result = {};\n      let data = [];\n      const contract = getContractInstance(RedKite.abi, process.env.REACT_APP_TIERS as string, connector, appChainID);\n\n     result = await contract?.methods.withdrawFeePercent(0).call();\n      data.push(result)\n      result = await contract?.methods.withdrawFeePercent(1).call();\n      data.push(result)\n      result = await contract?.methods.withdrawFeePercent(2).call();\n      data.push(result)\n      result = await contract?.methods.withdrawFeePercent(3).call();\n      data.push(result)\n      result = await contract?.methods.withdrawFeePercent(4).call();\n      data.push(result)\n      result = await contract?.methods.withdrawFeePercent(5).call();\n      data.push(result)\n\n      result = {\n        ...result,\n        penaltiesPercent: data\n      }\n\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_PERCENT_SUCCESS,\n        payload: result,\n      });\n\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_PERCENT_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const getRates = (tokens: any) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.RATES_LOADING });\n    try {\n      const { appChainID } = getState().appNetwork.data;\n      const { connector } = getState().connector.data || \"Metamask\";\n      const contract = getContractInstance(\n        RedKite.abi,\n        process.env.REACT_APP_TIERS as string,\n        connector,\n        appChainID,\n        SmartContractMethod.Read,\n        true);\n\n      let data = [] as any;\n      for(let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n        const result = await contract?.methods.externalToken(token.address).call();\n        const rate = (new BigNumber(result.rate)).div(new BigNumber(10**result.decimals)).toString();\n        data.push({rate, symbol: token.symbol, name: token.name})\n      }\n      const result = {\n        data: data\n      }\n\n      dispatch({\n        type: sotaTiersActions.RATES_SUCCESS,\n        payload: result,\n      });\n\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTiersActions.RATES_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\n\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/connectors/Fortmatic.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/balance.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Terms/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/Button/index.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/getPoolStatus.ts",["1211"],"import BigNumber from 'bignumber.js';\n\nexport enum PoolStatus {\n  Upcoming = \"Upcoming\",\n  Joining = \"Whitelisting\",\n  Closed = \"Ended\",\n  Filled = \"Filled\",\n  Progress = \"In-progress\",\n  Claimable = \"Claimable\",\n  TBA = \"TBA\"\n}\n\nexport type poolStatus = Extract<\n  PoolStatus,\n  PoolStatus.Progress |\n  PoolStatus.Upcoming |\n  PoolStatus.Joining |\n  PoolStatus.Filled |\n  PoolStatus.Closed |\n  PoolStatus.Claimable |\n  PoolStatus.TBA\n>\n\nexport const getPoolStatus = (\n  startJoinTime: Date | undefined,\n  endJoinTime: Date | undefined,\n  startBuyTime: Date | undefined,\n  endBuyTime: Date | undefined,\n  releaseTime: Date | undefined,\n\n  soldProgress: string | undefined,\n  isClaimable: boolean | undefined,\n  poolType: string | undefined\n): poolStatus => {\n  const today = new Date().getTime();\n\n  const requiredReleaseTime = isClaimable ? !releaseTime: false;\n\n  if ((!startJoinTime || !endJoinTime) && poolType === 'whitelist') {\n    return PoolStatus.TBA;\n  }\n\n  if ((!startBuyTime || !endBuyTime) && poolType === 'fcfs') {\n    return PoolStatus.TBA;\n  }\n\n  if (startJoinTime && today < startJoinTime.getTime()) {\n    return PoolStatus.Upcoming;\n  }\n\n  if (startJoinTime && endJoinTime && today > startJoinTime.getTime() && today < endJoinTime.getTime()) {\n    return PoolStatus.Joining;\n  }\n\n  if (endJoinTime && startBuyTime && today > endJoinTime.getTime() && today < startBuyTime.getTime()) {\n    return PoolStatus.Upcoming;\n  }\n\n  if (\n    startBuyTime\n    && endBuyTime\n    && today > startBuyTime.getTime()\n    && today < endBuyTime.getTime()\n  ) {\n    return new BigNumber(soldProgress || 0).multipliedBy(100).gte(99) ?  PoolStatus.Filled: PoolStatus.Progress;\n  }\n\n  if (releaseTime && today > releaseTime.getTime() && isClaimable) {\n    return PoolStatus.Claimable;\n  }\n\n  if (endBuyTime && today > endBuyTime?.getTime()) {\n    return PoolStatus.Closed;\n  }\n\n  return PoolStatus.Upcoming;\n}\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/getPoolStatusByPoolDetail.ts",["1212"],"import BigNumber from 'bignumber.js';\nimport {PoolStatus} from \"./getPoolStatus\";\nimport {BUY_TYPE, POOL_TYPE} from \"../constants\";\n\nexport const getPoolStatusByPoolDetail = async (\n  // startJoinTime: Date | undefined,\n  // endJoinTime: Date | undefined,\n  // startBuyTime: Date | undefined,\n  // endBuyTime: Date | undefined,\n  // releaseTime: Date | undefined,\n  // soldProgress: string | undefined,\n  // isClaimable: boolean | undefined,\n  // poolType: string | undefined\n  poolDetails: any,\n  tokenSold: any,\n) => {\n  const startBuyTimeField = () => {\n    return poolDetails?.startBuyTime || poolDetails?.start_time;\n  };\n  const endBuyTimeField = () => {\n    return poolDetails?.endBuyTime || poolDetails?.finish_time;\n  };\n  const startJoinTimeField = () => {\n    return poolDetails?.joinTime || poolDetails?.start_join_pool_time;\n  };\n  const endJoinTimeField = () => {\n    return poolDetails?.endJoinTime || poolDetails?.end_join_pool_time;\n  };\n  const releaseTimeField = () => {\n    return poolDetails?.releaseTime || poolDetails?.release_time;\n  };\n  const amountField = () => {\n    return poolDetails?.amount || poolDetails?.total_sold_coin;\n  };\n  const poolTypeField = () => {\n    return poolDetails?.type || poolDetails?.pool_type;\n  };\n  const buyTypeField = () => {\n    return poolDetails?.method || poolDetails?.buy_type;\n  };\n\n  const startBuyTime = startBuyTimeField() ? new Date(Number(startBuyTimeField()) * 1000): undefined;\n  const endBuyTime = endBuyTimeField() ? new Date(Number(endBuyTimeField()) * 1000): undefined;\n  const startJoinTime = startJoinTimeField() ? new Date(Number(startJoinTimeField()) * 1000): undefined;\n  const endJoinTime = endJoinTimeField() ? new Date(Number(endJoinTimeField()) * 1000): undefined;\n  const releaseTime = releaseTimeField() ? new Date(Number(releaseTimeField()) * 1000): undefined;\n  const isClaimable = poolTypeField() !== POOL_TYPE.SWAP;\n  const buyType = buyTypeField();\n\n  const soldProgress = new BigNumber(tokenSold).div(amountField() || 1).toFixed();\n  const today = new Date().getTime();\n  const requiredReleaseTime = isClaimable ? !releaseTime: false;\n\n  if ((!startJoinTime || !endJoinTime) && buyType === BUY_TYPE.WHITELIST_LOTTERY) {\n    return PoolStatus.TBA;\n  }\n\n  if ((!startBuyTime || !endBuyTime) && buyType === BUY_TYPE.FCFS) {\n    return PoolStatus.TBA;\n  }\n\n  if (startJoinTime && today < startJoinTime.getTime()) {\n    return PoolStatus.Upcoming;\n  }\n\n  if (startJoinTime && endJoinTime && today > startJoinTime.getTime() && today < endJoinTime.getTime()) {\n    return PoolStatus.Joining;\n  }\n\n  if (endJoinTime && startBuyTime && today > endJoinTime.getTime() && today < startBuyTime.getTime()) {\n    return PoolStatus.Upcoming;\n  }\n\n  if (\n    startBuyTime\n    && endBuyTime\n    && today > startBuyTime.getTime()\n    && today < endBuyTime.getTime()\n  ) {\n    return new BigNumber(soldProgress || 0).multipliedBy(100).gte(99) ?  PoolStatus.Filled: PoolStatus.Progress;\n  }\n\n  if (releaseTime && today > releaseTime.getTime() && isClaimable) {\n    return PoolStatus.Claimable;\n  }\n\n  if (endBuyTime && today > endBuyTime?.getTime()) {\n    return PoolStatus.Closed;\n  }\n\n  return PoolStatus.Upcoming;\n}\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/style_dark.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/usePools.ts",["1213","1214","1215","1216","1217","1218","1219","1220"],"import { useEffect, useMemo, useState } from 'react';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport useFetch from './useFetch';\nimport useTokenDetails, { TokenType } from './useTokenDetails';\n\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nexport type PoolDetails = {\n  id: number;\n  website: string;\n  amount: number;\n  ethRate: number;\n  method: string;\n  type: string;\n  tokenDetails: TokenType;\n  title: string;\n  buyLimit: number[],\n  connectedAccountBuyLimit: number,\n  poolAddress: string;\n  joinTime: string;\n  endJoinTime: string;\n  startBuyTime: string;\n  endBuyTime: string;\n  releaseTime: string;\n  purchasableCurrency: string;\n  banner: string;\n}\n\nexport type Pools = []\n\nexport type Pagination = {\n  page: any,\n  lastPage: any,\n  perPage: any,\n  total: any\n}\n\nexport type PoolsReturnType ={\n  pools: Pools | [],\n  pagination: Pagination | undefined\n  loading: boolean\n}\n\nconst usePools = (): PoolsReturnType => {\n  const [poolsDone, setPoolsDone] = useState<boolean>(false);\n  const { loading, error, data }  = useFetch<any>(`/pools?limit=100`);\n  const { data: connectedAccountTier } = useTypedSelector(state => state.userTier);\n\n  const pools = useMemo(() => {\n    if (data && !loading && !error && poolsDone)  {\n      const result = data.data.map((p: any) => {\n\n        return {\n          ...p,\n          // token_images: `${BASE_URL}/image/${p.token_images}`,\n          // banner: `${BASE_URL}/image/${p.banner}`,\n          decimals: (p.campaign_hash == null || p.campaign_hash == '' || p.campaign_hash == 'TBD') ? 18 : p.decimals,\n          campaign_hash: (p.campaign_hash == null || p.campaign_hash == '' || p.campaign_hash == 'TBD') ? 'Token contract not available yet.' : p.campaign_hash\n        }\n      })\n      return result\n    }\n\n    return;\n  }, [data, loading, error, poolsDone, connectedAccountTier]);\n\n  const pagination = useMemo(() => {\n    if (data && !loading && !error && poolsDone)  {\n      return {\n        page: data.page,\n        lastPage: data.lastPage,\n        perPage: data.perPage,\n        total: data.total\n      }\n    }\n\n    return;\n  }, [data, loading, error, poolsDone, connectedAccountTier]);\n\n  useEffect(() => {\n    data && setPoolsDone(true)\n  }, [data])\n\n  return  {\n    pools,\n    pagination,\n    loading: !poolsDone\n  }\n}\n\nexport default usePools;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Dashboard/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ConfirmEmail/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/PrivacyPolicy/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/message.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/sota-tiers.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/sota-token.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/services/axios.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/contract.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Layout/DefaultLayout/index.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/balance.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/TierInfomation/index.tsx",["1221","1222","1223","1224","1225","1226","1227","1228","1229"],"import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport { TIERS, CONVERSION_RATE } from '../../../constants';\nimport useStyles from './style';\nimport withWidth, {isWidthDown, isWidthUp} from '@material-ui/core/withWidth';\n\nconst swapIcon = '/images/icons/swap.svg';\n\nconst Tiers = (props: any) => {\n  const styles = useStyles();\n\n  const {data: rates} = useSelector((state: any) => state.rates);\n\n  return (\n    <div className={styles.tierInfomation}>\n      <div className={styles.conversionRate}>\n        <h3 className=\"title\">Conversion Rate</h3>\n        {rates.data && rates.data.map((rate: any) => {\n          return <div className=\"group\" key={rate.symbol}>\n            <span>1 {rate.name}</span>\n            <img src={swapIcon}/>\n            <span>{rate.rate} PKF</span>\n          </div>\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default withWidth()(Tiers);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ManageTier/index.tsx",["1230","1231","1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246"],"import {useEffect, useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport useStyles from './style';\nimport useCommonStyle from '../../../styles/CommonStyle';\nimport { CircularProgress } from '@material-ui/core';\nimport { getWithdrawPercent, getWithdrawFee } from '../../../store/actions/sota-tiers';\nimport ModalDeposit from '../ModalDeposit';\nimport ModalWithdraw from '../ModalWithdraw';\nimport ModalTransaction from '../ModalTransaction';\nimport useAuth from '../../../hooks/useAuth';\nimport { sotaTiersActions } from '../../../store/constants/sota-tiers';\nimport { sotaTokenActions } from '../../../store/constants/sota-token';\n//@ts-ignore\nimport AnimatedNumber from \"animated-number-react\";\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport { timeAgo } from '../../../utils/convertDate';\nimport { USER_STATUS, CONVERSION_RATE } from '../../../constants';\nimport {Dialog, DialogTitle, DialogContent, DialogActions} from '@material-ui/core';\nimport { ETH_CHAIN_ID } from '../../../constants/network';\n\nconst iconClose = '/images/icons/close.svg'\n\nconst ManageTier = (props: any) => {\n  const styles = useStyles();\n  const commonStyles = useCommonStyle();\n  const dispatch = useDispatch()\n\n  const [openModalDeposit, setOpenModalDeposit] = useState(false)\n  const [openModalWithdraw, setOpenModalWithdraw] = useState(false)\n  const [openModalTransactionSubmitting, setOpenModalTransactionSubmitting] = useState(false)\n  const [transactionHashes, setTransactionHashes] = useState([]) as any;\n\n\n  const { data: depositTransaction, error: depositError } = useSelector((state: any) => state.deposit);\n  const { data: approveTransaction, error: approveError } = useSelector((state: any) => state.approve);\n  const { data: withdrawTransaction, error: withdrawError } = useSelector((state: any) => state.withdraw);\n  const { data: userInfo = {} } = useSelector((state: any) => state.userInfo);\n  const { data: balance = {} } = useSelector((state: any) => state.balance);\n  const { connectedAccount, isAuth, wrongChain } = useAuth();\n  const { appChainID } = useSelector((state: any) => state.appNetwork).data\n\n  const {\n    classNamePrefix = '',\n    emailVerified,\n    listTokenDetails,\n    totalUnstaked,\n    total\n  } = props;\n\n  useEffect(() => {\n    dispatch(getWithdrawPercent());\n  }, [])\n\n  useEffect(() => {\n    if(depositTransaction?.hash) {\n      setTransactionHashes([...transactionHashes, {tnx: depositTransaction.hash, isApprove: false}]);\n      setOpenModalTransactionSubmitting(false);\n      dispatch({\n        type: sotaTiersActions.DEPOSIT_SUCCESS,\n        payload: undefined,\n      });\n    }\n    if(depositError.message) setOpenModalTransactionSubmitting(false);\n  }, [depositTransaction, depositError])\n\n  useEffect(() => {\n    if(approveTransaction?.hash) {\n      setTransactionHashes([...transactionHashes, {tnx: approveTransaction.hash, isApprove: true}]);\n      setOpenModalTransactionSubmitting(false);\n      dispatch({\n        type: sotaTokenActions.APPROVE_SUCCESS,\n        payload: undefined,\n      });\n    }\n    if(approveError.message) setOpenModalTransactionSubmitting(false);\n  }, [approveTransaction, approveError])\n\n  useEffect(() => {\n    if(withdrawTransaction?.hash) {\n      setTransactionHashes([...transactionHashes, {tnx: withdrawTransaction.hash, isApprove: false}]);\n      setOpenModalTransactionSubmitting(false);\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_SUCCESS,\n        payload: undefined,\n      });\n    }\n    if(withdrawError.message) setOpenModalTransactionSubmitting(false);\n  }, [withdrawTransaction, withdrawError])\n\n  const renderToken = (symbol: string, balance: any, staked: any) => {\n    return <div className=\"group\">\n      <span>{symbol}</span>\n      {(wrongChain || !isAuth) && <span>0</span>}\n      {!wrongChain && isAuth && <span>{numberWithCommas(balance || 0)}</span>}\n      {(wrongChain || !isAuth) && <span>0</span>}\n      {!wrongChain && isAuth && <span>{numberWithCommas(staked || 0)}</span>}\n    </div>\n  }\n\n  return (\n    <div className={`${classNamePrefix}__component`}>\n      <div className={styles.content}>\n        <div className={styles.manageTier}>\n          <h2 className={styles.title}>Wallet balance</h2>\n        </div>\n        <div className={styles.walletBalance}>\n          <div className={styles.tableHead}>\n            <div className=\"group\">\n              <span>Currency</span>\n              <span>Available Balance</span>\n              <span>Staked</span>\n            </div>\n          </div>\n          <div className={styles.tableBody}>\n            {renderToken('PKF', balance?.pkf, userInfo?.pkfStaked)}\n            {renderToken(CONVERSION_RATE[0]?.symbol, balance?.uni, userInfo?.uniStaked)}\n            {renderToken(CONVERSION_RATE[1]?.symbol, balance?.mantra, userInfo?.mantraStaked)}\n          </div>\n        </div>\n        <div className=\"button-area\">\n          <button\n            className={`btn btn-lock ${(emailVerified == USER_STATUS.UNVERIFIED || wrongChain || !isAuth || ETH_CHAIN_ID !== appChainID) ? 'disabled' : ''}`}\n            onClick={() => {setOpenModalDeposit(true)}}\n            disabled={emailVerified == USER_STATUS.UNVERIFIED || wrongChain || !isAuth || ETH_CHAIN_ID !== appChainID}\n          >\n            Stake\n          </button>\n          <button\n            className={`btn btn-unlock ${(emailVerified == USER_STATUS.UNVERIFIED || wrongChain || !isAuth || ETH_CHAIN_ID !== appChainID) ? 'disabled' : ''}`}\n            onClick={() => {setOpenModalWithdraw(true)}}\n            disabled={emailVerified == USER_STATUS.UNVERIFIED || wrongChain || !isAuth || ETH_CHAIN_ID !== appChainID}\n          >\n            Unstake\n          </button>\n        </div>\n        {ETH_CHAIN_ID !== appChainID && <p className={styles.noteNetwork}>Note: To change tier, please switch to ETH network to do Stake/Unstake</p>}\n        {/* <p className={styles.balance}>\n          {(wrongChain || !isAuth) && <AnimatedNumber\n            value={0}\n            formatValue={numberWithCommas}\n          />}\n          {!wrongChain && isAuth && <AnimatedNumber\n            value={balance.token}\n            formatValue={numberWithCommas}\n          />}\n          &nbsp;{tokenDetails?.symbol}\n        </p> */}\n      </div>\n      <ModalDeposit\n        setOpenModalDeposit={setOpenModalDeposit}\n        setOpenModalTransactionSubmitting={setOpenModalTransactionSubmitting}\n        listTokenDetails={listTokenDetails}\n        open={openModalDeposit}\n        totalStaked={total}\n      />\n      <ModalWithdraw\n        setOpenModalWithdraw={setOpenModalWithdraw}\n        setOpenModalTransactionSubmitting={setOpenModalTransactionSubmitting}\n        listTokenDetails={listTokenDetails}\n        open={openModalWithdraw}\n        totalStaked={total}\n      />\n\n      <Dialog\n        open={openModalTransactionSubmitting}\n        keepMounted\n        onClose={() => setOpenModalTransactionSubmitting(false)}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n        className={commonStyles.loadingTransaction}\n      >\n        <DialogContent className=\"content\">\n          <img src={iconClose} onClick={() => setOpenModalTransactionSubmitting(false)}/>\n          <span className={commonStyles.nnb1824d}>Transaction Submitting</span>\n          <CircularProgress color=\"primary\" />\n        </DialogContent>\n      </Dialog>\n\n      {transactionHashes.length > 0 && <ModalTransaction\n        transactionHashes={transactionHashes}\n        setTransactionHashes={setTransactionHashes}\n        open={transactionHashes.length > 0}\n      />}\n    </div>\n  );\n};\n\nexport default ManageTier;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/AccountInformation/index.tsx",["1247","1248","1249","1250","1251","1252","1253","1254","1255","1256","1257","1258","1259","1260","1261","1262","1263"],"import { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport _ from 'lodash';\nimport useStyles from './style';\nimport useAuth from '../../../hooks/useAuth';\nimport ModalVerifyEmail from '../ModalVerifyEmail';\nimport {isWidthDown, isWidthUp, withWidth} from '@material-ui/core';\nimport { trimMiddlePartAddress } from '../../../utils/accountAddress';\nimport { USER_STATUS, KYC_STATUS } from '../../../constants';\nimport { TIERS } from '../../../constants';\n\nconst AccountInformation = (props: any) => {\n  const styles = useStyles();\n  const { classNamePrefix = '', balance = {}, userInfo = {} } = props;\n  const [openModalVerifyEmail, setOpenModalVerifyEmail] = useState(false);\n  const { isAuth, connectedAccount, wrongChain } = useAuth();\n\n  const handleKYC = () => {\n    window.open('https://verify-with.blockpass.org/?clientId=red_kite_kyc_7a0e6&serviceName=Red%20Kite%20KYC&env=prod', '_blank');\n  }\n  const handleRejectKYC = () => {\n    window.open(process.env.REACT_APP_KYC_RESUBMIT_LINK, '_blank');\n  }\n\n  const {\n    email,\n    setEmail,\n    emailVerified,\n    setEmailVeryfied,\n    isKYC,\n    kycStatus,\n    userTier\n  } = props;\n\n  return (\n    <div className={`${classNamePrefix}__component`} style={{marginBottom: '65px'}}>\n      <h2 className={styles.title}>Account</h2>\n      <div className={styles.mainInfomation}>\n        <div className={styles.inputGroup}>\n          <span>Email</span>\n          {email && emailVerified != USER_STATUS.UNVERIFIED && <span>{email}</span>}\n          {emailVerified == USER_STATUS.UNVERIFIED && <span>Not Available</span>}\n          {(emailVerified == USER_STATUS.UNVERIFIED || !email) && connectedAccount &&\n            <button className=\"verify-email\" onClick={() => setOpenModalVerifyEmail(true)}>\n              Verify Email\n            </button>}\n        </div>\n        <div className={styles.inputGroup}>\n          <span>Your Wallet</span>\n          <span>\n            {isWidthUp('sm', props.width) && connectedAccount}\n            {isWidthDown('xs', props.width) && connectedAccount && trimMiddlePartAddress(connectedAccount || '')}\n          </span>\n        </div>\n        <div className={styles.inputGroup}>\n          <span>Your Tier</span>\n          <span>\n            {(userTier > 0 && connectedAccount) ? TIERS[userTier]?.name : TIERS[0].name}\n          </span>\n        </div>\n        <div className={styles.inputGroup} style={{ marginBottom: 3 }}>\n          <span style={{ display: 'inline-block' }}>KYC for Red Kite</span>\n          {connectedAccount && <>\n            {kycStatus == KYC_STATUS.INCOMPLETE && <span>Unverified</span>}\n            {kycStatus == KYC_STATUS.INCOMPLETE && <button className=\"verify-email\" onClick={handleKYC}>KYC NOW</button>}\n\n            {kycStatus == KYC_STATUS.APPROVED && <span>Verified</span>}\n\n            {kycStatus == KYC_STATUS.RESUBMIT && <span style={{ color: 'red', overflow: 'unset' }}>Rejected</span>}\n            {/*{kycStatus == KYC_STATUS.VERIFY_FAIL && <button style={{color: 'red', borderColor: 'red'}} className=\"verify-email\" onClick={handleRejectKYC}>Re-submit KYC</button>}*/}\n\n            {/*<span>{isKYC ? 'Verified' : 'Unverified'}</span>*/}\n            {/*{!isKYC && <button className=\"verify-email\" onClick={handleKYC}>*/}\n            {/*  KYC NOW*/}\n            {/*</button>}*/}\n          </>}\n        </div>\n        <div className={styles.inputGroup} style={{ marginBottom: 5 }}>\n          <span></span>\n          {connectedAccount && <>\n            <span style={{ color: 'red', display: 'inline-block' }}>\n            {kycStatus == KYC_STATUS.RESUBMIT && 'Please send information to support@polkafoundry.com to resubmit KYC.'}\n            </span>\n          </>}\n\n        </div>\n\n        <div className={styles.redKiteInfo}>\n          {/* <div className={styles.walletInfo}>\n            <p>Wallet balance</p>\n            {!_.isEmpty(balance) && !_.isEmpty(userInfo) && <span>\n              <AnimatedNumber\n                value={(wrongChain || !isAuth) ? 0 : balance.token}\n                formatValue={numberWithCommas}\n              />&nbsp;{tokenDetails?.symbol}\n            </span>}\n            {(_.isEmpty(balance) || _.isEmpty(userInfo)) && <span>\n              0&nbsp;{tokenDetails?.symbol}\n            </span>}\n            <p>Locked-in </p>\n            {!_.isEmpty(balance) && !_.isEmpty(userInfo) && <span>\n              <AnimatedNumber\n                value={(wrongChain || !isAuth) ? 0 : userInfo.staked}\n                formatValue={numberWithCommas}\n              />&nbsp;{tokenDetails?.symbol}\n            </span>}\n            {(_.isEmpty(balance) || _.isEmpty(userInfo)) && <span>\n              0&nbsp;{tokenDetails?.symbol}\n            </span>}\n          </div> */}\n        </div>\n      </div>\n      <ModalVerifyEmail\n        setOpenModalVerifyEmail={setOpenModalVerifyEmail}\n        email={email}\n        setEmail={setEmail}\n        open={openModalVerifyEmail}\n        setEmailVeryfied={setEmailVeryfied}\n      />\n    </div>\n  );\n};\n\nexport default withWidth()(AccountInformation);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/Tiers/index.tsx",["1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279"],"import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport _ from 'lodash';\nimport { CONVERSION_RATE, TIERS } from '../../../constants';\nimport useStyles from './style';\nimport useCommonStyle from '../../../styles/CommonStyle';\nimport { getUserTierAlias } from '../../../utils/getUserTierAlias';\nimport useAuth from '../../../hooks/useAuth';\nimport withWidth, {isWidthDown, isWidthUp} from '@material-ui/core/withWidth';\nimport { getTiers, getUserInfo, getUserTier } from '../../../store/actions/sota-tiers';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { numberWithCommas } from '../../../utils/formatNumber';\n\nconst noticeIcon = '/images/icons/notice.svg';\n\nconst Tiers = (props: any) => {\n  const styles = useStyles();\n  const commonStyle = useCommonStyle();\n  const dispatch = useDispatch();\n\n  const { data: tiers = {} } = useSelector((state: any) => state.tiers);\n  const { data: userInfo = {} } = useSelector((state: any) => state.userInfo);\n  const [loading, setLoading] = useState(true);\n  const { isAuth, connectedAccount, wrongChain } = useAuth();\n  const {data: rates} = useSelector((state: any) => state.rates);\n\n  const {\n    showMoreInfomation = false,\n    tiersBuyLimit,\n    tokenSymbol,\n    verifiedEmail,\n    userTier = 0,\n    total,\n    hideStatistics\n  } = props;\n\n  const [currentProcess, setCurrentProcess] = useState(undefined) as any;\n\n  useEffect(() => {\n    console.log(userTier, 'userTier')\n  }, [userTier])\n\n  const calculateProcess = (ListData: any, current: any) => {\n    let tierA = 0;\n    let tierB = 0;\n    let overTier = true;\n    for(let i = 0; i < ListData.length; i++) {\n      if(ListData[i] > parseFloat(current) && overTier) {\n        if(i == 0) {\n          tierA = 0;\n          tierB = ListData[0];\n        } else {\n          tierA = ListData[i - 1];\n          tierB = ListData[i];\n        }\n        overTier = false;\n      }\n    }\n    if(overTier) {\n      return 100;\n    }\n    let process = (parseFloat(current) - tierA) * 100 /((tierB - tierA))\n    if(process > 100) process = 100\n    return process;\n  }\n\n  useEffect(() => {\n    if(!_.isEmpty(tiers)) {\n      setLoading(false);\n    }\n    if(wrongChain || !isAuth || !connectedAccount){\n      setCurrentProcess(0)\n      return\n    }\n    if(showMoreInfomation && userTier) {\n      // let process = userTier*100/(tiersBuyLimit.length - 1)\n      setCurrentProcess(0);\n      return;\n    }\n    if(!showMoreInfomation && total) {\n      let process = calculateProcess(tiers, total);\n      setCurrentProcess(process);\n    }\n  }, [tiers, userTier, userInfo, tiersBuyLimit, showMoreInfomation, tokenSymbol, connectedAccount, isAuth, wrongChain, total])\n\n  useEffect(() => {\n    dispatch(getTiers());\n    connectedAccount != '' && connectedAccount != undefined && dispatch(getUserInfo(connectedAccount));\n    connectedAccount != '' && connectedAccount != undefined && dispatch(getUserTier(connectedAccount));\n  }, [isAuth, wrongChain, connectedAccount])\n\n  useEffect(() => {\n    if(currentProcess != undefined) setLoading(false)\n    console.log('userTier', userTier)\n  }, [currentProcess,userTier])\n\n  return (\n    <div\n      className={styles.tierComponent + (!loading ? ' active' : ' inactive') + (showMoreInfomation ? ' bg-none' : '')}\n    >\n      {showMoreInfomation && <div className={styles.title}>\n        <>\n          {\n            (verifiedEmail && connectedAccount) ?  (\n              <p>\n              {userTier > 0 ? `You are in tier ${getUserTierAlias(userTier as number).text}`: 'You are not in any tier yet'}. To upgrade your tier, please click <Link to=\"/account\" className={styles.tierLinkToAccount}>here</Link>.\n              </p>\n            ): (\n              <p>\n                You are not in any tier yet.\n              </p>\n            )\n          }\n        </>\n      </div>}\n      <ul className={styles.tierList}>\n        <li className={`${styles.tierInfo} active first-tier`}>\n          {isWidthUp('sm', props.width) && connectedAccount && <span\n            className={\"progress-bar\"}\n            style={{\n              backgroundColor: TIERS[0].bgColor,\n              width: userTier > 0 ?  'calc(100% - 1px)' : `${currentProcess || 0}%`\n            }}\n          ></span>}\n          {isWidthDown('xs', props.width) && connectedAccount && <span\n            className={\"progress-bar\" + (loading ? ' inactive' : ' active')}\n            style={{\n              backgroundColor: TIERS[0].bgColor,\n              height: userTier > 0 ?  'calc(100% - 1px)' : `${currentProcess || 0}%`\n            }}\n          ></span>}\n          <div>\n            <div className=\"icon\">\n              <img src={TIERS[0].bg} alt=\"\"/>\n              <img src={TIERS[0].icon} />\n            </div>\n            <div className=\"info\">\n              <span className=\"tier-name\">{TIERS[0].name}</span>\n              <span className=\"tier-name\"></span>\n            </div>\n          </div>\n        </li>\n        {tiers.length > 0 && tiers.map((tier: any, idx: any) => {\n          if(tier != 0) {\n            return <li key={tier} className={styles.tierInfo + (userTier > idx ? ' active ' : ' ') + TIERS[idx + 1].name +  (hideStatistics ? ' hide-statistics': '')}>\n              {userTier > idx + 1 && connectedAccount && <span\n                className={\"progress-bar\" + (loading ? ' inactive' : ' active')}\n                style={{\n                  backgroundColor: TIERS[idx + 1].bgColor,\n                  transition: `all 1s ease ${idx + 1}s`\n                }}\n              ></span>}\n              {userTier == idx + 1 && connectedAccount && !showMoreInfomation && isWidthUp('sm', props.width) && <span\n                className={\"progress-bar\" + (loading ? ' inactive' : ' active')}\n                style={{\n                  backgroundColor: TIERS[idx + 1].bgColor,\n                  width: `${currentProcess}%`\n                }}\n              ></span>}\n              {userTier == idx + 1 && connectedAccount && !showMoreInfomation && isWidthDown('xs', props.width) && <span\n                className={\"progress-bar\" + (loading ? ' inactive' : ' active')}\n                style={{\n                  backgroundColor: TIERS[idx + 1].bgColor,\n                  height: `${currentProcess}%`\n                }}\n              ></span>}\n              <div>\n                <div className=\"icon\" style={hideStatistics && { marginTop: -30 }}>\n                  <img src={TIERS[idx + 1].bg} alt=\"\"/>\n                  <img src={TIERS[idx + 1].icon} />\n                </div>\n                <div className=\"info\">\n                  <span className=\"tier-name\">{TIERS[idx + 1].name}</span>\n                  { !showMoreInfomation && <span>{numberWithCommas(tier)} {tokenSymbol}</span> }\n                  { showMoreInfomation && !hideStatistics && <span>{numberWithCommas(tiersBuyLimit[idx + 1])} {tokenSymbol}</span> }\n                </div>\n              </div>\n            </li>\n          }\n        })}\n      </ul>\n\n      {!showMoreInfomation && <div className={styles.tierNote}>\n        <h3 className=\"title\">\n          Equivalent PKF&nbsp;&nbsp;\n          <Tooltip placement=\"top-start\" classes={{ tooltip: commonStyle.tooltip }} enterDelay={500} leaveDelay={200} title={<p style={{ font: 'normal normal normal 12px/18px Helvetica' }}>\n            Equivalent PKF = PKF\n            {rates.data && rates.data.map((rate: any) => {\n              return ` + ${rate.symbol}*${rate.rate}`\n            })}\n            + sPKF (Cooldown)\n          </p>}>\n            <img src={noticeIcon}/>\n          </Tooltip>\n        </h3>\n        <span className=\"subtitle\">{(connectedAccount && isAuth && !wrongChain) ? numberWithCommas(total || 0) : 0} PKF</span>\n        <div className=\"notice\">\n          <img src={TIERS[userTier].icon}/>\n          <div className=\"notice-content\">\n            {(userTier > 0 && connectedAccount) ? <span>You are in Tier {TIERS[userTier].name}</span> : <span>You are not in any tier yet.</span>}\n            <span>Please stake tokens in your wallet balance to maintain your tier!</span>\n          </div>\n        </div>\n      </div>}\n    </div>\n  );\n};\n\nexport default withWidth()(Tiers);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/Button/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/BackgroundComponent/index.tsx",["1280"],"import useStyles from './style';\n\nconst backgroundImage = '/images/icons/background3.svg';\n\nconst BackgroundComponent = (props: any) => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.backgroundComponent}>\n      <div className={styles.mainContent}>\n        <div>\n          <img src={backgroundImage}/>\n          <h1 className=\"title\">Decentralize the way your ideas raise capital.</h1>\n          <p className=\"description\">Be the first to join Polkastarter, a Protocol built for cross-chain token pools and auctions, enabling projects to raise capital on a decentralized and interoperable environment based on Polkadot.</p>\n        </div>\n        <div className=\"form\">\n          {props.children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BackgroundComponent;","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Dashboard/Card/index.tsx",["1281","1282","1283","1284","1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296","1297"],"import React, {useEffect, useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport useStyles from './style';\nimport {numberWithCommas} from '../../../utils/formatNumber';\nimport {Link} from 'react-router-dom';\nimport {ACCEPT_CURRENCY, BUY_TYPE, NETWORK} from '../../../constants';\nimport useFetch from '../../../hooks/useFetch';\nimport {getIconCurrencyUsdt} from \"../../../utils/usdt\";\nimport {PoolStatus} from \"../../../utils/getPoolStatus\";\nimport {checkPoolIsFinish, getAccessPoolText, getProgressWithPools, getTokenSold} from \"../../../utils/campaign\";\nimport BigNumber from 'bignumber.js';\n\nconst dotIcon = '/images/icons/dot.svg'\nconst EthereumIcon = \"/images/ethereum.svg\";\nconst BSCIcon = \"/images/bsc.svg\";\n\nconst Card = (props: any): JSX.Element => {\n  const styles = useStyles();\n  const {\n    pool, autoFetch\n  } = props;\n  const { data: participants } = useFetch<any>(`/user/counting/${pool.id}`);\n\n  const [progress, setProgress] = useState('0');\n  const [tokenSold, setTokenSold] = useState('0');\n  const [totalSoldCoin, setTotalSoldCoin] = useState('0');\n  useEffect(() => {\n    const getTokenProgressInfoByPool = async () => {\n      console.log('Run getTokenProgressInfoByPool========>');\n      if (autoFetch) {\n        pool.tokenSold = await getTokenSold(pool);\n      }\n      let {\n        progress: progressPercent,\n        tokenSold: totalTokenSold,\n        totalSoldCoin: totalToken,\n      } = getProgressWithPools(pool);\n\n      setProgress(progressPercent);\n      setTokenSold(totalTokenSold);\n      setTotalSoldCoin(totalToken);\n    };\n\n    getTokenProgressInfoByPool();\n    if (autoFetch) {\n      const intervalProgress = setInterval(() => {\n        getTokenProgressInfoByPool();\n      }, 10000);\n\n      return () => {\n        intervalProgress && clearInterval(intervalProgress);\n      }\n    }\n  }, [pool]);\n\n  // useEffect(() => {\n  //   const currentTime = moment().unix()\n  //   let diffTime = 0;\n  //   if(pool.start_join_pool_time > currentTime) {\n  //     diffTime = parseInt(pool.start_join_pool_time) - currentTime;\n  //   } else if(pool.start_time > currentTime) {\n  //     diffTime = parseInt(pool.start_time) - currentTime;\n  //   }\n\n  //   let intervalCount: any;\n  //   if (diffTime > 0) {\n  //     let timeLeftToStart = diffTime * 1000\n  //   const interval = 1000;\n\n  //     intervalCount = setInterval(() => {\n  //       timeLeftToStart -= interval;\n  //       const timeLeftDuration = moment.duration(timeLeftToStart, 'milliseconds');\n  //       let timeLeftString = '';\n  //       if (timeLeftToStart >= 86400000) {\n  //         timeLeftString = 'In ' + timeLeftDuration.days() + \" days\"\n  //       } else {\n  //         timeLeftString = 'In ' + timeLeftDuration.hours() + \":\" + timeLeftDuration.minutes() + \":\" + timeLeftDuration.seconds()\n  //       }\n  //       setTimeLeft(timeLeftString)\n  //     }, interval);\n  //   }\n\n  //   return () => clearInterval(intervalCount);\n  // }, [])\n\n  const { currencyIcon, currencyName } = getIconCurrencyUsdt({ purchasableCurrency: pool?.accept_currency, networkAvailable: pool?.network_available });\n\n  return (\n    <Link to={`/buy-token/${pool.id}`}>\n      <div className={styles.card}>\n        <div className={styles.cardHeader}>\n          <img src={pool.banner} />\n          {pool.status == PoolStatus.Closed && <div className=\"time ended\">\n            <span>Ended</span>\n          </div>}\n          {pool.status == PoolStatus.TBA && <div className=\"time tba\">\n            <span>TBA</span>\n          </div>}\n          {pool.status == PoolStatus.Filled && <div className=\"time filled\">\n            <span>Filled</span>\n          </div>}\n          {pool.status == PoolStatus.Progress && <div className=\"time in-progress\">\n            <span>In Progress</span>\n          </div>}\n          {pool.status == PoolStatus.Joining && <div className=\"time joining\">\n            <span>Whitelisting</span>\n          </div>}\n          {pool.status == PoolStatus.Claimable && <div className=\"time claimable\">\n            <span>Claimable</span>\n          </div>}\n          {pool.status == PoolStatus.Upcoming && <div className=\"time upcoming\">\n            <span>Upcoming</span>\n          </div>}\n        </div>\n        <div className={styles.cardBody}>\n          <div className=\"card-content__title\">\n            <img src={pool.token_images} />\n            <div>\n              <h2>{pool.title}</h2>\n              <p>{pool.name}{` (${pool.symbol})`}</p>\n            </div>\n          </div>\n          <ul className=\"card-content__content\">\n            <li>\n              <span>Rate</span>\n              <span className=\"total\">1 {pool.symbol} =&nbsp;\n\n                {pool.accept_currency === ACCEPT_CURRENCY.ETH &&\n                  <>\n                    {numberWithCommas(pool?.price_usdt, 4)} USD\n                  </>\n                }\n\n                {pool.accept_currency !== ACCEPT_CURRENCY.ETH &&\n                  <>\n                    {numberWithCommas(pool?.token_conversion_rate, 4)} {' '}\n                    {currencyName}\n                    {/*{pool?.accept_currency?.toUpperCase()}*/}\n                  </>\n                }\n\n                {/*{numberWithCommas(pool.price_usdt, 4)} USDT*/}\n                {/*{pool.accept_currency === ACCEPT_CURRENCY.ETH ?*/}\n                {/*  numberWithCommas(pool.ether_conversion_rate, 4) :*/}\n                {/*  numberWithCommas(pool.token_conversion_rate, 4)} {pool.accept_currency.toUpperCase()}*/}\n              </span>\n            </li>\n            <li>\n              <span>Participants</span>\n              <span className=\"total\">{ pool.buy_type == BUY_TYPE.WHITELIST_LOTTERY ? numberWithCommas(participants) : 'All' }</span>\n            </li>\n            <li>\n              <span>Access</span>\n              <span className=\"total\">\n                {\n                  getAccessPoolText(pool)\n                }\n              </span>\n            </li>\n            <li>\n              <span>Network</span>\n              <span className=\"total\">\n                {pool.network_available === NETWORK.ETHEREUM ? <img src={EthereumIcon} /> : <img src={BSCIcon} />}\n              </span>\n            </li>\n          </ul>\n\n          {/* {pool.status == POOL_STATUS.UPCOMMING && <div className=\"token-area\">\n            {pool.network_available === NETWORK.ETHEREUM && <div>\n              <img src={EthereumIcon} />\n              <span>Ethereum</span>\n            </div>}\n            {pool.network_available === NETWORK.BSC && <div>\n              <img src={BSCIcon}/>\n              <span>BSC</span>\n            </div>}\n          </div>} */}\n\n          <div className=\"progress-area\">\n            <p>Progress</p>\n            <div className=\"progress\">\n              <span\n                className={`current-progress ${parseFloat(progress) > 0 ? '' : 'inactive'}`}\n                style={{ width: `${parseFloat(progress) > 99 ? 100 : Math.round(parseFloat(progress))}%` }}\n              ></span>\n            </div>\n            <div>\n              <div>\n                <span>\n                  {new BigNumber(progress).gte(100) ?\n                    new BigNumber(progress).toFixed(0) :\n                    new BigNumber(progress).toFixed(2)\n                  }\n                  %\n                </span>\n              </div>\n              <span>\n                {numberWithCommas(tokenSold, 0)}\n                /\n                {numberWithCommas(totalSoldCoin)}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default Card;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/formatNumber.ts",["1298"],"import BigNumber from 'bignumber.js';\n//@ts-ignore\nimport removeTrailingZeros from 'remove-trailing-zeros'\nvar commaNumber = require('comma-number');\n\nconst ARROW_LEFT_KEY_CODE = 37;\nconst ARROW_RIGHT_KEY_CODE = 39;\nconst BACKSPACE_KEY_CODE = 8;\nconst DELETE_KEY_CODE = 46;\nexport const DECIMAL_KEY_CODE = 190;\n\nconst A_KEY_CODE = 65;\nconst V_KEY_CODE = 86;\nconst C_KEY_CODE = 67;\n\nconst START_NUMBER_KEY_CODE = 48;\nconst END_NUMBER_KEY_CODE = 57;\n\nexport const INTEGER_NUMBER_KEY_CODE_LIST = [ARROW_LEFT_KEY_CODE, ARROW_RIGHT_KEY_CODE, BACKSPACE_KEY_CODE, DELETE_KEY_CODE];\nexport const FLOAT_NUMBER_KEY_CODE_LIST = [...INTEGER_NUMBER_KEY_CODE_LIST, DECIMAL_KEY_CODE];\n\nexport const formatToNumber = (yourNumber: any) => {\n  if (yourNumber && !isNaN(Number(yourNumber))) {\n    const yourNumberBig = new BigNumber(yourNumber).toString();\n    if (yourNumberBig.length !== yourNumber.length) {\n      return yourNumberBig;\n    }\n    return yourNumber;\n  }\n  return yourNumber;\n};\n\nexport const getShortNumberBuyDecimals = (balance: any, decimals: number = 8) => {\n  const balanceNumber = new BigNumber(balance).toString();\n  if (balanceNumber.includes('.')) {\n    const balanceSplit = balance.toString().split('.');\n    const decimalsString = balanceSplit.pop();\n    if (decimalsString.length > decimals) {\n      return new BigNumber(balance).toFormat(decimals);\n    }\n    return new BigNumber(balance).toFormat();;\n  }\n\n  return new BigNumber(balance).toFormat();;\n};\n\nexport const checkNumberByASCIIC = (event: any, isNotFloatNumber: boolean = false) => {\n  const keyCode = event.keyCode || event.which;\n\n  const keyCodeList = isNotFloatNumber ? INTEGER_NUMBER_KEY_CODE_LIST : FLOAT_NUMBER_KEY_CODE_LIST;\n  if (keyCodeList.includes(keyCode)) {\n    return true;\n  }\n\n  // Allow: Ctrl+A,Ctrl+C,Ctrl+V, Command+A\n  if ((keyCode === A_KEY_CODE || keyCode === V_KEY_CODE || keyCode === C_KEY_CODE) && (event.ctrlKey === true || event.metaKey === true)) {\n    return true;\n  }\n\n  if (event.shiftKey) {\n    return false;\n  }\n\n  if (keyCode < START_NUMBER_KEY_CODE || keyCode > END_NUMBER_KEY_CODE) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isNotValidASCIINumber = (keyCode: number, decimalRequired: boolean = false) => {\n  const abnormalKeys = [ARROW_LEFT_KEY_CODE, ARROW_RIGHT_KEY_CODE, A_KEY_CODE, C_KEY_CODE, V_KEY_CODE];\n\n  decimalRequired && abnormalKeys.push(DECIMAL_KEY_CODE);\n\n  if (abnormalKeys.indexOf(keyCode) >= 0) {\n    return false;\n  }\n\n  if (keyCode === 229) {\n    return true;\n  }\n\n  return keyCode > 31 && (keyCode < 48 || keyCode > 57) && (keyCode < 96 || keyCode > 105);\n};\n\nexport const isPreventASCIICharacters = (key: string) => {\n  const abnormalKeys = ['arrowleft', 'arrowright', 'control', 'a', 'c', 'v'];\n  return abnormalKeys.indexOf(key.toLowerCase()) >= 0;\n};\n\nexport const replaceSpecialCharactersCopy = (str: string) => {\n  return str.replaceAll(/[.,\\s\\D]*/g, '');\n}\n\nexport const trimLeadingZeros = (input: string): string => {\n  return input.replace(/^0+/, '');\n}\n\nexport const trimEndingZeros = (input: string): string => {\n  return input.replace(/0+$/, '');\n}\n\nexport const trimLeadingZerosWithDecimal = (input: string): string => {\n\n  if (input.includes('.')) {\n    let trimEndingZerosString: string = '';\n    \n    if (input.startsWith('0.')) {\n      trimEndingZerosString = trimEndingZeros(input);\n    } else if (input.match(/^0{2,}\\./)) {\n      trimEndingZerosString = `0${trimEndingZeros(trimLeadingZeros(input))}`\n    } else {\n      trimEndingZerosString = trimEndingZeros(trimLeadingZeros(input))\n    }\n\n    if (trimEndingZerosString.length > 0 && trimEndingZerosString.endsWith('.')) {\n      return trimEndingZerosString.split('').slice(0, -1).join('');\n    }\n\n    return trimEndingZerosString;\n  }\n\n  return trimLeadingZeros(input);\n};\n\nexport const getDigitsAfterDecimals = (input: string): number => {                                                   \n  let totalDigits = 0;                                                                                                \n                                                                                                                                                                                                                                        \n  if (input.includes('.')) {                                                                                          \n    const splittedDecimals = input.slice(input.indexOf('.') + 1, input.length);                                       \n                                                                                                                      \n    totalDigits = splittedDecimals.length;     \n  }                                                                       \n                                                                                                                      \n  return totalDigits;     \n}\n\nfunction format(num: string){\n  const splittedStrs = num.split('.');\n  return splittedStrs[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + \".\" + splittedStrs[1];\n}\n\nexport function numberWithCommas(x: string = \"\", decimals: number = 6) {\n  x = typeof x === 'string' ? x: (x as number).toFixed();\n  return removeTrailingZeros(commaNumber(new BigNumber(x).toFixed(decimals), \",\", \".\"));\n  // }\n\n  // return format(x);\n}\nexport const nFormatter = (number: string, digits: any = 0) => {\n  const SI = [\n    { value: 1, symbol: \"\" },\n    { value: 1E3, symbol: \"k\" },\n    { value: 1E6, symbol: \"M\" },\n    { value: 1E9, symbol: \"G\" },\n    { value: 1E12, symbol: \"T\" },\n    { value: 1E15, symbol: \"P\" },\n    { value: 1E18, symbol: \"E\" }\n  ];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  const num = parseFloat(number)\n  let i;\n  for (i = SI.length - 1; i > 0; i--) {\n    if (num >= SI[i].value) {\n      break;\n    }\n  }\n  return (num / SI[i].value).toFixed(digits).replace(rx, \"$1\") + SI[i].symbol;\n}\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/getUserTierAlias.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/styles/CommonStyle.ts",["1299"],"import { makeStyles } from '@material-ui/core';\nimport { NONAME } from 'dns';\n\nconst useCommonStyle = makeStyles((theme) => {\n  return {\n    DefaultLayout: {\n      minHeight: '100vh',\n  \n      /* grid container settings */\n      display: 'grid',\n      gridTemplateRows: 'auto 1fr auto',\n      gridTemplateAreas: \n        `'header'\n        'main'\n        'footer'`,\n    },\n    headPage: {\n      display: 'flex',\n      marginBottom: 25,\n    },\n    headPageLeft: {\n\n    },\n    headPageRight: {\n      marginLeft: 'auto',\n      display: 'flex',\n    },\n    btnBack: {\n      background: '#FFCC00',\n      boxShadow: '0px 0px 15px rgba(243, 203, 25, 0.3)',\n      borderRadius: 8,\n      height: 40,\n      minWidth: 92,\n      fontWeight: 500,\n      fontSize: 14,\n      lineHeight: 160,\n      alignItems: 'center',\n      color: '#FFFFFF',\n      textTransform: 'inherit',\n      fontFamily: 'Roboto-Bold',\n      overflow: 'hidden',\n      '&:hover': {\n        background: '#FFCC00',\n      }\n    },\n    TimePicker: {\n      '& .react-time-picker__wrapper': {\n        background: '#F0F0F0',\n        borderRadius: 8,\n        border: 'none',\n        height: 40,\n        padding: '5px 10px',\n      },\n      '& .react-time-picker__inputGroup': {\n        fontSize: 14,\n        lineHeight: '20px',\n        letterSpacing: '0.25px',\n        color: '#9A9A9A',\n        '& input': {\n          outline: 'none',\n          border: 'none',\n          fontSize: 14,\n          lineHeight: '20px',\n          letterSpacing: '0.25px',\n          color: '#9A9A9A',\n        }\n      },\n      '& .react-time-picker__button': {\n        padding: 5,\n        outline: 'none',\n        border: 'none',\n\n        '& svg': {\n          width: 16,\n          stroke: '#9A9A9A',\n        }\n      },\n      '& .react-time-picker__inputGroup__input': {\n        outline: 'none',\n        border: 'none',\n        fontSize: 14,\n        lineHeight: '20px',\n        letterSpacing: '0.25px',\n        color: '#9A9A9A',\n      }\n    },\n    DatePicker: {\n      '& .react-date-picker__wrapper': {\n        background: '#F0F0F0',\n        borderRadius: 8,\n        border: 'none',\n        height: 40,\n        padding: '5px 10px',\n      },\n      '& .react-date-picker__inputGroup': {\n        fontSize: 14,\n        lineHeight: '20px',\n        letterSpacing: '0.25px',\n        color: '#9A9A9A',\n        '& input': {\n          outline: 'none',\n          border: 'none',\n          fontSize: 14,\n          lineHeight: '20px',\n          letterSpacing: '0.25px',\n          color: '#9A9A9A',\n        }\n      },\n      '& .react-date-picker__button': {\n        padding: 5,\n        outline: 'none',\n        border: 'none',\n\n        '& svg': {\n          width: 16,\n          stroke: '#9A9A9A',\n        }\n      }\n    },\n    DateTimePicker: {\n      '& .react-datetime-picker__wrapper': {\n        background: '#F0F0F0',\n        borderRadius: 8,\n        border: 'none',\n        height: 40,\n        padding: '5px 10px',\n        color: 'black'\n      },\n      '& .react-datetime-picker__inputGroup': {\n        fontSize: 14,\n        lineHeight: '20px',\n        letterSpacing: '0.25px',\n        color: '#9A9A9A',\n        '& input': {\n          outline: 'none',\n          border: 'none',\n          fontSize: 14,\n          lineHeight: '20px',\n          letterSpacing: '0.25px',\n          color: 'black',\n        }\n      },\n      '& .react-datetime-picker__inputGroup__divider': {\n        color: 'black'\n      },\n      '& .react-datetime-picker__inputGroup__leadingZero': {\n        color: 'black'\n      },\n\n      '& .react-datetime-picker__button': {\n        padding: 5,\n        outline: 'none',\n        border: 'none',\n\n        '& svg': {\n          width: 16,\n          stroke: '#9A9A9A',\n        }\n      }\n    },\n    iconLine: {\n      margin: '0px 8px',\n      position: 'relative',\n      width: 12,\n    },\n    boxSearch: {\n      position: 'relative',\n      marginLeft: 12,\n    },\n    inputSearch: {\n      background: '#F0F0F0',\n      borderRadius: 8,\n      width: 228,\n      maxWidth: '100%',\n      height: 40,\n      outline: 'none',\n      border: 'none',\n      fontSize: 14,\n      lineHeight: '20px',\n      letterSpacing: '0.25px',\n      color: 'black',\n      padding: '10px 15px',\n      paddingRight: 40,\n    },\n    iconSearch: {\n      position: 'absolute',\n      right: 16,\n      top: 12,\n    },\n    loadingTransaction: {\n      position: 'fixed',\n      width: '100%',\n      height: '100%',\n      top: '0',\n      left: '0',\n      zIndex: 10,\n      '& .MuiBackdrop-root': {\n        backgroundColor: 'rgba(3, 9, 46, 0.6)',\n      },\n      '& .MuiPaper-rounded': {\n        background: 'none',\n      },\n\n      '& .content': {\n        padding: '60px',\n        background: '#020616',\n        borderRadius: '4px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n\n      '& .content img': {\n        position: 'absolute',\n        top: '10px',\n        right: '10px',\n        cursor: 'pointer',\n      },\n\n      '& .content > span': {\n        textAlign: 'center',\n        marginBottom: '40px',\n        display: 'block',\n        width: '100%',\n        color: '#ffffff'\n      }\n    },\n    modalTransactionInfomation: {\n      '& .modal-content__body span': {\n        fontFamily: 'Helvetica',\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n        fontSize: '14px',\n        lineHeight: '24px',\n        color: '#FDFDFD',\n      },\n\n      '& .MuiBackdrop-root': {\n        background: 'none',\n      },\n      '& .MuiPaper-rounded': {\n        background: 'none',\n      },\n      '& .modal-content__body': {\n        backgroundColor: 'unset!important'\n      },\n\n      '& .modal-content__foot button': {\n        padding: '12px!important',\n        background: 'none'\n      }\n    },\n    modal: {\n      position: 'fixed',\n      width: '100%',\n      height: '100%',\n      top: '0',\n      left: '0',\n      zIndex: 5,\n      backgroundColor: 'rgba(3, 9, 46, 0.6)',\n\n      '& .MuiBackdrop-root': {\n        background: 'none',\n      },\n      '& .MuiPaper-rounded': {\n        background: 'none',\n      },\n      '& .modal-content': {\n        width: '480px',\n        maxWidth: '100%',\n        maxHeight: '80%',\n        overflow: 'auto',\n        padding: '60px',\n        background: '#020616',\n        borderRadius: '4px',\n      },\n\n      '& .modal-content__head': {\n        padding: '10px 0',\n        '& .title': {\n          color: '#FFFFFF',\n          fontFamily: 'DM Sans',\n          fontStyle: 'normal',\n          fontWeight: 'bold',\n          fontSize: '18px',\n          lineHeight: '24px',\n          textAlign: 'center'\n        },\n\n        '& .btn-close': {\n          position: 'absolute',\n          top: '10px',\n          right: '10px',\n          cursor: 'pointer',\n        },\n      },\n\n      '& .modal-content__body': {\n        borderRadius: '4px',\n        padding: '10px 12px',\n        margin: '20px 0 32px 0',\n\n        '& .subtitle': {\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n          color: '#999999',\n          fontFamily: 'Helvetica',\n          fontStyle: 'normal',\n          fontWeight: 'normal',\n          fontSize: '12px',\n          lineHeight: '18px',\n        },\n\n        '& .input-group': {\n          position: 'relative'\n        },\n\n        '& .input-group input': {\n          width: '100%',\n          height: '40px',\n          background: 'none',\n          fontFamily: 'Helvetica',\n          fontStyle: 'normal',\n          fontWeight: 'normal',\n          fontSize: '14px',\n          lineHeight: '24px',\n          color: '#FDFDFD',\n          border: 'none',\n          outline: 'none',\n          paddingRight: '60px',\n        },\n\n        '& .input-group .btn-max': {\n          width: '50px',\n          height: '20px',\n          color: '#000',\n          fontFamily: 'DM Sans',\n          fontStyle: 'normal',\n          fontWeight: 'bold',\n          fontSize: '12px',\n          lineHeight: '14px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          border: 'none',\n          outline: 'none',\n          background: '#FFFFFF',\n          padding: '0 12px',\n          borderRadius: '1rem',\n\n          '&:hover': {\n            cursor: 'pointer'\n          },\n        },\n\n        '& .input-group span': {\n          color: '#000'\n        },\n\n        '& .input-group div': {\n          position: 'absolute',\n          right: '0',\n          top: '10px'\n        }\n      },\n\n      '& .modal-content__foot': {\n        display: 'flex', \n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        padding: 0,\n\n        '& button': {\n          borderRadius: '60px',\n          color: '#FFFFFF',\n          fontFamily: 'DM Sans',\n          fontStyle: 'normal',\n          fontWeight: 'bold',\n          fontSize: '14px',\n          lineHeight: '18px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          border: 'none',\n          outline: 'none',\n          padding: '12px 60px',\n\n          '&:hover': {\n            cursor: 'pointer'\n          },\n\n          '&.disabled': {\n            backgroundColor: '#727272!important'\n          },\n\n          '&:first-child': {\n            backgroundColor: '#3232DC'\n          },\n\n          '&.btn-cancel': {\n            backgroundColor: '#727272'\n          }\n        }\n      },\n    },\n    nnb2832d: {\n      font: 'normal normal 700 28px/32px DM Sans',\n    },\n    nnb1824d: {\n      font: 'normal normal 700 18px/24px DM Sans',\n    },\n    nnb1624d: {\n      font: 'normal normal 700 16px/24px DM Sans',\n    },\n    nnb1418d: {\n      font: 'normal normal 700 14px/18px DM Sans',\n    },\n    nnb1214d: {\n      font: 'normal normal 700 12px/14px DM Sans',\n    },\n    nnb2432d: {\n      font: 'normal normal 700 24px/32px DM Sans',\n    },\n    nnn1424h: {\n      font: 'normal normal 400 14px/24px Helvetica',\n    },\n    nnn1218h: {\n      font: 'normal normal 400 12px/18px Helvetica',\n    },\n\n    tooltip: {\n      maxWidth: 500,\n      backgroundColor: '#030925',\n      boxShadow: '0px 12px 20px rgba(0, 0, 0, 0.07)',\n      borderRadius: '4px',\n      padding: '7px 10px',\n      '&:before': {\n        content: '\"\"',\n        width: '10px',\n        height: '10px',\n        display: 'block',\n        backgroundColor: '#030925',\n        transform: 'rotate(-45deg)',\n        position: 'absolute',\n        left: '5px',\n        bottom: '10px'\n      }\n    },\n\n    [theme.breakpoints.down('xs')]: {\n      modal: {\n        '& .modal-content__body': {\n          padding: '0'\n        },\n        '& .modal-content': {\n          padding: '15px',\n        },\n        '& .modal-content__foot': {\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n  \n          '& button': {\n            padding: '12px 30px',\n            width: '100%',\n            marginBottom: '15px',\n          }\n        },\n        '& .MuiDialogActions-spacing > :not(:first-child)': {\n          marginLeft: '0',\n        }\n      },\n      loadingTransaction: {\n        width: '100vw',\n        height: '100vh',\n        '& .MuiPaper-rounded': {\n          width: '100%'\n        },\n        '& .content': {\n          padding: '15px',\n        },\n      },\n    }\n  };\n});\n\nexport default useCommonStyle;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/Tiers/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Layout/DefaultLayout/DefaultLayout.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/campaign.ts",["1300","1301","1302","1303","1304"],"import _ from \"lodash\";\nimport moment from \"moment\";\nimport BigNumber from 'bignumber.js';\nimport {BUY_TYPE, NFT_PLUS_AMOUNT_PRODUCTION, POOL_IS_PRIVATE} from \"../constants\";\nimport {convertFromWei, getPoolContract} from \"../services/web3\";\n\nexport const checkIsFinishTime = (campaignDetail: any): boolean => {\n\n  console.log('campaignDetail', campaignDetail);\n\n  const closeTime = _.get(campaignDetail, 'closeTime', '');\n  let isFinish = false;\n  if (closeTime) {\n    const closeTimeDate = moment.unix(parseInt(closeTime)).toDate();\n    const currentDate = new Date();\n    if (currentDate >= closeTimeDate) {\n      isFinish = true;\n    }\n  }\n\n  return isFinish;\n};\n\nexport const getTokenRemainingCanBuy = (campaignDetail: any): string => {\n  if (!campaignDetail) return '0';\n  const tokenLeft = _.get(campaignDetail, 'tokenLeft', 0);\n  const tokenClaimed = _.get(campaignDetail, 'tokenClaimed', 0);\n  let remainTokenAvailable = new BigNumber(tokenLeft).plus(tokenClaimed);\n\n  return remainTokenAvailable.toFixed();\n};\n\nexport const checkIsBetweenCloseTimeAndReleaseTime = (campaignDetail: any): boolean => {\n  const closeTime = _.get(campaignDetail, 'closeTime', '');\n  const releaseTime = _.get(campaignDetail, 'releaseTime', '');\n\n  let isBetween = false;\n  if (closeTime && releaseTime) {\n    const closeTimeDate = moment.unix(parseInt(closeTime)).toDate();\n    const releaseTimeDate = moment.unix(parseInt(releaseTime)).toDate();\n    const currentDate = new Date();\n    if (closeTimeDate <= currentDate && currentDate < releaseTimeDate) {\n      isBetween = true;\n    }\n  }\n\n  return isBetween;\n};\n\nexport const getAccessPoolText = (pool: any) => {\n  if (!pool) return '';\n  const isPrivate = pool?.is_private || pool?.isPrivate;\n  const buyType = pool?.buy_type || pool?.buyType || pool?.method;\n  if (isPrivate == POOL_IS_PRIVATE.PRIVATE) {\n    return 'Private';\n  }\n  return ((buyType + '').toLowerCase() == BUY_TYPE.WHITELIST_LOTTERY ? \"Whitelist/Lottery\" : BUY_TYPE.FCFS.toUpperCase());\n};\n\nexport const calculateTokenSoldWhenFinish = (totalSoldCoin: string | number) => {\n  const result = new BigNumber(totalSoldCoin).minus(\n    new BigNumber(totalSoldCoin).div(10000)\n  ).toFixed();\n  return result;\n};\n\nexport const getProgressWithPools = (pool: any) => {\n  let tokenSold = pool.tokenSold || pool.token_sold || '0';\n  let totalSoldCoin = pool.totalSoldCoin || pool.total_sold_coin || '0';\n  let progress = '0';\n\n  const isFinish = checkPoolIsFinish(pool);\n  if (isFinish) {\n    return {\n      progress: '100',\n      tokenSold: calculateTokenSoldWhenFinish(totalSoldCoin),\n      totalSoldCoin: totalSoldCoin,\n    }\n  }\n\n  if (pool.id == 22) {\n    return {\n      progress: '100',\n      tokenSold: '500000',\n      totalSoldCoin: '500000',\n    };\n  }\n\n  // Normal Case\n  if (new BigNumber(tokenSold).gt(totalSoldCoin)) { // If tokenSold > totalSoldCoin ==> tokenSold = totalSoldCoin\n    tokenSold = totalSoldCoin;\n  }\n  progress = new BigNumber(tokenSold).div(totalSoldCoin).multipliedBy(100).toFixed();\n\n  if (new BigNumber(progress).lte(0)) {\n    progress = '0';\n  }\n  if (new BigNumber(progress).gt(99)) {\n    progress = '100';\n  }\n\n  return {\n    progress,\n    tokenSold,\n    totalSoldCoin,\n  }\n};\n\nexport const checkPoolIsFinish = (pool: any) => {\n  const currentTime = moment().unix();\n  return (pool.finish_time && currentTime > pool.finish_time);\n};\n\nexport const getTokenSold = async (pool: any) => {\n  let result = '0';\n  try {\n    const networkAvailable = pool.network_available || pool.networkAvailable;\n    const poolHash = pool.campaign_hash || pool.campaignHash;\n    if (poolHash == 'Token contract not available yet.') {\n      return '0';\n    }\n\n    const contract = getPoolContract({ networkAvailable, poolHash });\n    if (contract) {\n      result = await contract.methods.tokenSold().call();\n      result = convertFromWei(result.toString());\n    }\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/usdt.ts",["1305","1306","1307"],"import BigNumber from 'bignumber.js';\nimport {ACCEPT_CURRENCY, NETWORK_AVAILABLE} from \"../constants\";\n\nexport const convertAmountToUsdt = (decimals: any, amount: string) => {\n  const decimalsNumber = new BigNumber(`1e+${decimals}`);\n  const amountNumber = new BigNumber(amount);\n  return amountNumber.multipliedBy(decimalsNumber);\n};\n\nexport const isAllowanceUsdt = (decimals: any, amount: any, allowanceAmount: any) => {\n  const amountNumberConvert = convertAmountToUsdt(decimals, amount);\n  const allowanceAmountNumber = new BigNumber(allowanceAmount);\n\n  const resultCompare = allowanceAmountNumber.comparedTo(amountNumberConvert);\n  return resultCompare === 1 || resultCompare === 0;\n};\n\nexport const getIconCurrencyUsdt = ({ purchasableCurrency, networkAvailable }: any) => {\n  purchasableCurrency = purchasableCurrency + '';\n  let currencyIcon = `/images/${purchasableCurrency.toUpperCase()}.png`;\n  let currencyName = purchasableCurrency.toUpperCase();\n  if (networkAvailable == NETWORK_AVAILABLE.BSC) {\n    if ((purchasableCurrency + '').toLowerCase() == ACCEPT_CURRENCY.USDT) {\n      currencyIcon = `/images/BUSD.png`;\n      currencyName = 'BUSD';\n    } else if ((purchasableCurrency + '').toLowerCase() == ACCEPT_CURRENCY.ETH) {\n      currencyIcon = `/images/BNB.png`;\n      currencyName = 'BNB';\n    }\n  }\n  return {\n    currencyIcon,\n    currencyName,\n  }\n};\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Dashboard/Card/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/BackgroundComponent/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/styles/index.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/index.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/FooterLandingLayout/index.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/MainDefaultLayout/index.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/styles/TableStyle.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/HeaderDefaultLayout.tsx",["1308","1309","1310","1311","1312","1313","1314","1315","1316","1317","1318","1319"],"import React, { useState, useEffect, useContext } from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { BeatLoader } from 'react-spinners';\nimport { css } from \"@emotion/core\";\nimport withWidth, { isWidthDown } from '@material-ui/core/withWidth';\nimport useStyles from './styles';\n\nimport ButtonLink from '../ButtonLink'\nimport { ETH_CHAIN_ID } from '../../../constants/network'\nimport AppNetworkSwitch from './AppNetworkSwitch';\nimport ConnectWalletModal from './ConnectWalletModal';\nimport WalletDisconnect from './WalletDisconnect';\nimport { HeaderContext } from './context/HeaderContext'\nimport { AppContext } from '../../../AppContext';\nimport { trimMiddlePartAddress } from '../../../utils/accountAddress';\nimport { connectorsByName, connectorNames } from '../../../constants/connectors';\nimport { WalletConnectionState } from  '../../../store/reducers/wallet';\n\nconst AccountIcon = \"user.svg\";\nconst BrightStartIcon = \"bright-star.svg\";\nconst WalletIcon = \"wallet.svg\";\nconst EthereumIcon = \"ethereum.svg\";\nconst BSCIcon = \"bsc.svg\";\nconst logo = \"/images/logo-red-kite.svg\";\nconst iconClose = \"/images/icons/close.svg\";\nconst iconHamburger = \"/images/icons/hamburger.svg\";\nconst iconAccount = \"icons/account.svg\";\n\nconst HeaderDefaultLayout: React.FC<any> = (props: any) => {\n  const styles = useStyles();\n\n  const [switchNetworkDialog, setSwitchNetworkDialog] = useState<boolean>(false);\n  const [disconnectDialog, setDisconnectDialog] = useState<boolean>(false);\n  const [agreedTerms, setAgreedTerms] = useState<boolean>(false);\n  const { appChainID } = useSelector((state: any) => state.appNetwork).data;\n  const walletsInfo = useSelector((state: any) => state.wallet).entities;\n  const [openSideBar, setOpenSideBar] = useState(false);\n  const { data: message = '' } = useSelector((state: any) => state.messages);\n\n  const {\n    handleProviderChosen,\n    currentConnector,\n    walletName,\n    setWalletName,\n    loginError,\n    currentConnectedWallet,\n    setCurrentConnectedWallet,\n    openConnectWallet,\n    setOpenConnectWallet,\n    connectWalletLoading\n  } = useContext(AppContext);\n\n  const currentAccount = currentConnectedWallet && currentConnectedWallet.addresses[0];\n  const balance = currentConnectedWallet ? currentConnectedWallet.balances[currentAccount]: 0;\n\n  const handleConnectWalletClose = () => {\n    setOpenConnectWallet && setOpenConnectWallet(false);\n  }\n\n  const handleConnectWalletOpen = () => {\n    setOpenConnectWallet && setOpenConnectWallet(true);\n    setOpenSideBar(false);\n  }\n\n  const handleDisconnectDialogOpen = () => {\n    setDisconnectDialog(true);\n    setOpenSideBar(false)\n  }\n\n  /* const hamburgerStyle = (isSmartPhone: boolean) => { */\n  /*   if(isSmartPhone) { */\n  /*     return openSideBar ? 'flex' : 'none'; */\n  /*   } */\n  /*   else { */\n  /*     return 'flex'; */\n  /*   } */\n  /* } */\n\n  useEffect(() => {\n    if (walletsInfo && walletName) {\n      let currentWalletsName: string[] = [];\n      let isFound = false;\n\n      Object.keys(walletsInfo).forEach(key => {\n        const wallet = walletsInfo[key];\n\n        if (wallet.addresses.length > 0 && wallet.connectionState === WalletConnectionState.CONNECTED && !isFound) {\n          isFound = true;\n          setCurrentConnectedWallet && setCurrentConnectedWallet(wallet);\n          currentWalletsName.push(key);\n        }\n      });\n\n      if (currentWalletsName.length > 0 && walletName.length === 0 && !currentConnector) {\n        const chooseWallet = currentWalletsName[0] as connectorNames;\n\n        setWalletName && setWalletName(currentWalletsName);\n        handleProviderChosen && handleProviderChosen(chooseWallet, connectorsByName[chooseWallet]);\n      }\n    }\n  }, [walletsInfo, walletName]);\n\n  const handleClickPoolList = (e: any) => {\n    console.log('props', props.location.pathname);\n    if (props?.location?.pathname === '/dashboard') {\n      window.location.reload();\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <div className={styles.navBar}>\n          <div>\n            <Link to={'/'} className={styles.navbarLink}>\n              <img src={logo} className={styles.navbarLogo}/>\n            </Link>\n          </div>\n          {isWidthDown('xs', props.width) && <img src={iconHamburger} onClick={() => setOpenSideBar(true)}/>}\n          <div className={styles.rightBar + (openSideBar ? ' active' : '')}>\n              {isWidthDown('xs', props.width) &&\n                <>\n                  <img src={logo} className={styles.sideBarLogo}/>\n                  <img src={iconClose} className={styles.closeBtn} onClick={() => setOpenSideBar(false)}/></>}\n                  <ButtonLink text=\"Pool\" to={'/dashboard'} icon={BrightStartIcon} className={`${styles.btn} start`} onClick={handleClickPoolList}/>\n                  {currentAccount && <ButtonLink text=\"My Account\" to={'/account'} icon={iconAccount} className={`${styles.btn} start my-account`} />}\n                  <button className={`${styles.btn} ${styles.btnNetwork}`} onClick={() => {setSwitchNetworkDialog(true); setOpenSideBar(false);}}>\n                    <img src={`/images/${appChainID === ETH_CHAIN_ID ? EthereumIcon: BSCIcon}`} />\n                    <span className={styles.btnConnectText}>\n                      {appChainID === ETH_CHAIN_ID ? 'Ethereum': 'BSC Mainnet'}\n                    </span>\n                  </button>\n                  <button\n                    className={`${styles.btn} ${styles.btnConnect}`}\n                    onClick={() => {\n                      if (!connectWalletLoading) {\n                        !currentAccount ? handleConnectWalletOpen(): handleDisconnectDialogOpen()\n                      }\n                    }}\n                    disabled={connectWalletLoading}\n                  >\n                {\n                  !connectWalletLoading ? (\n                    <>\n                      <span>\n                      {\n                        currentAccount && (!loginError ? `${balance} ${appChainID === ETH_CHAIN_ID ? \"ETH\": \"BNB\"}`: '0' )\n                      }\n                      </span>\n                      {\n                        !currentAccount && <img src={ `/images/${WalletIcon}`} />\n                      }\n                      <span className={`${styles.btnConnectText} ${currentAccount ? styles.btnAccount: ''}`}>\n                      {\n                        currentAccount && `${trimMiddlePartAddress(currentAccount)}` || \"Connect Wallet\"\n                      }\n                      </span>\n                      </>\n                  ): <BeatLoader color={'white'} css={css`margin-top: 3px`} size={10} />\n                }\n                </button>\n            </div>\n          </div>\n        <HeaderContext.Provider value={{ agreedTerms, setAgreedTerms }}>\n            <ConnectWalletModal opened={openConnectWallet as boolean} handleClose={handleConnectWalletClose}/>\n            <AppNetworkSwitch\n              opened={switchNetworkDialog}\n              handleClose={() => setSwitchNetworkDialog(false)}\n            />\n            <WalletDisconnect\n              opened={disconnectDialog}\n              handleClose={() => { setDisconnectDialog(false); setAgreedTerms(false); setOpenSideBar(false); }}\n              currentWallet={currentConnectedWallet}\n            />\n        </HeaderContext.Provider>\n        {\n          loginError && (\n            <div className={styles.loginErrorBanner}>\n              <img src=\"/images/red-warning.svg\" alt=\"red-warning icon\" />\n              <span className={styles.loginErrorBannerText}>\n                {loginError} Learn how to &nbsp;\n                <a href=\"https://help.1inch.exchange/en/articles/4966690-how-to-use-1inch-on-bsc-binance-smart-chain\" target=\"_blank\" className={styles.loginErrorGuide}>\n                  change network in wallet\n                </a>\n                &nbsp; or &nbsp;\n                <button\n                  className={styles.btnChangeAppNetwork}\n                  onClick={() => {setOpenSideBar(false); setSwitchNetworkDialog(true);}}\n                >\n                  Change App Network\n                </button>\n              </span>\n            </div>\n          )\n        }\n        {\n          (window.location.href.indexOf('buy-token') > -1) && !loginError && message != '' && <div className={styles.loginErrorBanner}>\n          <img src=\"/images/red-warning.svg\" alt=\"red-warning icon\" />\n          <span className={styles.loginErrorBannerText}>\n            {message}&nbsp;&nbsp;\n            <button\n              className={styles.btnChangeAppNetwork}\n              onClick={() => {setOpenSideBar(false); setSwitchNetworkDialog(true);}}\n            >\n              Change App Network\n            </button>\n          </span>\n        </div>\n        }\n      </div>\n    </>\n  );\n};\n\nexport default withWidth()(withRouter(HeaderDefaultLayout));\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/FooterLandingLayout/FooterLandingLayout.tsx",["1320","1321"],"import useStyles from './styles';\nimport { Link } from 'react-router-dom';\nconst byTokenLogo = '/images/logo-red-kite.svg';\n\nconst FooterLandingLayout = () => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.footer}>\n      <div className={styles.mainContent}>\n        <div className={styles.infoRedKite}>\n          <Link to={'/'}>\n            <img className={styles.logo} src={byTokenLogo} alt=\"\" />\n          </Link>\n          <p>Launch hand-picked projects and help them shine.</p>\n          <ul className={styles.shareLink}>\n            <li className={styles.teleGram}>\n              <a href=\"https://t.me/polkafoundry/\" target=\"_blank\"><i className=\"custom-icon-telegram\"></i></a>\n            </li>\n            <li className={styles.twitter}>\n              <a href=\"https://twitter.com/polkafoundry/\" target=\"_blank\"><i className=\"custom-icon-twitter\"></i></a>\n            </li>\n            {/* <li className={styles.facebook}>\n              <a href=\"#\"><i className=\"custom-icon-facebook\"></i></a>\n            </li>\n            <li className={styles.github}>\n              <a href=\"#\"><i className=\"custom-icon-github\"></i></a>\n            </li> */}\n          </ul>\n        </div>\n      </div>\n      <div className={styles.endContent}>\n        <p className={styles.copyRight}>Copyright © 2021 Icetea Labs. All rights reserved.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default FooterLandingLayout;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/MainDefaultLayout/MainDefaultLayout.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/wallet.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/accountAddress.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/styles.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/FooterLandingLayout/styles.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/MainDefaultLayout/styles.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/context/HeaderContext.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/WalletDisconnect/index.tsx",["1322","1323","1324"],"import { useContext } from 'react';\nimport { withStyles, Theme, createStyles, WithStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom'\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport Typography from '@material-ui/core/Typography';\nimport { ETH_CHAIN_ID } from '../../../../constants/network';\nimport { ConnectorNames } from '../../../../constants/connectors';\nimport { AppContext } from '../../../../AppContext';\nimport {withWidth, isWidthDown, isWidthUp} from '@material-ui/core';\nimport useStyles from './style';\nimport { trimMiddlePartAddress } from '../../../../utils/accountAddress';\nimport {useWeb3React} from \"@web3-react/core\";\nimport {checkIsWalletLink, disconnectWalletLink} from \"../../../../utils\";\n\nconst linkIcon = '/images/hyperlink.svg';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n      paddingTop: 0,\n      borderRadius: 50,\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: 'black',\n      backgroundColor: '#4B4B4B',\n      padding: 4,\n\n      \"&:hover\" : {\n        backgroundColor: '#D4D4D4'\n      }\n    },\n    svgIcon: {\n      fontSize: 5\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n  customClass: string\n}\n\nexport interface ComponentProps {\n  opened: boolean,\n  handleClose: () => void;\n  currentWallet: any;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, customClass, onClose, ...other } = props;\n\n  const customStyles = {\n    color: 'white',\n    padding: 0,\n  }\n\n  return (\n    <MuiDialogTitle disableTypography className={`${classes.root} ${customClass}`} {...other} style={customStyles}>\n      <Typography variant=\"h6\">{children}</Typography>\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    color: '#999999'\n  },\n}))(MuiDialogContent);\n\nconst WalletDisconnect: React.FC<ComponentProps> = (props: any) => {\n  const styles = useStyles();\n  const { logout: disconnectWallet } = useContext(AppContext);\n  const { appChainID } = useSelector((state: any) => state.appNetwork).data;\n  const { opened, handleClose, currentWallet } = props;\n\n  const walletName = currentWallet && currentWallet.title;\n  const address = currentWallet ? currentWallet.addresses[0] : '';\n  const balance = address ? currentWallet.balances[address]: 0;\n  const networkName = appChainID === ETH_CHAIN_ID ? 'Ethereum': 'Binance Smart Chain';\n  const currency = appChainID === ETH_CHAIN_ID ? 'ETH': 'BNB'\n  const walletIconPath = currentWallet ? `/images/${currentWallet.typeId}.svg`: '';\n\n  const {connector} = useWeb3React();\n  const handleAccountLogout = async () => {\n    if (walletName === ConnectorNames.WalletConnect && localStorage.getItem(\"walletconnect\")) {\n      localStorage.removeItem(\"walletconnect\");\n    }\n\n    // Disconnect WalletLink\n    if (checkIsWalletLink(connector)) {\n      connector && disconnectWalletLink(connector);\n    }\n\n    handleClose();\n    disconnectWallet && disconnectWallet();\n  }\n\n  return (\n    <Dialog open={opened} onClose={handleClose} className={styles.dialog}>\n      <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} customClass={styles.dialogTitle}>\n        <span>\n          Account&nbsp;&nbsp;\n          <Link to=\"/account\"><img src={linkIcon}/></Link>\n        </span>\n      </DialogTitle>\n      <DialogContent className={styles.dialogContent}>\n        <div className={styles.accountDetails}>\n          <div className={styles.accountDetailsIcon}>\n            <img src=\"images/logo-red-kite.svg\" style={{ width: '100%' }}/>\n          </div>\n          <div className={styles.accountDetailBlocks}>\n            <div className={styles.accountDetailBlock}>\n              <span className={styles.accountDetailBlockLabel}>\n                Balance\n              </span>\n              <p className={styles.accountDetailBlockText}>{balance} {currency}</p>\n            </div>\n            <div className={styles.accountDetailBlock}>\n              <span className={styles.accountDetailBlockLabel}>\n                Network\n              </span>\n              <p className={styles.accountDetailBlockText}>{networkName}</p>\n            </div>\n            <div className={styles.accountDetailBlock}>\n              <span className={styles.accountDetailBlockLabel}>\n                Wallet\n              </span>\n              <p className={styles.accountDetailBlockText}>{walletName}</p>\n            </div>\n          </div>\n        </div>\n        <div className={styles.accountDetailAddress}>\n          {\n            walletIconPath && <img src={walletIconPath} alt={walletName} className={styles.walletNameIcon} />\n          }\n          <span className={styles.accountDetailAddressText}>\n            {isWidthUp('sm', props.width) && address}\n            {isWidthDown('xs', props.width) && trimMiddlePartAddress(address, 10)}\n          </span>\n        </div>\n        <div className={styles.accountDetailCta}>\n          <div className={styles.accountDetailDisconnect} onClick={handleAccountLogout}>\n            <img src=\"/images/disconnect.svg\" className={styles.accountDetailCtaIcon} />\n            <span>Disconnect</span>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n\n}\n\nexport default withWidth()(WalletDisconnect);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/AppNetworkSwitch/index.tsx",["1325"],"import { useContext } from 'react';\nimport { withStyles, Theme, createStyles, WithStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport Typography from '@material-ui/core/Typography';\nimport { APP_NETWORKS, appNetworkType } from '../../../../constants/network';\nimport { AppContext } from '../../../../AppContext';\nimport ConnectWalletBox from '../ConnectWalletBox';\n\nimport useStyles from './style';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n      paddingTop: 0,\n      borderRadius: 50,\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: 'black',\n      backgroundColor: '#4B4B4B',\n      padding: 4,\n\n      \"&:hover\" : {\n        backgroundColor: '#D4D4D4'\n      }\n    },\n    svgIcon: {\n      fontSize: 5\n    }\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n  customClass: string\n}\n\nexport interface ComponentProps {\n  opened: boolean,\n  handleClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, customClass, onClose, ...other } = props;\n\n  const customStyles = {\n    color: 'white',\n  }\n\n  return (\n    <MuiDialogTitle disableTypography className={`${classes.root} ${customClass}`} {...other} style={customStyles}>\n      <Typography variant=\"h6\">{children}</Typography>\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    color: '#999999'\n  },\n}))(MuiDialogContent);\n\nconst AppNetworkSwitch: React.FC<ComponentProps> = (props: ComponentProps) => {\n  const styles = useStyles();\n  const { opened, handleClose } = props;\n  const { appNetworkLoading } = useContext(AppContext);\n\n  return (\n    <Dialog open={opened} onClose={handleClose} className={styles.dialog}>\n      <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} customClass={styles.dialogTitle} >\n        Switch Network\n      </DialogTitle>\n      <DialogContent className={styles.dialogContent}>\n        {\n          Object.keys(APP_NETWORKS).map((key: string) => {\n            const network = APP_NETWORKS[key as appNetworkType];\n            return <ConnectWalletBox \n              key={key} \n              appNetwork={network} \n              handleClose={handleClose}\n              isAppNetwork \n              forceEnable \n            />\n          })\n        }\n        {\n          appNetworkLoading && (\n            <div className={styles.loadingIcon}>\n              <img src=\"/images/loading.png\" alt=\"loading image\" />\n            </div>\n          )\n        }\n      </DialogContent>\n    </Dialog>\n  )\n\n}\n\nexport default AppNetworkSwitch;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/ConnectWalletModal/index.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/ButtonLink/index.tsx",["1326"],"import React from 'react'\nimport { Link } from 'react-router-dom'\nimport useStyles from './style'\n\ntype IButton = {\n  text: string;\n  icon?: any;\n  to: string;\n  spacing?: number;\n  className?: string;\n  onClick?: any,\n}\n\nconst ButtonLink: React.FC<IButton> = (props: IButton) => {\n  const { text, icon, spacing = 10, to, className = '', onClick } = props;\n  const classes = useStyles({\n    spacing\n  });\n\n  const cssClass = className || classes.button;\n\n  return (\n    <Link\n      className={cssClass}\n      {...( onClick && { onClick })}\n      to={to}\n    >\n      <p className={classes.buttonContent}>\n          {\n            icon && <img src={`/images/${icon}`} width={20} />\n          }\n          <span className={classes.buttonText}>{text}</span>\n      </p>\n    </Link>\n  )\n}\n\nexport default ButtonLink;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/ButtonLink/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/ConnectWalletModal/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/AppNetworkSwitch/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/WalletDisconnect/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/ConnectWalletBox/index.tsx",["1327","1328","1329","1330"],"import React, { useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AbstractConnector } from '@web3-react/abstract-connector';\nimport mobile from 'is-mobile';\nimport { settingAppNetwork, NetworkUpdateType } from '../../../../store/actions/appNetwork';\nimport {ConnectorNames, WalletInfo} from '../../../../constants/connectors';\nimport { NetworkInfo, APP_NETWORKS_NAME } from '../../../../constants/network';\nimport { HeaderContext, HeaderContextType } from '../context/HeaderContext';\nimport useStyles from './style';\n\ninterface ConnectWalletBoxPropsType {\n  appNetwork?: NetworkInfo;\n  wallet?: WalletInfo;\n  isAppNetwork?: boolean;\n  handleProviderChosen?: (name: string,  connector: AbstractConnector) => void;\n  connectWalletLoading?: boolean,\n  walletName?: (string | undefined)[],\n  forceEnable?: boolean\n  handleClose?: () => void\n}\n\nconst ConnectWalletBox: React.FC<ConnectWalletBoxPropsType> = (props: ConnectWalletBoxPropsType) => {\n  const styles = useStyles();\n  const dispatch = useDispatch();\n\n  const { appNetwork, isAppNetwork = false, handleProviderChosen, wallet, walletName, connectWalletLoading, forceEnable, handleClose } = props;\n  const { appChainID } = useSelector((state: any) => state.appNetwork).data;\n  const { agreedTerms } = useContext<HeaderContextType>(HeaderContext);\n\n  const handleNetworkChange = (appNetwork: boolean, updatedVal: string, agreedTerms: boolean = false) => {\n    if (agreedTerms || forceEnable) {\n      if (appNetwork) {\n        dispatch(settingAppNetwork(NetworkUpdateType.App, updatedVal));\n        handleClose && handleClose();\n        return;\n      }\n\n      wallet && handleProviderChosen && handleProviderChosen(wallet.name, wallet.connector as AbstractConnector);\n    }\n  }\n\n  const pointerStyle = {\n    cursor: `${(agreedTerms || forceEnable) ? 'pointer': 'initial'}`\n  }\n\n  const render = () => {\n    if (appNetwork) {\n      const { name, icon, id, disableIcon } = appNetwork;\n      const temporaryDisable = false;//name === APP_NETWORKS_NAME.BSC;\n\n      return (\n        <div\n          className={`${styles.walletBox}`}\n          onClick={() => {\n            !temporaryDisable && handleNetworkChange(isAppNetwork, id as string, agreedTerms)\n          }}\n          style={pointerStyle}\n        >\n          <div className={styles.walletBoxIconWrap}>\n            {\n              <img src={`${((agreedTerms || forceEnable) && !temporaryDisable) ? icon: disableIcon}`} style={{ width: agreedTerms ? 40: 50 }} alt={name} className={styles.walletBoxIcon} />\n            }\n            {\n              appChainID === id &&\n                <img\n                  src={`/images/circle_done.svg`}\n                  style={{ color: '#212a3b' }}\n                  className={styles.walletBoxCheck}\n                />\n            }\n          </div>\n          <p className={styles.walletBoxText}>{name}</p>\n        </div>\n      )\n    }\n\n    if (wallet) {\n      const { name, icon, disableIcon } = wallet;\n\n      return (\n        <div\n          className={`${styles.walletBox}`}\n          onClick={() => {\n            if (mobile() && wallet?.deepLink) {\n              window.open(wallet.deepLink);\n              return;\n            }\n\n            handleNetworkChange(isAppNetwork, name, agreedTerms)\n          }}\n          style={pointerStyle}\n        >\n          <div className={styles.walletBoxIconWrap}>\n            {\n              connectWalletLoading && walletName && walletName.indexOf(name) >= 0 ? <img src=\"/images/loading.png\" />\n              :  <img\n                  src={`${agreedTerms ? icon: disableIcon}`}\n                  style={{ width: agreedTerms ? 40: 50 }}\n                  alt={name}\n                  className={styles.walletBoxIcon}\n                />\n            }\n          </div>\n          <p className={styles.walletBoxText}>{name}</p>\n        </div>\n      )\n    }\n\n    return null;\n  }\n\n  return (render())\n}\n\nexport default ConnectWalletBox;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/ConnectWalletBox/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/AccountInformation/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/TierInfomation/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ManageTier/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalVerifyEmail/index.tsx",["1331","1332","1333","1334","1335","1336","1337","1338","1339","1340","1341","1342","1343","1344","1345","1346"],"import { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport useStyles from './style';\nimport useCommonStyle from '../../../styles/CommonStyle';\nimport { useWeb3React } from '@web3-react/core';\nimport useWalletSignature from '../../../hooks/useWalletSignature';\nimport axios from 'axios';\nimport { alertFailure, alertSuccess } from '../../../store/actions/alert';\nimport {Dialog, DialogTitle, DialogContent, DialogActions} from '@material-ui/core';\n\nconst closeIcon = '/images/icons/close.svg';\nconst REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst ModalVerifyEmail = (props: any) => {\n  const styles = useStyles();\n  const commonStyles = useCommonStyle();\n  const dispatch = useDispatch();\n\n  const { account: connectedAccount } = useWeb3React();\n  const { signature, signMessage, setSignature, error } = useWalletSignature();\n  const [inputEmail, setInputEmail] = useState('');\n  const [invalidEmail, setInvalidEmail] = useState(false);\n  const [disableVerify, setDisableVerify] = useState(true);\n\n  const {\n    setOpenModalVerifyEmail,\n    email,\n    setEmail,\n    setEmailVeryfied,\n    open\n  } = props;\n\n  useEffect(() => {\n    setInputEmail(email);\n  }, [email])\n\n  useEffect(() => {\n    console.log('signature', signature)\n    if(signature != '') {\n      const data = {\n        email: inputEmail,\n        signature: signature,\n        wallet_address: connectedAccount || ''\n      }\n      console.log(data)\n      const options = {\n        headers: {\n          msgSignature: process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE\n        }\n      }\n      axios.post(`${process.env.REACT_APP_API_BASE_URL}/user/register-email`, data, options)\n      .then(res => {\n        if(res.data.status == 200) {\n          dispatch(alertSuccess(res.data.message));\n          window.location.reload();\n          setEmail(inputEmail)\n          setOpenModalVerifyEmail(false);\n          setEmailVeryfied(1);\n        } else if(res.data.status == 400) {\n          dispatch(alertFailure(res.data.message));\n        }\n      }).catch(() => {\n        dispatch(alertFailure('Email register failure, please try again later'));\n      })\n      setSignature('');\n    }\n  }, [signature])\n\n  useEffect(() => {\n    console.log(REGEX.test(inputEmail) )\n    if(!REGEX.test(inputEmail) || inputEmail == '') setDisableVerify(true);\n    else setDisableVerify(false);\n  }, [inputEmail])\n\n  const handleVerifyEmail = async () => {\n    if(inputEmail != '' && REGEX.test(inputEmail) == false || inputEmail == '') {\n      setInvalidEmail(true);\n      return;\n    }\n    setInvalidEmail(false);\n    await signMessage();\n  }\n\n  return (\n    <Dialog\n      open={open}\n      keepMounted\n      onClose={() => setOpenModalVerifyEmail(false)}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n      className={commonStyles.modal + ' ' + styles.modalVerifyEmail}\n    >\n      <div className=\"modal-content\">\n        <DialogTitle id=\"alert-dialog-slide-title\" className=\"modal-content__head\">\n          <img src={closeIcon} className=\"btn-close\" onClick={() => setOpenModalVerifyEmail(false)}/>\n          <h2 className=\"title\">Verify Email</h2>\n        </DialogTitle>\n        <DialogContent className=\"modal-content__body\">\n          <div className=\"subtitle\">\n            <span>Email</span>\n          </div>\n          <div className=\"input-group\">\n            <input\n              type=\"text\"\n              value={inputEmail}\n              onChange={e => setInputEmail(e.target.value)}\n              placeholder=\"Please enter email\"\n              maxLength={190}\n            />\n          </div>\n          {invalidEmail && <span style={{color: '#D01F36'}}>Invalid Email</span>}\n        </DialogContent>\n        <DialogActions className=\"modal-content__foot\">\n          <button\n            className={\"btn-approve\" + ((disableVerify) ? ' disabled': '')}\n            onClick={() => handleVerifyEmail()}\n            disabled={disableVerify}\n          >Verify</button>\n          <button\n            className=\"btn-cancel\"\n            onClick={() => setOpenModalVerifyEmail(false)}\n          >Cancel</button>\n        </DialogActions>\n      </div>\n    </Dialog>\n  );\n};\n\nexport default ModalVerifyEmail;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalTransaction/index.tsx",["1347","1348","1349","1350"],"import _, { set } from 'lodash';\nimport useStyles from './style';\nimport useCommonStyle from '../../../styles/CommonStyle';\nimport {Dialog, DialogTitle, DialogContent, DialogActions} from '@material-ui/core';\n\nconst closeIcon = '/images/icons/close.svg'\n\nconst ModalTransaction = (props: any) => {\n  const styles = useStyles();\n  const commonStyles = useCommonStyle();\n\n  const {\n    transactionHashes,\n    setTransactionHashes,\n    open\n  } = props;\n\n  const handleClose = () => {\n    let array = [...transactionHashes];\n    array.shift();\n    setTransactionHashes(array);\n    console.log(array)\n  }\n\n  return (\n    <Dialog\n      open={open}\n      keepMounted\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n      className={commonStyles.modal + ' ' + styles.modalTransaction}\n    >\n      <div className=\"modal-content\">\n        <DialogTitle id=\"alert-dialog-slide-title\" className=\"modal-content__head\">\n        <img src={closeIcon} className=\"btn-close\" onClick={handleClose}/>\n            <h2 className=\"title\">Transaction Submitted</h2>\n        </DialogTitle>\n        <DialogContent className=\"modal-content__body\">\n          <div className=\"subtitle\">\n            <span>TXn Hash</span>\n          </div>\n          <div className=\"input-group\">\n            <input\n              type=\"text\"\n              value={transactionHashes[0].tnx}\n              disabled\n            />\n          </div>\n        </DialogContent>\n        <DialogActions className=\"modal-content__foot\">\n          <a\n            href={`https://etherscan.io/tx/${transactionHashes[0].tnx}`}\n            target=\"_blank\"\n            className={commonStyles.nnb1418d}\n          >View on Etherscan</a>\n        </DialogActions>\n        {transactionHashes[0].isApprove && <p className={styles.notice}>Please be patient and no need to approve again, you can check the transaction status on Etherscan.</p>}\n      </div>\n    </Dialog>\n  );\n};\n\nexport default ModalTransaction;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalWithdraw/index.tsx",["1351","1352","1353","1354","1355","1356","1357","1358","1359","1360","1361","1362","1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388"],"import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _, { gt } from 'lodash';\nimport useStyles from './style';\nimport useCommonStyle from '../../../styles/CommonStyle';\nimport { withdraw, getWithdrawFee } from '../../../store/actions/sota-tiers';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { CONVERSION_RATE } from '../../../constants';\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport NumberFormat from 'react-number-format';\nimport {Dialog, DialogTitle, DialogContent, DialogActions} from '@material-ui/core';\n\nconst closeIcon = '/images/icons/close.svg';\nconst REGEX_NUMBER = /^-?[0-9]{0,}[.]{0,1}[0-9]{0,6}$/;\n\nconst ModalWithdraw = (props: any) => {\n  const styles = useStyles();\n  const dispatch = useDispatch();\n  const commonStyles = useCommonStyle();\n\n  const [withdrawAmount, setWithdrawAmount] = useState('');\n  const [disableWithdraw, setDisableWithdraw] = useState(true);\n\n  const { data: userInfo = {} } = useSelector((state: any) => state.userInfo);\n  const { data: withdrawFee = {} } = useSelector((state: any) => state.withdrawFee);\n  const { account: connectedAccount, library } = useWeb3React();\n  const { data: appChainID } = useSelector((state: any) => state.appNetwork);\n  const { data: rates } = useSelector((state: any) => state.rates);\n\n  const {\n    setOpenModalWithdraw,\n    setOpenModalTransactionSubmitting,\n    listTokenDetails,\n    open,\n    totalStaked\n  } = props;\n  const [currentToken, setCurrentToken] = useState(undefined) as any;\n  const [currentStaked, setCurrentStaked] = useState('0');\n  const [currentRate, setCurrentRate] = useState(0);\n\n  const setDefaultToken = () => {\n    setCurrentToken(listTokenDetails[0])\n    setCurrentStaked(userInfo.pkfStaked)\n    setCurrentRate(1)\n  }\n\n  useEffect(() => {\n    setDefaultToken()\n  }, [userInfo, listTokenDetails])\n\n  const onWithDraw = () => {\n    if(disableWithdraw) return\n    dispatch(withdraw(connectedAccount, withdrawAmount, library, currentToken.address));\n    setOpenModalTransactionSubmitting(true);\n    setOpenModalWithdraw(false);\n    setWithdrawAmount('');\n    setDefaultToken();\n  }\n\n  const handleClose = () => {\n    setOpenModalWithdraw(false);\n    setWithdrawAmount('');\n    setDefaultToken();\n  }\n\n  useEffect(() => {\n    if(withdrawAmount === '' || withdrawAmount === '0') {\n      setDisableWithdraw(true)\n      return\n    }\n    if(!connectedAccount) return\n    if(!isNaN(parseFloat(currentStaked))\n      && !isNaN(parseFloat(withdrawAmount)))\n    {\n      const staked = new BigNumber(currentStaked).multipliedBy(new BigNumber(10).pow(18))\n      const amount = new BigNumber(withdrawAmount).multipliedBy(new BigNumber(10).pow(18))\n      const zero = new BigNumber('0')\n      setDisableWithdraw(staked.lt(amount) || amount.lte(zero));\n    }\n  }, [connectedAccount, userInfo, withdrawAmount, currentToken]);\n\n  useEffect(() => {\n    dispatch(getWithdrawFee(connectedAccount, withdrawAmount === '' ? '0' : withdrawAmount))\n  }, [withdrawAmount])\n\n  useEffect(() => {\n    if(listTokenDetails.length == 0 || rates.length == 0 || !currentToken) return\n    if(currentToken?.symbol == listTokenDetails[0]?.symbol) {\n      setCurrentRate(1)\n    } else if(currentToken?.symbol == listTokenDetails[1]?.symbol) \n    {\n      setCurrentRate(parseFloat(rates?.data[0]?.rate))\n    } else if(currentToken?.symbol == listTokenDetails[2]?.symbol)\n    {\n      setCurrentRate(parseFloat(rates?.data[1]?.rate))\n    }\n  }, [rates, currentToken, listTokenDetails])\n\n  const handleSelectToken = (e: any) => {\n    const tokens = listTokenDetails.filter((tokenDetails: any) => {\n      return tokenDetails.symbol == e.target.value\n    })\n    setCurrentToken(tokens[0])\n    if(e.target.value == 'PKF') {\n      setCurrentStaked(userInfo.pkfStaked)\n    } else if(e.target.value == CONVERSION_RATE[0].key && appChainID.appChainID == '5'\n      || e.target.value == CONVERSION_RATE[0].keyMainnet && appChainID.appChainID == '1')\n    {\n      setCurrentStaked(userInfo.uniStaked)\n    } else if(e.target.value == CONVERSION_RATE[1].key && appChainID.appChainID == '5'\n      || e.target.value == CONVERSION_RATE[1].keyMainnet && appChainID.appChainID == '1')\n    {\n      setCurrentStaked(userInfo.mantraStaked)\n    }\n  }\n  const handleChange = (e: any) => {\n    const value = e.target.value.replaceAll(\",\", \"\")\n    if (value === '' || REGEX_NUMBER.test(value)) {\n      setWithdrawAmount(value);\n    }\n  }\n\n  return (\n    <Dialog\n      open={open}\n      keepMounted\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n      className={commonStyles.modal + ' ' + styles.modalWithdraw}\n    >\n      <div className=\"modal-content\">\n        <DialogTitle id=\"alert-dialog-slide-title\" className=\"modal-content__head\">\n          <img src={closeIcon} className=\"btn-close\" onClick={handleClose}/>\n          <h2 className=\"title\">You have {numberWithCommas(totalStaked)} {listTokenDetails[0]?.symbol} staked</h2>\n        </DialogTitle>\n        <DialogContent className=\"modal-content__body\">\n          {open && <select name=\"select_token\" id=\"select-token\" onChange={(e) => handleSelectToken(e)}>\n            {listTokenDetails && listTokenDetails.map((tokenDetails: any, index: number) => {\n              return <option value={tokenDetails?.symbol} key={index}>{\n                index === 0 ? 'Polkafoundry (PKF)' : `${CONVERSION_RATE[index - 1].name} (${CONVERSION_RATE[index - 1].symbol})`\n              }</option>\n            })}\n          </select>}\n          <div className={styles.group}>\n            <div className=\"balance\">\n              <div>\n                <span>Your wallet staked</span>\n                <span>{ _.isEmpty(currentStaked) ? 0 : numberWithCommas(currentStaked) } {\n                  currentToken?.symbol == 'PKF' ? 'PKF'\n                  : (currentToken?.symbol == CONVERSION_RATE[0].keyMainnet && appChainID.appChainID == '1' ||\n                    currentToken?.symbol == CONVERSION_RATE[0].key && appChainID.appChainID == '5') ? CONVERSION_RATE[0]?.symbol : CONVERSION_RATE[1]?.symbol\n                }</span>\n              </div>\n            </div>\n            <div className=\"subtitle\">\n              <span>Input</span>\n            </div>\n            <div className=\"input-group\">\n              <NumberFormat \n                type=\"text\"\n                placeholder={'0'} \n                thousandSeparator={true}  \n                onChange={e => handleChange(e)} \n                decimalScale={6}\n                value={withdrawAmount}\n                min={0}\n                maxLength={255}\n              />\n              <div>\n                <button className=\"btn-max\" id=\"btn-max-withdraw\" onClick={() => setWithdrawAmount(currentStaked)}>MAX</button>\n              </div>\n            </div>\n            <div className=\"balance\" style={{marginTop: '10px'}}>\n              <div>\n                <span>Equivalent</span>\n                <span>{numberWithCommas((parseFloat(withdrawAmount) * currentRate || 0).toString())} {listTokenDetails[0]?.symbol}</span>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n        <DialogActions className=\"modal-content__foot\">\n          <button\n            className={\"btn-staking \" + (disableWithdraw ? 'disabled' : '')}\n            onClick={onWithDraw}\n          >Unstake</button>\n          <button\n            className=\"btn-cancel\"\n            onClick={handleClose}\n          >Cancel</button>\n        </DialogActions>\n      </div>\n    </Dialog>\n  );\n};\n\nexport default ModalWithdraw;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalDeposit/index.tsx",["1389","1390","1391","1392","1393","1394","1395","1396","1397","1398","1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413","1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426","1427"],"import { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport useStyles from './style';\nimport useCommonStyle from '../../../styles/CommonStyle';\nimport { approve } from '../../../store/actions/sota-token';\nimport { deposit } from '../../../store/actions/sota-tiers';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { CONVERSION_RATE } from '../../../constants';\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport NumberFormat from 'react-number-format';\nimport {Dialog, DialogTitle, DialogContent, DialogActions} from '@material-ui/core';\n\nconst closeIcon = '/images/icons/close.svg';\nconst REGEX_NUMBER = /^-?[0-9]{0,}[.]{0,1}[0-9]{0,6}$/;\n\nconst ModalDeposit = (props: any) => {\n  const styles = useStyles();\n  const dispatch = useDispatch();\n  const commonStyles = useCommonStyle();\n\n  const [depositAmount, setDepositAmount] = useState('');\n  const [disableDeposit, setDisableDeposit] = useState(true);\n\n  const { data: allowance = 0 } = useSelector((state: any) => state.allowance);\n  const { data: userInfo = {} } = useSelector((state: any) => state.userInfo);\n  const { data: balance = {} } = useSelector((state: any) => state.balance);\n  const { loading } = useSelector((state: any) => state.approve)\n  const { account: connectedAccount, library } = useWeb3React();\n  const { data: appChainID } = useSelector((state: any) => state.appNetwork);\n  const { data: rates } = useSelector((state: any) => state.rates);\n\n  const {\n    setOpenModalDeposit,\n    setOpenModalTransactionSubmitting,\n    listTokenDetails,\n    open,\n    totalStaked\n  } = props;\n  const [currentToken, setCurrentToken] = useState(undefined) as any;\n  const [currentBalance, setCurrentBalance] = useState('0');\n  const [currentStaked, setCurrentStaked] = useState('0');\n  const [currentAllowance, setCurrentAllowance] = useState('0');\n  const [currentRate, setCurrentRate] = useState(0);\n\n  const setDefaultToken = () => {\n    setCurrentToken(listTokenDetails[0])\n    setCurrentBalance(balance.pkf)\n    setCurrentStaked(userInfo.pkfStaked)\n    setCurrentAllowance(allowance.pkf)\n    setCurrentRate(1)\n  }\n\n  useEffect(() => {\n    setDefaultToken();\n  }, [balance, userInfo, listTokenDetails])\n\n  useEffect(() => {\n    if(depositAmount === '' || depositAmount === '0') {\n      setDisableDeposit(true)\n      return\n    }\n    if(!connectedAccount) return\n    if(!isNaN(parseFloat(currentBalance))\n      && !isNaN(parseFloat(depositAmount)))\n    {\n      const tokenBalance = new BigNumber(currentBalance).multipliedBy(new BigNumber(10).pow(18))\n      const amount = new BigNumber(depositAmount).multipliedBy(new BigNumber(10).pow(18))\n      const zero = new BigNumber('0')\n      setDisableDeposit(tokenBalance.lt(amount) || amount.lte(zero))\n    }\n  }, [connectedAccount, balance, depositAmount, currentToken]);\n\n  useEffect(() => {\n    if(listTokenDetails.length == 0 || rates.length == 0 || !currentToken) return\n    if(currentToken?.symbol == listTokenDetails[0]?.symbol) {\n      setCurrentRate(1)\n    } else if(currentToken?.symbol == listTokenDetails[1]?.symbol)\n    {\n      setCurrentRate(parseFloat(rates?.data[0]?.rate))\n    } else if(currentToken?.symbol == listTokenDetails[2]?.symbol)\n    {\n      setCurrentRate(parseFloat(rates?.data[1]?.rate))\n    }\n  }, [rates, currentToken, listTokenDetails])\n\n  const onDeposit = () => {\n    if(disableDeposit) return\n    dispatch(deposit(connectedAccount, depositAmount, library, currentToken.address));\n    setOpenModalTransactionSubmitting(true);\n    setOpenModalDeposit(false);\n    setDepositAmount('')\n    setDefaultToken();\n  }\n\n  const onApprove = () => {\n    dispatch(approve(connectedAccount, library, currentToken.address));\n    setOpenModalTransactionSubmitting(true);\n    setOpenModalDeposit(false);\n    setDepositAmount('')\n    setDefaultToken();\n  }\n\n  const handleClose = () => {\n    setOpenModalDeposit(false);\n    setDepositAmount('')\n    setDefaultToken();\n  }\n\n  const handleSelectToken = (e: any) => {\n    const tokens = listTokenDetails.filter((tokenDetails: any) => {\n      return tokenDetails.symbol == e.target.value\n    })\n    setCurrentToken(tokens[0])\n    if(e.target.value == 'PKF') {\n      setCurrentBalance(balance.pkf)\n      setCurrentStaked(userInfo.pkfStaked)\n      setCurrentAllowance(allowance.pkf)\n    } else if(e.target.value == CONVERSION_RATE[0].key && appChainID.appChainID == '5'\n      || e.target.value == CONVERSION_RATE[0].keyMainnet && appChainID.appChainID == '1')\n    {\n      setCurrentBalance(balance.uni)\n      setCurrentStaked(userInfo.uniStaked)\n      setCurrentAllowance(allowance.uni)\n    } else if(e.target.value == CONVERSION_RATE[1].key && appChainID.appChainID == '5'\n      || e.target.value == CONVERSION_RATE[1].keyMainnet && appChainID.appChainID == '1')\n    {\n      setCurrentBalance(balance.mantra)\n      setCurrentStaked(userInfo.mantraStaked)\n      setCurrentAllowance(allowance.mantra)\n    }\n  }\n  const handleChange = (e: any) => {\n    const value = e.target.value.replaceAll(\",\", \"\")\n    if (value === '' || REGEX_NUMBER.test(value)) {\n      setDepositAmount(value);\n    }\n  }\n\n  return (\n    <Dialog\n      open={open}\n      keepMounted\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n      className={commonStyles.modal + ' ' + styles.modalDeposit}\n    >\n      <div className=\"modal-content\">\n        <DialogTitle id=\"alert-dialog-slide-title\" className=\"modal-content__head\">\n          <img src={closeIcon} className=\"btn-close\" onClick={handleClose}/>\n          <h2 className=\"title\">You have {numberWithCommas(totalStaked)} {listTokenDetails[0]?.symbol} staked</h2>\n          <p className={styles.description}>{currentAllowance == '0' ? 'You need to Approve once (and only once) before you can start staking.'\n            : 'You have approved. Click Stake to stake.'}\n          </p>\n        </DialogTitle>\n        <DialogContent className=\"modal-content__body\">\n          {open && <select name=\"select_token\" id=\"select-token\" onChange={(e) => handleSelectToken(e)}>\n            {listTokenDetails && listTokenDetails.map((tokenDetails: any, index: number) => {\n              return <option value={tokenDetails?.symbol} key={index}>{\n                index === 0 ? 'Polkafoundry (PKF)' : `${CONVERSION_RATE[index - 1].name} (${CONVERSION_RATE[index - 1].symbol})`\n              }</option>\n            })}\n          </select>}\n\n          <div className={styles.group}>\n            <div className=\"balance\">\n              <div>\n                <span>Your wallet balance</span>\n                <span>{ !currentBalance ? 0 : numberWithCommas(currentBalance) } {\n                  currentToken?.symbol == 'PKF' ? 'PKF'\n                  : (appChainID.appChainID == '5' && currentToken?.symbol == CONVERSION_RATE[0].key ||\n                    appChainID.appChainID == '1' && currentToken?.symbol == CONVERSION_RATE[0].keyMainnet) ? CONVERSION_RATE[0]?.symbol : CONVERSION_RATE[1]?.symbol\n                }</span>\n              </div>\n            </div>\n            <div className=\"subtitle\">\n              <span>Input</span>\n            </div>\n            <div className=\"input-group\">\n              <NumberFormat\n                type=\"text\"\n                placeholder={'0'}\n                thousandSeparator={true}\n                onChange={e => handleChange(e)}\n                decimalScale={6}\n                value={depositAmount}\n                min={0}\n                maxLength={255}\n              />\n              <div>\n                <button className=\"btn-max\" id=\"btn-max-deposit\" onClick={() => setDepositAmount(currentBalance)}>MAX</button>\n              </div>\n            </div>\n            <div className=\"balance\" style={{marginTop: '10px'}}>\n              <div>\n                <span>Equivalent</span>\n                <span>{numberWithCommas((parseFloat(depositAmount) * currentRate || 0).toString())} {listTokenDetails[0]?.symbol}</span>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n        <DialogActions className=\"modal-content__foot\">\n          {currentAllowance=='0' ? <button\n            className={\"btn-approve\" + (loading ? 'disabled' : '')}\n            onClick={onApprove}\n            disabled={loading}\n          >Approve</button> : <button\n            className={\"btn-staking \" + (disableDeposit ? 'disabled' : '')}\n            onClick={onDeposit}\n          >Stake</button>}\n          <button\n            className=\"btn-cancel\"\n            onClick={handleClose}\n          >Cancel</button>\n        </DialogActions>\n      </div>\n    </Dialog>\n  );\n};\n\nexport default ModalDeposit;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalTransaction/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalDeposit/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalWithdraw/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/AccountV2/ModalVerifyEmail/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useWalletSignature.ts",["1428"],"import { useState, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useDispatch } from 'react-redux';\nimport { ethers } from 'ethers';\n\nimport { TRANSACTION_ERROR_MESSAGE } from '../constants/alert';\nimport { alertFailure } from '../store/actions/alert';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { ConnectorNames, connectorNames } from '../constants/connectors';\n\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst rawMessage = MESSAGE_INVESTOR_SIGNATURE;\nconst rawMessageLength = new Blob([rawMessage]).size\nconst message = ethers.utils.toUtf8Bytes(\"\\x19Ethereum Signed Message:\\n\" + rawMessageLength + rawMessage)\nconst messageHash = ethers.utils.keccak256(message);\n\nexport const getParamsWithConnector = (connectedAccount: string) => ({\n  [ConnectorNames.BSC]: {\n    method: 'eth_sign',\n    params: [connectedAccount, MESSAGE_INVESTOR_SIGNATURE]\n  },\n  [ConnectorNames.WalletConnect]: {\n    method: 'eth_sign',\n    params: [connectedAccount, MESSAGE_INVESTOR_SIGNATURE]\n  },\n  [ConnectorNames.WalletLinkConnect]: {\n    method: 'eth_sign',\n    params: [connectedAccount, MESSAGE_INVESTOR_SIGNATURE]\n  },\n  [ConnectorNames.Fortmatic]: {\n    method: 'personal_sign',\n    params: [MESSAGE_INVESTOR_SIGNATURE, connectedAccount]\n  },\n  [ConnectorNames.MetaMask]: {\n    method: 'personal_sign',\n    params: [MESSAGE_INVESTOR_SIGNATURE, connectedAccount]\n  },\n})\n\nconst useWalletSignature = () => {\n  const dispatch = useDispatch();\n  const connector = useTypedSelector(state => state.connector).data;\n  const { library, account: connectedAccount } = useWeb3React();\n  const [error, setError] = useState(\"\");\n  const [signature, setSignature] = useState(\"\");\n\n  const signMessage = useCallback(async () => {\n    try {\n      if (connectedAccount && library && connector) {\n        const paramsWithConnector = getParamsWithConnector(connectedAccount)[connector as connectorNames];\n        const provider = library.provider;\n\n        setError(\"\");\n\n        if (connector === ConnectorNames.WalletConnect) {\n          const params = [\n            connectedAccount,\n            messageHash\n          ]\n          await (library as any).provider.enable();\n\n          var signature = await (library as any).provider.wc.signMessage(params);\n          signature && setSignature(signature);\n          console.log(signature);\n        } else if (connector === ConnectorNames.WalletLinkConnect) {\n          console.log('WalletLinkConnect Provider===========>', provider, ConnectorNames);\n          const params = [\n            MESSAGE_INVESTOR_SIGNATURE,\n            connectedAccount,\n          ]\n          await (library as any).provider.enable();\n          const wlProvider = (library as any).provider;\n          console.log('wlProvider', wlProvider);\n\n          const signature = await wlProvider._personal_sign(params);\n          console.log('signature', signature);\n          signature && signature.result && setSignature(signature.result);\n        } else {\n          await (provider as any).sendAsync({\n            method: paramsWithConnector.method,\n            params: paramsWithConnector.params\n          }, async function(err: Error, result: any) {\n            if (err || result.error) {\n              const errMsg = (err.message || (err as any).error) || result.error.message\n              console.log('Error when signing message: ', errMsg);\n              dispatch(alertFailure(TRANSACTION_ERROR_MESSAGE));\n              setError(errMsg);\n            } else {\n              console.log(result.result);\n              result.result && setSignature(result.result);\n            }\n          })\n        }\n      }\n    } catch(err) {\n      console.log('[ERROR] - signMessage:', err);\n      dispatch(alertFailure(TRANSACTION_ERROR_MESSAGE));\n      setError(err.message);\n    }\n  }, [library, connector, connectedAccount]);\n\n  return {\n    signMessage,\n    signature,\n    setSignature,\n    error\n  }\n}\n\nexport default useWalletSignature;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Pools/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/network.ts",["1429","1430"],"import {ETH_CHAIN_ID} from '../constants/network';\nimport {NETWORK_AVAILABLE} from \"../constants\";\n\nconst ETHERSCAN_URL = process.env.REACT_APP_ETHERSCAN_BASE_URL || \"\";\nconst BCSSCAN_URL = process.env.REACT_APP_BSCSCAN_BASE_URL || \"\";\n\nexport const getEtherscanName = ({networkAvailable}: any) => {\n  // console.log('etherscanName', networkAvailable);\n  if (networkAvailable === NETWORK_AVAILABLE.BSC) {\n    return 'Bscscan';\n  } else {\n    return 'Etherscan';\n  }\n};\n\nexport const getEtherscanTransactionLink = ({ appChainID, transactionHash }: any) => {\n  return ETH_CHAIN_ID == appChainID ? `${ETHERSCAN_URL}/tx/${transactionHash}` : `${BCSSCAN_URL}/tx/${transactionHash}`\n};\n\nexport const getEtherscanTransactionAddress = ({ appChainID, address }: any) => {\n  return ETH_CHAIN_ID == appChainID ? `${ETHERSCAN_URL}/address/${address}` : `${BCSSCAN_URL}/address/${address}`;\n};\n\n\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Landing/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/NetworkChange/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ChangePassword/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/message.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/constants/alert.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/getPoolCountDown.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/usePoolDetails.ts",["1431","1432","1433","1434","1435","1436"],"import { useEffect, useMemo, useState } from 'react';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport useFetch from './useFetch';\nimport useTokenDetails, { TokenType } from './useTokenDetails';\nimport BigNumber from 'bignumber.js';\nimport moment from \"moment\";\nimport {convertMomentObjectToDateTimeString, convertUnixTimeToDateTime} from \"../utils/convertDate\";\n\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nexport type Tier = {\n  allocation: string,\n  ticket_allow: string,\n  name: string,\n  // maxBuy: string,s\n  startTime: string,\n  endTime: string,\n  level: string | number,\n}\n\nexport type PoolDetails = {\n  id: number;\n  website: string;\n  amount: number;\n  ethRate: number;\n  method: string;\n  type: string;\n  tokenDetails: TokenType;\n  title: string;\n  buyLimit: number[],\n  poolAddress: string;\n  joinTime: string;\n  endJoinTime: string;\n  startBuyTime: string;\n  endBuyTime: string;\n  releaseTime: string;\n  purchasableCurrency: string;\n  banner: string;\n  networkAvailable: string;\n  networkIcon: string;\n  minTier: number;\n  isDeployed: boolean;\n  isDisplay: boolean;\n  addressReceiver: string;\n  minimumBuy: number[];\n  description: string;\n  tiersWithDetails: Tier[];\n  displayPriceRate: any;\n  priceUsdt: string;\n  isPrivate: string;\n  campaignClaimConfig: any;\n}\n\nexport type PoolDetailsReturnType ={\n  poolDetails: PoolDetails | undefined,\n  loading: boolean\n}\n\nconst ETH_ICON = '/images/eth.svg';\nconst BSC_ICON = '/images/bsc.svg';\n\n\nconst usePoolDetails = (poolId : number): PoolDetailsReturnType => {\n  const [poolDetailDone, setPoolDetailDone] = useState<boolean>(false);\n  const { loading: fetchPoolLoading, error, data }  = useFetch<any>(`/pool/${poolId}`);\n  const { data: connectedAccountTier } = useTypedSelector(state => state.userTier);\n\n  const poolDetails = useMemo(() => {\n    if (data && data.tiers && !fetchPoolLoading && !error && poolDetailDone)  {\n      const buyLimit: number[] = [];\n      const minimumBuy: number[] = [];\n      const tiersWithDetails: Tier[] = [];\n\n      const tokenDetails = (data.token == 'TBD') ? {\n        symbol: 'TBA',\n        name: 'TBA',\n        decimals: 18,\n        address: 'Token contract not available yet.'\n      } : {\n        symbol: data.symbol,\n        name: data.name,\n        decimals: data.decimals,\n        address: data.token\n      }\n\n      data.tiers.length > 0 && data.tiers.map((tier: any) => {\n        buyLimit.push(tier.max_buy);\n        minimumBuy.push(tier.min_buy);\n        tiersWithDetails.push({\n          allocation: tier.ticket_allow_percent,\n          ticket_allow: tier.ticket_allow,\n          name: tier.name,\n          // maxBuy: `${tier.max_buy} ${data.accept_currency.toUpperCase()}`,\n          startTime: tier.start_time,\n          endTime: tier.end_time,\n          level: tier.level,\n        })\n      })\n\n      let campaignClaimConfig = data.campaignClaimConfig || [];\n      campaignClaimConfig = campaignClaimConfig.map((claimConfig: any, index: number) => {\n        return {\n          ...claimConfig,\n          start_time_formated: convertUnixTimeToDateTime(claimConfig.start_time),\n          start_time_moment: moment(claimConfig.start_time),\n        }\n      });\n\n      console.log('data.campaignClaimConfig', data.campaignClaimConfig, campaignClaimConfig);\n\n      return {\n        method: data.buy_type,\n        startTime: data.start_join_pool_time,\n        token: data.token,\n        ethRate: data.purchasableCurrency === 'eth' ? data.ether_conversion_rate: data.token_conversion_rate,\n        type: data.pool_type,\n        amount: data.total_sold_coin,\n        website: data.website,\n        tokenDetails,\n        title: data.title,\n        buyLimit,\n        minimumBuy,\n        poolAddress: data.campaign_hash,\n        joinTime: data.start_join_pool_time,\n        endJoinTime: data.end_join_pool_time,\n        startBuyTime: data.start_time,\n        endBuyTime: data.finish_time,\n        purchasableCurrency: data.accept_currency,\n        id: data.id,\n        // banner: `${BASE_URL}/image/${data.token_images}`,\n        banner: data.token_images,\n        releaseTime: data.release_time,\n        networkAvailable: data.network_available,\n        networkIcon: data.network_available === 'eth' ? ETH_ICON: BSC_ICON,\n        minTier: data.min_tier,\n        isDeployed: data.is_deploy === 1,\n        isDisplay: data.is_display === 1,\n        addressReceiver: data.address_receiver,\n        description: data.description,\n        tiersWithDetails,\n        displayPriceRate: !!data.display_price_rate,\n        priceUsdt: new BigNumber(data.price_usdt).toFixed(),\n        campaignClaimConfig,\n        whitelistBannerSetting: data.whitelistBannerSetting,\n        isPrivate: data.is_private,\n      }\n    }\n\n    return;\n  }, [data, fetchPoolLoading, error, poolDetailDone, connectedAccountTier]);\n\n  useEffect(() => {\n    data && setPoolDetailDone(true);\n  }, [data]);\n\n  return  {\n    poolDetails,\n    loading: fetchPoolLoading || !poolDetailDone\n  }\n}\n\nexport default usePoolDetails;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useTokenSoldProgress.ts",["1437","1438","1439","1440","1441","1442"],"import { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\n\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\nimport Pool_ABI from '../../../abi/Pool.json';\nimport {getContractInstance, getPoolContract, SmartContractMethod} from '../../../services/web3';\nimport {NFT_PLUS_AMOUNT_PRODUCTION} from \"../../../constants\";\nimport {getProgressWithPools} from \"../../../utils/campaign\";\n\nconst DECIMAL_PLACES = 8;\n\nconst useTokenSoldProgress = (poolAddress: string | undefined, totalTokens: number | undefined, networkAvailable: string | undefined, poolDetails: any = {}) => {\n  const [soldProgress, setSoldProgress] = useState<string>(\"0\");\n  const [tokenSold, setTokenSold] = useState<string>(\"0\");\n\n  const { appChainID }  = useTypedSelector(state  => state.appNetwork).data;\n  const connector  = useTypedSelector(state => state.connector).data;\n  let soldProgressInterval = undefined as any;\n\n  useEffect(() => {\n    const calSoldProgress = async () => {\n      if (poolAddress && networkAvailable && totalTokens && ethers.utils.isAddress(poolAddress)) {\n        // const poolContract = getContractInstance(\n        //   Pool_ABI,\n        //   poolAddress,\n        //   connector,\n        //   appChainID,\n        //   SmartContractMethod.Read,\n        //   networkAvailable === 'eth'\n        // );\n\n        const poolContract = getPoolContract({ networkAvailable, poolHash: poolAddress });\n\n        if (poolContract) {\n          const tokensSold = await poolContract.methods.tokenSold().call();\n          let tokensSoldCal = new BigNumber(tokensSold).div(new BigNumber(10).pow(18)).toFixed();\n          let { progress, tokenSold, totalSoldCoin } = getProgressWithPools({\n            token_sold: tokensSoldCal,\n            total_sold_coin: totalTokens,\n            finish_time: poolDetails.finish_time || poolDetails.endBuyTime,\n          });\n\n          setTokenSold(new BigNumber(tokenSold).toFixed(DECIMAL_PLACES));\n          setSoldProgress(new BigNumber(progress).toFixed(DECIMAL_PLACES));\n        }\n      }\n    }\n\n    if (poolAddress && networkAvailable) {\n      calSoldProgress();\n      soldProgressInterval = setInterval(() => calSoldProgress(), 20000);\n    }\n\n    return () => {\n      soldProgressInterval && clearInterval(soldProgressInterval);\n    }\n  }, [poolAddress, appChainID, connector, networkAvailable, totalTokens]);\n\n  return {\n    tokenSold,\n    soldProgress\n  }\n}\n\n\nexport default useTokenSoldProgress;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/usePoolJoinAction.ts",["1443","1444"],"import { useState, useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\n\nimport axios from '../../../services/axios';\nimport { alertFailure, alertSuccess } from '../../../store/actions/alert';\nimport useWalletSignature from '../../../hooks/useWalletSignature';\n\ntype PoolDepositActionParams = {\n  poolId?: number;\n  connectedAccount?: string;\n}\n\nconst usePoolJoinAction = ({ poolId }: PoolDepositActionParams) => {\n  const dispatch = useDispatch();\n  const { account, library } = useWeb3React();\n  const [joinPoolSuccess, setJoinPoolSuccess] = useState<boolean>(false);\n  const [poolJoinLoading, setPoolJoinLoading] = useState<boolean>(false);\n  const { signature, signMessage, setSignature, error } = useWalletSignature();\n\n  const joinPool = useCallback(async () => {\n    if (account && poolId && library) {\n      try {\n        setPoolJoinLoading(true);\n\n        await signMessage();\n      } catch (err) {\n        setPoolJoinLoading(false);\n        console.log('Error when signing: ', err.message);\n      }\n    }\n  }, [poolId, account, library, signMessage]);\n\n  useEffect(() => {\n    if (error && poolJoinLoading) {\n      setPoolJoinLoading(false);\n    }\n  }, [error]);\n\n  useEffect(() => {\n    const poolJoinRequestWithSignature = async () => {\n      if (signature && poolJoinLoading) {\n        const config = {\n          headers: {\n            msgSignature: process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE\n          }\n        }\n\n        const response = await axios.post(`/user/join-campaign`, {\n          signature,\n          wallet_address: account,\n          campaign_id: poolId,\n        }, config as any) as any;\n\n        if (response.data) {\n          if (response.data.status === 200) {\n            dispatch(alertSuccess(response?.data?.message));\n            setJoinPoolSuccess(true);\n          }\n\n          if (response.data.status !== 200) {\n            dispatch(alertFailure(response.data.message));\n          }\n        }\n\n        setSignature(\"\");\n        setPoolJoinLoading(false);\n      }\n    }\n\n    poolJoinRequestWithSignature();\n  }, [signature, poolJoinLoading]);\n\n  return {\n    joinPool,\n    poolJoinLoading,\n    joinPoolSuccess\n  }\n}\n\nexport default usePoolJoinAction;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/PoolIsEndMessage/PoolIsEndMessage.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/WhiteListUserGuideBanner/WhiteListUserGuideBanner.tsx",["1445","1446","1447","1448"],"import React from 'react';\nimport useStyles from \"../style\";\nimport {INSTRUCTION_WHITELIST_LINK, WHITELIST_LINK} from \"../../../constants\";\nimport moment from \"moment\";\n\nfunction WhiteListUserGuideBanner(props: any) {\n  const styles = useStyles();\n  const { poolDetails } = props;\n  if (!poolDetails?.whitelistBannerSetting) {\n    return <></>\n  }\n  return (\n    <>\n      {/*<p className={styles.poolTicketWinner}>*/}\n      {/*  <div>*/}\n      {/*    <img src=\"/images/tick.svg\" alt=\"warning\" />*/}\n      {/*  </div>*/}\n      {/*  <span style={{ marginLeft: 14 }}>*/}\n      {/*    You must click the Apply Whitelist button to join the pool whitelist.*/}\n      {/*  </span>*/}\n      {/*</p>*/}\n\n      <div className={styles.poolWhitelistGuide} style={{  }}>\n        <div className={styles.poolWhiteListLineSmall}>\n          You have successfully clicked the Apply Whitelist button. {' '}\n        </div>\n        <div className={styles.poolWhiteListLineSmall}>\n          Please fill out the {' '}\n          <a style={{ color: '#1a73e8', textDecoration: 'underline' }} href={poolDetails.whitelistBannerSetting.whitelist_link} target={'_blank'}>whitelist form</a>{' '}\n          to join the whitelist. {' '}\n        </div>\n        <div className={styles.poolWhiteListLineSmall}>\n          ONCE YOU HAVE SUBMITTED THE FORM, YOU HAVE COMPLETED ALL STEPS AND ARE QUALIFIED FOR THE WHITELIST.\n        </div>\n\n        <div className={styles.poolWhiteListLineSmall} style={{ color: 'red', fontWeight: 'bold' }}>\n          Please wait for the winner announcement on {' '}\n          {moment.unix(poolDetails.whitelistBannerSetting.announcement_time).format('dddd, MMMM DD, YYYY')}.\n        </div>\n        <div className={styles.poolWhiteListLineSmall}>\n          You can read more about the instruction {' '}\n          <a style={{ color: '#1a73e8', textDecoration: 'underline' }} href={poolDetails.whitelistBannerSetting.guide_link} target={'_blank'}>here</a>.\n        </div>\n\n        {/* Old Message */}\n        {/*<div className={styles.poolWhiteListLineSmall}>✓ Verified KYC</div>*/}\n        {/*<div className={styles.poolWhiteListLineSmall}>✓ Clicked the \"Apply Whitelist\" button</div>*/}\n        {/*<div className={styles.poolWhiteListLineSmall}>*/}\n        {/*  x  You need to fill out the Whitelist Form, please click {' '}*/}\n        {/*  <a style={{ color: '#1a73e8', textDecoration: 'underline' }} href={poolDetails.whitelistBannerSetting.whitelist_link} target={'_blank'}>here</a>.*/}\n        {/*  (Skip if you have already filled out the form)*/}\n        {/*</div>*/}\n\n        {/*<div className={styles.poolWhiteListLine}>*/}\n        {/*  You are ready for the lottery after completing the above 3 steps.  Please stay tuned for the winner announcement on*/}\n        {/*  {' '}*/}\n        {/*  {moment.unix(poolDetails.whitelistBannerSetting.announcement_time).format('dddd, MMMM DD, YYYY')}.*/}\n        {/*  /!*Tuesday, June 1, 2021.*!/*/}\n        {/*  You can read more about the instruction {' '}*/}\n        {/*  <a style={{ color: '#1a73e8', textDecoration: 'underline' }} href={poolDetails.whitelistBannerSetting.guide_link} target={'_blank'}>here</a>.*/}\n        {/*</div>*/}\n        {/*<div className={styles.poolWhiteListLine}></div>*/}\n\n      </div>\n\n    </>\n  );\n}\n\nexport default WhiteListUserGuideBanner;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/PoolInfoTable/PoolInfoTable.tsx",["1449","1450","1451","1452","1453","1454"],"import React, {useState} from 'react';\n// import {PoolDetailKey, poolDetailKey} from \"../hooks/usePoolDetailsMapping\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport {ACCEPT_CURRENCY} from \"../../../constants\";\nimport useStyles from \"../style\";\nimport {PoolDetailKey, poolDetailKey} from \"../hooks/usePoolDetailsMapping\";\nimport ExchangeRateEthRow from \"./ExchangeRateEthRow\";\nimport ExchangeRateUsdtRow from \"./ExchangeRateUsdtRow\";\n\nfunction PoolInfoTable(props: any) {\n  const {\n    poolDetailsMapping,\n    poolDetails\n  } = props;\n  const styles = useStyles();\n\n  return (\n    <>\n      {\n        Object.keys(poolDetailsMapping).map((key: string) => {\n          const poolDetail = poolDetailsMapping[key as poolDetailKey];\n          if (poolDetails?.method !== 'whitelist' && key === PoolDetailKey.joinTime) return;\n\n          if (key === PoolDetailKey.exchangeRate) {\n            if (poolDetails?.purchasableCurrency == ACCEPT_CURRENCY.ETH && !poolDetails?.displayPriceRate) {\n              return (\n                <ExchangeRateUsdtRow\n                  key={key}\n                  poolDetails={poolDetails}\n                  poolDetail={poolDetail}\n                  label={'Exchange Rate'}\n                  force={true}\n                />\n              );\n            }\n            return (\n              <ExchangeRateEthRow\n                key={key}\n                poolDetails={poolDetails}\n                poolDetail={poolDetail}\n              />\n            );\n          }\n\n\n          if (key === PoolDetailKey.usdtExchangeRate) {\n            if (poolDetails?.purchasableCurrency == ACCEPT_CURRENCY.ETH && !poolDetails?.displayPriceRate) {\n              return <></>;\n            }\n            return (\n              <ExchangeRateUsdtRow\n                key={key}\n                poolDetails={poolDetails}\n                poolDetail={poolDetail}\n              />\n            );\n          }\n\n\n          return (\n            <div className={styles.poolDetailBasic} key={key}>\n              <span className={styles.poolDetailBasicLabel}>{poolDetail.label}</span>\n              <p className={styles.poolsDetailBasicText}>\n                {\n                  poolDetail.image && <img src={poolDetail.image} className={styles.poolDetailBasicIcon}  />\n                }\n                <Tooltip title={<p style={{ fontSize: 15 }}>{poolDetail.display}</p>}>\n                  <span>\n                    {(key !== PoolDetailKey.exchangeRate && key !== PoolDetailKey.usdtExchangeRate) && poolDetail.display}\n\n                  </span>\n                </Tooltip>\n                {\n                  poolDetail.utilIcon && (\n                    <img\n                      src={poolDetail.utilIcon}\n                      className={styles.poolDetailUtil}\n                      onClick={() => {\n                        if (key === PoolDetailKey.website) {\n                          window.open(poolDetail.display as string, '_blank')\n                        }\n                      }}\n                      key={key}\n                    />)\n                }\n              </p>\n            </div>\n          )\n        })\n      }\n\n    </>\n  );\n}\n\nexport default PoolInfoTable;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/usePoolDetailsMapping.ts",["1455","1456","1457","1458"],"import BigNumber from 'bignumber.js';\nimport { TokenType } from '../../../hooks/useTokenDetails';\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport { getUserTierAlias } from '../../../utils/getUserTierAlias';\nimport { convertTimeToStringFormat, convertTimeToStringFormatWithoutGMT } from '../../../utils/convertDate';\nimport {getIconCurrencyUsdt} from \"../../../utils/usdt\";\nimport {getAccessPoolText} from \"../../../utils/campaign\";\n\nexport enum PoolDetailKey {\n  website = 'website',\n  swapAmount = 'swapAmount',\n  exchangeRate = 'exchangeRate',\n  usdtExchangeRate = 'usdtExchangeRate',\n  method = 'method',\n  type = 'type',\n  minTier = 'minTier',\n  deposited = 'deposited',\n  joinTime = 'joinTime',\n  buyTime = 'buyTime'\n}\n\nexport type poolDetailKey = Extract<\n  PoolDetailKey,\n  PoolDetailKey.website |\n  PoolDetailKey.swapAmount |\n  PoolDetailKey.type |\n  PoolDetailKey.method |\n  PoolDetailKey.usdtExchangeRate |\n  PoolDetailKey.exchangeRate |\n  PoolDetailKey.minTier |\n  PoolDetailKey.deposited |\n  PoolDetailKey.joinTime |\n  PoolDetailKey.buyTime\n>\n\nexport type PoolDetailMapping = {\n  [key in PoolDetailKey]: {\n    display: string | number;\n    utilIcon?: string;\n    reverse?: string;\n    label?: string,\n    image?: string;\n  }\n};\n\nexport type PoolDetailMappingProps = {\n  website: string;\n  amount: number;\n  ethRate: number;\n  method: string;\n  type: string;\n  tokenDetails: TokenType;\n  purchasableCurrency: string;\n  minTier: number;\n  joinTime: string;\n  endJoinTime: string;\n  startBuyTime: string;\n  endBuyTime: string;\n  priceUsdt?: any;\n  displayPriceRate?: any;\n}\n\n\nconst usePoolDetailsMapping = (poolDetails: PoolDetailMappingProps | undefined): PoolDetailMapping | undefined => {\n  if (poolDetails) {\n    const {\n      website,\n      amount,\n      ethRate,\n      type,\n      method,\n      tokenDetails,\n      purchasableCurrency,\n      minTier,\n      joinTime,\n      endJoinTime,\n      startBuyTime,\n      endBuyTime,\n      priceUsdt,\n      displayPriceRate,\n  } = poolDetails;\n    const joinTimeInDate = new Date(Number(joinTime) * 1000);\n    const endJoinTimeInDate = new Date(Number(endJoinTime) * 1000);\n    const startBuyTimeInDate = new Date(Number(startBuyTime) * 1000);\n    const endBuyTimeInDate = new Date(Number(endBuyTime) * 1000);\n    const { currencyIcon, currencyName } = getIconCurrencyUsdt(poolDetails);\n\n    const poolDetailsBasic = {\n      [PoolDetailKey.website]: {\n        display: website,\n        utilIcon: '/images/hyperlink.svg',\n        label: 'Website'\n      },\n      [PoolDetailKey.swapAmount]: {\n        display: `${numberWithCommas(amount.toString())} ${tokenDetails?.symbol}`,\n        val: amount,\n        label: 'Swap Amount'\n      },\n      [PoolDetailKey.usdtExchangeRate]: {\n        display: `1 ${tokenDetails.symbol} = ${priceUsdt} USDT`,\n        reverse: `1 USDT = ${new BigNumber(1).div(priceUsdt).toNumber()} ${tokenDetails?.symbol}`,\n        val: 10,\n        utilIcon: '/images/swap.svg',\n        label: 'Exchange Rate',\n      },\n      [PoolDetailKey.exchangeRate]: {\n        display: `1 ${tokenDetails.symbol} = ${ethRate} ${currencyName}`,\n        reverse: `1 ${currencyName} = ${new BigNumber(1).div(ethRate).toNumber()} ${tokenDetails?.symbol}`,\n        val: 10,\n        utilIcon: '/images/swap.svg',\n      },\n      [PoolDetailKey.method]: {\n        display: getAccessPoolText(poolDetails),\n        label: 'Method'\n      },\n      [PoolDetailKey.type]: {\n        display: type ===  'swap' ? 'Swap': 'Claimable',\n        label: 'Type'\n      },\n      [PoolDetailKey.minTier]: {\n        display: minTier == 0 ? 'No tier required' : getUserTierAlias(minTier).text,\n        label: 'Min Tier',\n        image: getUserTierAlias(minTier).icon\n      },\n      [PoolDetailKey.deposited]: {\n        display: currencyName,\n        label: 'Supported',\n        image: currencyIcon,\n      },\n      [PoolDetailKey.joinTime]: {\n        display: `${joinTime ? convertTimeToStringFormatWithoutGMT(joinTimeInDate) : 'TBA'}  -  ${endJoinTime ? convertTimeToStringFormat(endJoinTimeInDate) : 'TBA'}`,\n        label: 'Whitelist Time'\n      },\n      [PoolDetailKey.buyTime]: {\n        display: `${startBuyTime ? convertTimeToStringFormatWithoutGMT(startBuyTimeInDate) : 'TBA'}  -  ${endBuyTime ? convertTimeToStringFormat(endBuyTimeInDate) : 'TBA'}`,\n        label: 'Buy Time'\n      }\n    }\n\n    return poolDetailsBasic;\n  }\n}\n\nexport default usePoolDetailsMapping;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/appNetwork.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/setting-owner.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/usdt-detail.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/balance.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/setting-revenue-address.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/setting-deactivate.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/setting-fee-rate.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/usdt-allowance.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/usdt-approve.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/claim-token.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/setting-detail.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/buy-token.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/token.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/alert.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/user.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/affiliate.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/transaction.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/campaign.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Layout/LandingLayout/index.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Pools/Pool/index.tsx",["1459","1460","1461","1462","1463","1464","1465","1466","1467","1468","1469","1470","1471","1472","1473"],"import React, { useRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport useStyles from './style';\nimport moment from 'moment';\nimport { Link } from 'react-router-dom';\nimport { POOL_STATUS, NETWORK, POOL_TYPE, ACCEPT_CURRENCY, BUY_TYPE } from '../../../constants';\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport useCommonStyle from '../../../styles/CommonStyle';\nimport {getIconCurrencyUsdt} from \"../../../utils/usdt\";\nimport {PoolStatus} from \"../../../utils/getPoolStatus\";\nimport {getAccessPoolText, getProgressWithPools, getTokenSold} from \"../../../utils/campaign\";\nimport BigNumber from 'bignumber.js';\n\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nconst Pool = (props: any): JSX.Element => {\n  const styles = useStyles();\n  const commonStyle = useCommonStyle();\n  const [timeLeft, setTimeLeft] = useState('');\n  const [progress, setProgress] = useState(0);\n\n  const {\n    pool\n  } = props\n\n  useEffect(() => {\n    const getTokenSoldByPool = async () => {\n      let resTokenSold = '0';\n      if (pool.is_deploy) {\n        const tokenSold = await getTokenSold(pool);\n        console.log('pool45', pool.id, pool, tokenSold);\n        resTokenSold = tokenSold;\n      }\n\n      console.log('resTokenSold==>: ', resTokenSold);\n      let { progress: progressPercent, tokenSold, totalSoldCoin } = getProgressWithPools({\n        ...pool,\n        tokenSold: resTokenSold,\n      });\n      setProgress(parseFloat(progressPercent));\n      console.log('Progress: ', progressPercent);\n    };\n\n    getTokenSoldByPool();\n    const intervalProgress = setInterval(() => {\n      getTokenSoldByPool();\n    }, 20000);\n\n    return () => {\n      intervalProgress && clearInterval(intervalProgress);\n    }\n\n  }, [pool])\n\n  useEffect(() => {\n    const currentTime = moment().unix()\n    var diffTime = parseInt(pool.start_time) - currentTime;\n    let intervalCount: any;\n    if (diffTime > 0) {\n      let timeLeftToStart = diffTime * 1000\n      const interval = 1000;\n\n      intervalCount = setInterval(() => {\n        timeLeftToStart -= interval;\n        const timeLeftDuration = moment.duration(timeLeftToStart, 'milliseconds');\n        let timeLeftString = '';\n        if (timeLeftToStart >= 86400000) {\n          timeLeftString = 'In ' + timeLeftDuration.days() + \" days\"\n        } else {\n          timeLeftString = 'In ' + timeLeftDuration.hours() + \":\" + timeLeftDuration.minutes() + \":\" + timeLeftDuration.seconds()\n        }\n        setTimeLeft(timeLeftString)\n      }, interval);\n    }\n\n    return () => clearInterval(intervalCount);\n  }, [])\n\n  const poolStatus = () => {\n    switch(pool.status) {\n      case PoolStatus.TBA:\n        return <div className=\"tba\"><span>TBA</span></div>\n      case PoolStatus.Upcoming:\n        return <div className=\"up-comming\"><span>Upcoming</span></div>\n      case PoolStatus.Joining:\n        return <div className=\"joining\"><span>Whitelisting</span></div>\n      case PoolStatus.Progress:\n        return <div className=\"in-progress\"><span>Inprogress</span></div>\n      case PoolStatus.Filled:\n        return <div className=\"filled\"><span>Filled</span></div>\n      case PoolStatus.Closed:\n        return <div className=\"closed\"><span>Ended</span></div>\n      case PoolStatus.Claimable:\n        return <div className=\"claimable\"><span>Claimable</span></div>\n      default:\n        return <div className=\"up-comming\"><span>{pool.status}</span></div>\n    }\n  };\n\n  const { currencyIcon, currencyName } = getIconCurrencyUsdt({ purchasableCurrency: pool?.accept_currency, networkAvailable: pool?.network_available });\n\n  return (\n    <td>\n      <Link to={`/buy-token/${pool.id}`} className={styles.link}>\n        <div className={styles.row}>\n          <div className={styles.name}>\n            <img src={pool.token_images} />\n            <span className={commonStyle.nnb1418d}>{pool.title}</span>\n          </div>\n          <div className={styles.ratio + ' ' + commonStyle.nnn1424h}>\n            {pool.accept_currency === ACCEPT_CURRENCY.ETH &&\n              <>\n                {`${numberWithCommas(pool?.price_usdt, 4)} USD`}\n              </>\n            }\n            {pool.accept_currency !== ACCEPT_CURRENCY.ETH &&\n              <>\n                {numberWithCommas(pool?.token_conversion_rate, 4)} {currencyName}\n              </>\n            }\n\n            {/*{pool.accept_currency === ACCEPT_CURRENCY.ETH ?*/}\n            {/*  numberWithCommas(pool.ether_conversion_rate, 4) :*/}\n            {/*  numberWithCommas(pool.token_conversion_rate, 4)} {pool?.accept_currency?.toUpperCase()}*/}\n          </div>\n          <div className={styles.poolType + ' ' + commonStyle.nnn1424h}>\n            {getAccessPoolText(pool)}\n          </div>\n          <div className={styles.progress}>\n            <span className={commonStyle.nnb1418d}>{`${new BigNumber(progress).toFixed(2)}%`}</span>\n            <div className=\"progress\">\n              <span\n                className={`current-progress ${progress > 0 ? '' : 'inactive'}`}\n                style={{ width: `${new BigNumber(progress).toFixed(2)}%` }}\n              ></span>\n            </div>\n          </div>\n          <div className={styles.status}>\n            {poolStatus()}\n          </div>\n        </div>\n      </Link>\n    </td>\n  );\n};\n\nexport default Pool;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Landing/ModalContent/index.tsx",["1474","1475","1476","1477","1478","1479","1480"],"import { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport _ from 'lodash';\nimport useStyles from './style';\nimport useCommonStyle from '../../../styles/CommonStyle';\nimport {Dialog, DialogTitle, DialogContent, DialogActions} from '@material-ui/core';\n\nconst iconClose = 'images/icons/close.svg';\nconst background = 'images/landing/bg-modal.svg';\n\nconst ModalContent = (props: any) => {\n  const styles = useStyles();\n  const commonStyles = useCommonStyle();\n  const {\n    setShowModal,\n    open\n  } = props;\n\n  return (\n    <Dialog\n      open={open}\n      keepMounted\n      onClose={() => setShowModal(false)}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n      className={commonStyles.modal + ' ' + styles.ModalContent}\n    >\n      <div className=\"modal-content\">\n        <img src={background} className=\"bg\"/>\n        <img src={iconClose} onClick={() => setShowModal(false)} className=\"btn-close\"/>\n        <DialogTitle id=\"alert-dialog-slide-title\" className=\"modal-content__head\">\n          <h2 className=\"title\">The first IDO will start in the first half of May</h2>\n        </DialogTitle>\n        <DialogContent className=\"modal-content__body\">\n          <div className=\"subtitle\">\n            <span>Subscribe PolkaFoundry Telegram for the latest updates.</span>\n          </div>\n        </DialogContent>\n        <DialogActions className=\"modal-content__foot\">\n          <button\n            className={\"btn-approve\"}\n            onClick={() => {window.open('https://t.me/PolkaFoundryANN', '_blank')}}\n          >Subscribe</button>\n        </DialogActions>\n      </div>\n    </Dialog>\n  );\n};\n\nexport default ModalContent;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Landing/Card/index.tsx",["1481"],"import useStyles from './style';\nimport commonStyle from '../../../styles/CommonStyle'\n//@ts-ignore\nimport { Fade } from 'react-reveal';\n\nexport const LandingCard = (props: any) => {\n  const styles = useStyles();\n  const common = commonStyle();\n\n  const {\n    cardInfo,\n  } = props\n\n  return (\n      <div className={styles.cardContainer} style={{background: cardInfo.backgroundColor}}>\n        <Fade bottom delay={800}>\n          <div className={styles.cardImage}>\n            <img src={cardInfo.image}/>\n          </div>\n          <div className={styles.mainContent}>\n            <h2 className={\"card__title \" + common.nnb2432d}>{cardInfo.title}</h2>\n            <p className={\"card__description \" + common.nnn1424h}>{cardInfo.description}</p>\n          </div>\n        </Fade>\n      </div>\n  );\n};\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/setting-detail.js",[],["1482","1483"],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/setting-owner.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/usdt-detail.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/setting-deactivate.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/setting-revenue-address.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/setting-fee-rate.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/MyTier/index.tsx",["1484","1485","1486"],"/* import { useState, useEffect } from 'react'; */\n/* import useFetch from '../../../hooks/useFetch'; */\nimport { Link } from 'react-router-dom';\nimport { Tier } from '../../../hooks/usePoolDetails';\nimport { convertTimeToStringFormat } from '../../../utils/convertDate';\nimport withWidth, {isWidthDown} from '@material-ui/core/withWidth';\n\n/* import Tooltip from '@material-ui/core/Tooltip'; */\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport useStyles from './style';\nimport TierTableWithWeightRate from \"./TierTableWithWeightRate\";\n\ntype MyTierProps = {\n  tiers: Tier[] | undefined,\n  poolDetails: any,\n}\n\nconst headers = ['Tier', 'Allocation (%)', 'Start Buy Time', 'End Buy Time'];\n\nconst MyTier: React.FC<MyTierProps> = ({ tiers, poolDetails }: MyTierProps) => {\n  const styles = useStyles();\n  const poolPickWeight = 27;\n  // const poolPickWeight = 860;\n  const isPickeWeight = poolDetails.id == poolPickWeight;\n  console.log('poolDetails -- poolDetails===>', poolDetails);\n\n  return (\n    <div className={styles.MyTier}>\n      {/* <p className={styles.MyTierAccountRedirect}> */}\n      {/*   To upgrade your tier, please click <Link to=\"/account\" style={{ color: '#6399FF', textDecoration: 'underline' }}>here</Link> ! */}\n      {/* </p> */}\n      <p className={styles.MyTierRulesHeader}>\n        At current tier, you will be able to purchase with the following rules:\n      </p>\n        <TableContainer component={Paper} className={styles.tableContainer}>\n          <Table className={styles.table} aria-label=\"simple table\">\n            <TableHead className={styles.tableHeaderWrapper}>\n              <TableRow>\n              {\n                headers.map(header => (\n                  <TableCell key={header} className={styles.tableHeader}>\n                    <span>\n                      {header}\n                    </span>\n                  </TableCell>\n                ))\n              }\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {!isPickeWeight &&\n                <>\n                  {tiers && tiers.length> 0 && tiers.map((row: any, index) => (\n                    <TableRow key={index}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {row.name}\n                      </TableCell>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {row.allocation}\n                      </TableCell>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {!row.startTime && '--'}\n                        {row.startTime &&convertTimeToStringFormat(new Date(row.startTime * 1000))}\n                      </TableCell>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {!row.endTime && '--'}\n                        {row.endTime && convertTimeToStringFormat(new Date(row.endTime * 1000))}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </>\n              }\n\n              {isPickeWeight &&\n                tiers && tiers.length > 0 && (\n                  <TierTableWithWeightRate\n                    tiers={tiers}\n                  />\n                )\n              }\n\n            </TableBody>\n            </Table>\n        </TableContainer>\n    </div>\n  )\n}\n\nexport default withWidth()(MyTier);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/Button/index.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/StatusBar/index.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/Countdown/index.tsx",["1487"],"import React, { useState, useEffect, useCallback } from 'react';\nimport useStyles from './style';\n\ntype CountDownProps = {\n  startDate?: Date,\n  getCurrentDateRealTime?: (currentDate: Date) => void\n}\n\nconst Countdown: React.FC<CountDownProps> = ({ startDate, getCurrentDateRealTime }: CountDownProps) => {\n  const styles = useStyles();\n  const [second, setSecond] = useState('0');\n  const [minute, setMinute] = useState('0');\n  const [hour, setHour] = useState('0');\n  const [day, setDay] = useState('0');\n\n  const emitCurrentDate = useCallback((now: Date) => {\n    getCurrentDateRealTime && getCurrentDateRealTime(now);\n  }, [getCurrentDateRealTime]);\n\n  useEffect(() => {\n    let countDownInterval = undefined as any; \n\n    if (startDate && startDate >= new Date()) {\n      const second = 1000,\n      minute = second * 60,\n      hour = minute * 60,\n      day = hour * 24;\n\n      let countDown = startDate.getTime();\n      countDownInterval = setInterval(function() {    \n\n        let now = new Date().getTime(), distance = countDown - now;\n        \n        if (distance >= 0) {\n          const currentDay = Math.floor(distance / (day));\n          const currentHour = Math.floor((distance % (day)) / (hour))\n          const currentMinute = Math.floor((distance % (hour)) / (minute));\n          const currentSecond = Math.floor((distance % (minute)) / second)\n\n          setDay(currentDay < 10 ? `0${currentDay}`: `${currentDay}`);\n          setHour(currentHour < 10 ? `0${currentHour}`: `${currentHour}`);\n          setMinute(currentMinute < 10 ? `0${currentMinute}`: `${currentMinute}`);\n          setSecond(currentSecond < 10 ? `0${currentSecond}`: `${currentSecond}`);\n          emitCurrentDate(new Date(now));\n        }\n\n        //do something later when date is reached\n        if (distance <= 0 && countDownInterval) {\n          clearInterval(countDownInterval);\n          window.location.reload();\n        }\n        //seconds\n      }, 0);\n    } else {\n      setSecond(\"00\");\n      setMinute(\"00\");\n      setHour(\"00\");\n      setDay(\"00\");\n    }\n\n    return () => {\n      clearInterval(countDownInterval);\n    }\n  }, [startDate]);\n\n  return (\n    <div id=\"countdown\">\n      <ul style={{ display: 'flex', alignItems: 'flex-start' }}>\n        <li className={styles.countdownPart + ' number'}>\n          <span id=\"days\">{day}</span><span className={styles.countdownInfo}>Days</span>\n        </li>\n        <li className={styles.countdownPart}>:</li>\n        <li className={styles.countdownPart + ' number'}>\n          <span id=\"hours\">{hour}</span><span className={styles.countdownInfo}>Hours</span>\n        </li>\n        <li className={styles.countdownPart}>:</li>\n        <li className={styles.countdownPart + ' number'}>\n          <span id=\"minutes\">{minute}</span><span className={styles.countdownInfo}>Minutes</span></li>\n        <li className={styles.countdownPart}>:</li>\n        <li className={styles.countdownPart + ' number'}>\n          <span id=\"seconds\">{second}</span><span className={styles.countdownInfo}>Seconds</span></li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Countdown;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/BuyTokenForm/index.tsx",["1488","1489","1490","1491","1492","1493","1494","1495","1496","1497","1498","1499","1500","1501","1502","1503","1504","1505","1506","1507"],"import React, { Dispatch, SetStateAction, useEffect, useState, useCallback, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport BigNumber from 'bignumber.js';\nimport NumberFormat from 'react-number-format';\n\nimport TransactionSubmitModal from '../../../components/Base/TransactionSubmitModal';\nimport Button from '../Button';\nimport useStyles from './style';\n\nimport { getUSDCAddress, getUSDTAddress, getBUSDAddress } from '../../../utils/contractAddress/getAddresses';\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport { BSC_CHAIN_ID, ETH_CHAIN_ID } from '../../../constants/network';\nimport { PurchaseCurrency } from '../../../constants/purchasableCurrency';\nimport { TokenType } from '../../../hooks/useTokenDetails';\nimport getAccountBalance from '../../../utils/getAccountBalance';\nimport { connectWalletSuccess } from '../../../store/actions/wallet';\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useTokenAllowance from '../../../hooks/useTokenAllowance';\nimport useUserPurchased from '../hooks/useUserPurchased';\nimport usePoolDepositAction from '../hooks/usePoolDepositAction';\nimport useTokenApprove from '../../../hooks/useTokenApprove';\nimport useAuth from '../../../hooks/useAuth';\nimport { withWidth, isWidthDown, isWidthUp } from '@material-ui/core';\nimport moment from \"moment\";\nimport {\n  convertTimeToStringFormat,\n  convertTimeToStringFormatWithoutGMT,\n  convertUnixTimeToDateTime\n} from \"../../../utils/convertDate\";\nimport {getIconCurrencyUsdt} from \"../../../utils/usdt\";\nimport useTokenSold from \"../hooks/useTokenSold\";\nimport {getEtherscanName} from \"../../../utils/network\";\n\nconst REGEX_NUMBER = /^-?[0-9]{0,}[.]{0,1}[0-9]{0,6}$/;\n\ntype BuyTokenFormProps = {\n  tokenDetails: TokenType | undefined,\n  rate: number | undefined,\n  poolAddress: string | undefined;\n  maximumBuy: number;\n  minimumBuy: number;\n  poolAmount: number | undefined;\n  purchasableCurrency: string | undefined;\n  poolId: number | undefined;\n  joinTime: Date | undefined;\n  method: string | undefined;\n  availablePurchase: boolean | undefined;\n  ableToFetchFromBlockchain: boolean | undefined\n  minTier: number | undefined\n  isDeployed: boolean | undefined\n  endBuyTimeInDate: Date | undefined\n  startBuyTimeInDate: Date | undefined\n  endJoinTimeInDate: Date | undefined\n  tokenSold: string | undefined\n  setBuyTokenSuccess: Dispatch<SetStateAction<boolean>>\n  isClaimable: boolean | undefined\n  currentUserTier: any,\n  alreadyJoinPool: any,\n  joinPoolSuccess: boolean,\n  existedWinner: any,\n  disableAllButton: boolean,\n  networkAvailable: string,\n}\n\nenum MessageType {\n  error = 'error',\n  warning = 'warning'\n}\n\nconst BuyTokenForm: React.FC<BuyTokenFormProps> = (props: any) => {\n  const styles = useStyles();\n  const dispatch = useDispatch();\n\n  const [input, setInput] = useState(\"\");\n  const [openApproveModal, setApproveModal] = useState(false);\n  const [openSubmitModal, setOpenSubmitModal] = useState(false);\n  const [estimateTokens, setEstimateTokens] = useState<number>(0);\n  const [tokenAllowance, setTokenAllowance] = useState<number | undefined>(undefined);\n  const [tokenBalance, setTokenBalance] = useState<number>(0);\n  const [walletBalance, setWalletBalance] = useState<number>(0);\n  const [userPurchased, setUserPurchased] = useState<number>(0);\n  const [poolBalance, setPoolBalance] = useState<number>(0);\n  const [loadingPoolInfo, setLoadingPoolInfo] = useState<boolean>(false);\n\n  const {\n    tokenDetails,\n    rate,\n    poolAddress,\n    maximumBuy,\n    purchasableCurrency,\n    poolId,\n    availablePurchase,\n    ableToFetchFromBlockchain,\n    /* minTier, */\n    isDeployed,\n    minimumBuy,\n    poolAmount,\n    startBuyTimeInDate,\n    endBuyTimeInDate,\n    endJoinTimeInDate,\n    tokenSold,\n    setBuyTokenSuccess,\n    isClaimable,\n    currentUserTier,\n    joinPoolSuccess,\n    alreadyJoinPool,\n    existedWinner,\n    disableAllButton,\n    networkAvailable,\n} = props;\n\n  console.log('maximumBuy11', maximumBuy, rate);\n\n  const { connectedAccount, wrongChain } = useAuth();\n  /* const userTier = useTypedSelector(state => state.userTier).data; */\n  const { appChainID, walletChainID } = useTypedSelector(state => state.appNetwork).data;\n  const connector = useTypedSelector(state => state.connector).data;\n\n  const etherscanName = getEtherscanName({networkAvailable});\n  const {\n    deposit,\n    tokenDepositLoading,\n    tokenDepositTransaction,\n    depositError,\n    tokenDepositSuccess\n  } = usePoolDepositAction({ poolAddress, poolId, purchasableCurrency, amount: input, isClaimable, networkAvailable });\n\n  const { currencyIcon, currencyName } = getIconCurrencyUsdt({ purchasableCurrency, networkAvailable });\n  const { retrieveTokenAllowance } = useTokenAllowance();\n  const { retrieveUserPurchased } = useUserPurchased(tokenDetails, poolAddress, ableToFetchFromBlockchain);\n\n  const getApproveToken = useCallback((appChainID: string) => {\n    if (purchasableCurrency && purchasableCurrency === PurchaseCurrency.USDT) {\n      return {\n        address: getUSDTAddress(appChainID),\n        name: \"USDT\",\n        symbol: \"USDT\",\n        decimals: appChainID == ETH_CHAIN_ID ? 6 : 18\n      };\n    }\n\n    if (purchasableCurrency && purchasableCurrency === PurchaseCurrency.BUSD) {\n      return {\n        address: getBUSDAddress(appChainID),\n        name: \"BUSD\",\n        symbol: \"BUSD\",\n        decimals: 18\n      };\n    }\n\n    if (purchasableCurrency && purchasableCurrency === PurchaseCurrency.USDC) {\n      return {\n        address: getUSDCAddress(appChainID),\n        name: \"USDC\",\n        symbol: \"USDC\",\n        decimals: appChainID == ETH_CHAIN_ID ? 6 : 18\n      };\n    }\n\n    if (purchasableCurrency && purchasableCurrency === PurchaseCurrency.ETH) {\n      return {\n        address: \"0x00\",\n        name: 'ETH',\n        symbol: 'ETH',\n        decimals: 18\n      }\n    }\n  }, [purchasableCurrency, appChainID])\n\n  const tokenToApprove = getApproveToken(appChainID);\n\n  const { approveToken, tokenApproveLoading, transactionHash } = useTokenApprove(\n    tokenToApprove,\n    connectedAccount,\n    poolAddress,\n    false\n  );\n\n  const { retrieveTokenBalance } = useTokenBalance(tokenToApprove, connectedAccount);\n\n  // Check if user already buy ICO token at the first time or not ?\n  const firstBuy = localStorage.getItem('firstBuy') || undefined;\n  let parsedFirstBuy = {} as any;\n  if (firstBuy) {\n    try {\n      parsedFirstBuy = JSON.parse(firstBuy);\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  // Check if user already buy at least minimum tokens at the first time\n  const connectedAccountFirstBuy =\n    connectedAccount\n    ? (\n       parsedFirstBuy[poolAddress] ? parsedFirstBuy[poolAddress][connectedAccount]: false\n    )\n    : false;\n\n  const availableMaximumBuy = useMemo(() => {\n    // Transform Maximum Buy in USDT tokens to ICO tokens by rate\n    const maxBuy = new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate))\n      .decimalPlaces(2, BigNumber.ROUND_FLOOR);\n\n    // Check if max buy greater than total ICO coins sold\n    if (maxBuy.gt(new BigNumber(tokenBalance))) {\n      return (new BigNumber(tokenBalance).gt(0))\n        ? new BigNumber(tokenBalance).decimalPlaces(2, BigNumber.ROUND_FLOOR).toFixed()\n        : '0';\n    }\n\n    return (new BigNumber(maxBuy).gt(0))\n      ? (maxBuy.decimalPlaces(2, BigNumber.ROUND_FLOOR).toFixed())\n      : '0';\n  }, [tokenBalance, maximumBuy, userPurchased, poolAmount, tokenSold, rate]);\n\n  const { retrieveTokenSold, tokenSold: totalUserTokenSold  } = useTokenSold(tokenDetails, poolAddress, ableToFetchFromBlockchain);\n  const poolErrorBeforeBuy = useMemo(() => {\n    const timeToShowMsg = new Date() > endJoinTimeInDate && new Date() < startBuyTimeInDate;\n\n    // if (\n    //   poolBalance\n    //   && poolAmount\n    //   && startBuyTimeInDate\n    //   && endJoinTimeInDate &&\n    //   new BigNumber(poolAmount).gt(0) &&\n    //   new BigNumber(poolBalance).lt(new BigNumber(poolAmount)) &&\n    //   timeToShowMsg\n    // ) {\n    //   return {\n    //     message: `This pool is not ready to buy, please contact the administrator for more information.`,\n    //     type: MessageType.warning\n    //   };\n    // }\n\n    if (minimumBuy && input && new BigNumber(input || 0).lt(minimumBuy) && !connectedAccountFirstBuy && new Date() > startBuyTimeInDate) {\n      return {\n        message: `The minimum amount you must trade is ${new BigNumber(minimumBuy).toFixed(2)} ${currencyName}.`,\n        type: MessageType.error\n      }\n    }\n\n    if (\n      input &&\n      new BigNumber(estimateTokens).gt(new BigNumber(poolAmount))\n    ) {\n      return {\n        message: `You can only buy  up to ${numberWithCommas(`${new BigNumber(poolAmount).minus(new BigNumber(totalUserTokenSold)).toFixed()}`)} ${tokenDetails?.symbol}.`,\n        type: MessageType.error\n      }\n    }\n\n    return;\n  }, [\n    minimumBuy,\n    estimateTokens,\n    poolBalance,\n    poolAmount,\n    userPurchased,\n    purchasableCurrency,\n    input,\n    startBuyTimeInDate,\n    endJoinTimeInDate,\n    connectedAccountFirstBuy\n  ]);\n\n  let enableApprove = false;\n\n  // Actually I don't know why i'm doing it right here :)))\n  if (tokenAllowance != null || tokenAllowance != undefined) {\n    if ((tokenAllowance <= 0 || new BigNumber(tokenAllowance).lt(new BigNumber(input)))\n    && (purchasableCurrency && purchasableCurrency !== PurchaseCurrency.ETH)\n    && !wrongChain && ableToFetchFromBlockchain && isDeployed\n    // && (alreadyJoinPool || joinPoolSuccess)\n    && existedWinner && !disableAllButton\n    )  {\n      enableApprove = true;\n    }\n  }\n\n  // Check whether current user's tier is valid or not\n  /* const validTier = new BigNumber(userTier).gte(minTier); */\n\n  // Check multiple conditions for purchasing time\n  const purchasable =\n     availablePurchase\n     && estimateTokens > 0\n     && new BigNumber(input).lte(new BigNumber(maximumBuy))\n     && !poolErrorBeforeBuy\n     && new BigNumber(input).lte(new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate)))\n     && new BigNumber(estimateTokens).lte(new BigNumber(poolAmount).minus(tokenSold))\n     && new BigNumber(tokenBalance).gte(new BigNumber(input))\n     && !wrongChain\n     && !disableAllButton\n     /* && validTier */\n     && ((purchasableCurrency !== PurchaseCurrency.ETH ? new BigNumber(tokenAllowance || 0).gt(0): true));\n\n  // Fetch User balance\n  const fetchUserBalance = useCallback(async () => {\n      if (appChainID && connectedAccount && connector) {\n        const accountBalance = await getAccountBalance(appChainID, walletChainID, connectedAccount as string, connector);\n\n        dispatch(\n          connectWalletSuccess(\n            connector,\n            [connectedAccount],\n            {\n              [connectedAccount]: new BigNumber(accountBalance._hex).div(new BigNumber(10).pow(18)).toFixed(5)\n            }\n          )\n        )\n      }\n  }, [connector, appChainID, walletChainID, connectedAccount]);\n\n  const fetchPoolDetails = useCallback(async () => {\n      if (tokenDetails && poolAddress && connectedAccount && tokenToApprove) {\n        setTokenAllowance(await retrieveTokenAllowance(tokenToApprove, connectedAccount, poolAddress) as number);\n        setUserPurchased(await retrieveUserPurchased(connectedAccount, poolAddress) as number);\n        setTokenBalance(await retrieveTokenBalance(tokenToApprove, connectedAccount) as number);\n        setWalletBalance(await retrieveTokenBalance(tokenDetails, connectedAccount) as number);\n        setPoolBalance(await retrieveTokenBalance(tokenDetails, poolAddress) as number);\n      }\n\n  }, [tokenDetails, connectedAccount, tokenToApprove, poolAddress]);\n\n  useEffect(() => {\n    if (maximumBuy && userPurchased && rate) {\n      const remainingAmount = new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate)).decimalPlaces(2, BigNumber.ROUND_FLOOR);\n      remainingAmount.gt(0) && setInput(remainingAmount.toFixed(2));\n    }\n\n    return () => {\n      setInput(\"\");\n    }\n  }, [maximumBuy, userPurchased, rate]);\n\n  useEffect(() => {\n    const fetchPoolDetailsBlockchain = async () => {\n      await fetchPoolDetails();\n      setLoadingPoolInfo(false);\n    }\n\n    loadingPoolInfo && fetchPoolDetailsBlockchain();\n  }, [loadingPoolInfo]);\n\n  // Handle for fetching pool general information 1 time\n  useEffect(() => {\n    const fetchTokenPoolAllowance = async () => {\n      try {\n        setLoadingPoolInfo(true);\n      } catch (err) {\n        setLoadingPoolInfo(false);\n      }\n    }\n\n    ableToFetchFromBlockchain && connectedAccount && fetchTokenPoolAllowance();\n  }, [connectedAccount, ableToFetchFromBlockchain]);\n\n  // Check if has any error when deposit => close modal\n  useEffect(() => {\n    if (depositError) {\n      setOpenSubmitModal(false);\n    }\n  }, [depositError]);\n\n  // Re-fetch user balance when deposit successful\n  useEffect(() => {\n    const handleWhenDepositSuccess = async () => {\n      setBuyTokenSuccess(true);\n      await fetchUserBalance();\n      await fetchPoolDetails();\n    }\n\n    tokenDepositSuccess && handleWhenDepositSuccess();\n  }, [tokenDepositSuccess]);\n\n  useEffect(() => {\n    if (tokenDepositTransaction) {\n      //  Clear input field and additional information field below and close modal\n      setInput(\"\");\n      setEstimateTokens(0);\n\n      if (!connectedAccountFirstBuy) {\n        localStorage.setItem(\"firstBuy\", JSON.stringify(Object.assign({}, {\n          ...parsedFirstBuy,\n          [poolAddress as string]: {\n            ...parsedFirstBuy[poolAddress],\n            [connectedAccount as string]: true\n          }\n        })));\n      }\n    }\n  }, [tokenDepositTransaction, connectedAccountFirstBuy]);\n\n  useEffect(() => {\n    if (input && rate && purchasableCurrency) {\n      const tokens = new BigNumber(input).multipliedBy(new BigNumber(1).div(rate)).toNumber()\n      const tokenWithDecimal = new BigNumber(tokens).decimalPlaces(6).toNumber();\n      console.log('tokens===>', tokens, tokenWithDecimal);\n      setEstimateTokens(tokenWithDecimal);\n    } else {\n      setEstimateTokens(0);\n    }\n  }, [input, purchasableCurrency, rate]);\n\n  const handleInputChange = async (e: any) => {\n    const value = e.target.value.replaceAll(\",\", \"\");\n    if (value === '' || REGEX_NUMBER.test(value)) {\n      setInput(value);\n    }\n  }\n\n  const handleTokenDeposit = async () => {\n    try {\n      if (purchasableCurrency && ableToFetchFromBlockchain) {\n        setOpenSubmitModal(true);\n        setBuyTokenSuccess(false);\n\n        // Call to smart contract to deposit token and refetch user balance\n        await deposit();\n      }\n    } catch (err) {\n      setOpenSubmitModal(false);\n    }\n  }\n\n  const handleTokenApprove = async () => {\n    try {\n      setApproveModal(true);\n      await approveToken();\n\n      if (tokenDetails && poolAddress && connectedAccount && tokenToApprove) {\n        setTokenAllowance(await retrieveTokenAllowance(tokenToApprove, connectedAccount, poolAddress) as number);\n        setTokenBalance(await retrieveTokenBalance(tokenToApprove, connectedAccount) as number);\n      }\n    } catch (err) {\n      setApproveModal(false);\n    }\n  }\n\n  console.log('poolAmount--maximumBuy:==========>', poolAmount, maximumBuy, userPurchased, rate);\n\n  return (\n    <div className={styles.buyTokenForm}>\n      {\n        <>\n          <p className={styles.buyTokenFormTitle}>\n            <div className={styles.allowcationWrap}>\n              <span className={styles.allowcationTitle}>Max Allocation: </span>\n              <span className={styles.allocationContent}>\n                {numberWithCommas(new BigNumber(maximumBuy).toFixed())} {currencyName}\n              </span>\n            </div>\n\n            <div className={styles.allowcationWrap}>\n              <span className={styles.allowcationTitle}>Have Bought: </span>\n              <span className={styles.allocationContent}>\n                {numberWithCommas(\n                  new BigNumber(userPurchased).multipliedBy(rate)\n                    .decimalPlaces(2, BigNumber.ROUND_CEIL) // Round UP with 2 decimal places: 1.369999 --> 1.37\n                    .toFixed()\n                )} {currencyName}\n              </span>\n            </div>\n\n            <div className={styles.allowcationWrap}>\n              <span className={styles.allowcationTitle}>Remaining: </span>\n              <span className={styles.allocationContent}>\n                {numberWithCommas(\n                  new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate)).lte(0)\n                    ? '0'\n                    : (\n                      new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate))\n                        .decimalPlaces(2, BigNumber.ROUND_FLOOR) // Round DOWN with 2 decimal places: 1.369999 --> 1.36\n                        .toFixed()\n                    )\n                )} {currencyName}\n              </span>\n            </div>\n\n            <div className={styles.allowcationWrap}>\n              <span className={styles.allowcationTitle}>Tier Buy Time: </span>\n              <span className={styles.allocationContent}>\n              {!!currentUserTier && !!currentUserTier.start_time && !!currentUserTier.end_time &&\n                <>\n                  { convertUnixTimeToDateTime(currentUserTier.start_time, 1) }\n                  {' '} to {' '}\n                  { convertUnixTimeToDateTime(currentUserTier.end_time, 1) }\n                </>\n              }\n              </span>\n            </div>\n\n          </p>\n        </>\n      }\n      <div className={styles.buyTokenInputForm}>\n        <p className={styles.buyTokenInputLabel}>\n          <span>Input</span>\n          {isWidthUp('sm', props.width) && <span>Your wallet balance:&nbsp;\n            {numberWithCommas(parseFloat(tokenBalance.toString()).toFixed(6))} &nbsp;\n            {currencyName}\n          </span>}\n          {isWidthDown('xs', props.width) && <span>Balance:&nbsp;\n            {numberWithCommas(parseFloat(tokenBalance.toString()).toFixed(6))} &nbsp;\n            {currencyName}\n          </span>}\n        </p>\n        <div className={styles.buyTokenInputWrapper}>\n\n          <NumberFormat\n            className={styles.buyTokenInput}\n            placeholder={'0'}\n            thousandSeparator={true}\n            onChange={handleInputChange}\n            decimalScale={6}\n            value={input}\n            defaultValue={maximumBuy || 0}\n            max={tokenBalance}\n            min={0}\n            maxLength={255}\n            disabled={wrongChain}\n          />\n          <span className={styles.purchasableCurrency}>\n            <button\n              className={styles.purchasableCurrencyMax}\n              onClick={\n                () => {\n                  setInput(\n                    new BigNumber(availableMaximumBuy).decimalPlaces(2, BigNumber.ROUND_FLOOR).toFixed()\n                  )\n                }\n              }\n            >\n              Max\n            </button>\n            <img src={currencyIcon} alt={purchasableCurrency} className={styles.purchasableCurrencyIcon} />\n            {currencyName}\n          </span>\n        </div>\n      </div>\n      <p className={styles.buyTokenFee}>\n        Your Balance: {numberWithCommas(`${walletBalance || 0}` )} {tokenDetails?.symbol}\n      </p>\n      <div className={styles.buyTokenEstimate}>\n        <p className={styles.buyTokenEstimateLabel}>You will get approximately</p>\n        <strong className={styles.buyTokenEstimateAmount}>{numberWithCommas(`${estimateTokens}`)} {tokenDetails?.symbol}</strong>\n      </div>\n\n      {\n        <p className={`${poolErrorBeforeBuy?.type === MessageType.error ? `${styles.poolErrorBuy}`: `${styles.poolErrorBuyWarning}`}`}>\n          {poolErrorBeforeBuy && poolErrorBeforeBuy.message}\n        </p>\n      }\n\n      <div className={styles.btnGroup}>\n        <Button\n        text={new BigNumber(tokenAllowance || 0).gt(0) ? 'Approved': 'Approve'}\n        backgroundColor={'#29C08A'}\n        disabled={!enableApprove}\n        onClick={handleTokenApprove}\n        loading={tokenApproveLoading}\n        />\n        <Button\n          text={'Buy'}\n          backgroundColor={'#3232DC'}\n          disabled={!purchasable}\n          onClick={handleTokenDeposit}\n          loading={tokenDepositLoading}\n        />\n      </div>\n\n      {purchasableCurrency !== PurchaseCurrency.ETH &&\n        <p className={styles.approveWarning}>{`You need to Approve once (and only once) before you can start purchasing.`}</p>\n      }\n\n      <TransactionSubmitModal\n        opened={openSubmitModal}\n        handleClose={() => { setOpenSubmitModal(false); }}\n        transactionHash={tokenDepositTransaction}\n      />\n      <TransactionSubmitModal\n        additionalText={`Please be patient and no need to approve again, you can check the transaction status on ${etherscanName}.`}\n        opened={openApproveModal}\n        handleClose={() => { setApproveModal(false); }}\n        transactionHash={transactionHash}\n      />\n    </div>\n  )\n}\n\nexport default withWidth()(BuyTokenForm);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/PoolAbout/index.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/LotteryWinners/index.tsx",["1508","1509","1510","1511","1512"],"import { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport useFetch from '../../../hooks/useFetch';\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport { debounce } from 'lodash';\n/* import { CircularProgress } from '@material-ui/core'; */\nimport withWidth, {isWidthDown} from '@material-ui/core/withWidth';\n\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Pagination from '@material-ui/lab/Pagination';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport useStyles from './style';\n\nconst headers = ['No.', 'Address'];\n\ntype LotteryWinnersProps = {\n  poolId: number | undefined;\n  width: any;\n  userWinLottery: boolean | undefined;\n  maximumBuy: number | undefined;\n  purchasableCurrency: string | undefined;\n  verifiedEmail: boolean | undefined;\n}\n\nconst shortenAddress = (address: string, digits: number = 4) => {\n  return `${address.substring(0, digits + 2)}...${address.substring(42 - digits)}`\n}\n\nconst LotteryWinners: React.FC<LotteryWinnersProps> = (props: LotteryWinnersProps) => {\n  const styles = useStyles();\n  const { poolId, userWinLottery, maximumBuy, purchasableCurrency, verifiedEmail } = props;\n  const [input, setInput] = useState(\"\");\n  const [searchedWinners, setSearchedWinners] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(1);\n  const [totalWinners, setTotalWinners] = useState(0);\n  const { data: winnersList } = useFetch<any>(`/user/winner-${!input ? 'list': 'search'}/${poolId}?page=${currentPage}&limit=10&${input ? `search=${input}`: ''}`);\n\n  const searchDebounce = () => {\n    if (winnersList) {\n      setTotalPage(winnersList.lastPage);\n      setCurrentPage(winnersList.page);\n      setTotalWinners(winnersList.total);\n      setSearchedWinners(winnersList.data);\n    }\n  };\n\n  useEffect(searchDebounce, [winnersList]);\n\n  const handleInputChange = debounce((e: any) => {\n    ReactDOM.unstable_batchedUpdates(() => {\n      setCurrentPage(1);\n      setInput(e.target.value);\n    });\n  }, 500);\n\n  return (\n    <div className={styles.LotteryWinners}>\n      <p className={styles.LotteryWinnersMessage} style={{ marginTop: 15 }}>There are {totalWinners || 0} winners. Please check your individual caps to see how much you can buy.</p>\n\n      {/*{*/}\n      {/*  searchedWinners.length > 0 && verifiedEmail && (*/}\n      {/*    userWinLottery ? (*/}\n      {/*      <p className={styles.LotteryWinnersMessage}> You have won the lottery! You can buy up to {numberWithCommas(`${maximumBuy}`)} {purchasableCurrency}.</p>*/}\n      {/*    ): (*/}\n      {/*      <p className={styles.LotteryWinnersMessage}>Unfortunately, you did not win a ticket to buy this time! See you next time.</p>*/}\n      {/*    )*/}\n      {/*  )}*/}\n\n      <div className={styles.tableSearchWrapper}>\n        <input\n          type=\"text\"\n          name=\"lottery-search\"\n          className={styles.tableSearch}\n          placeholder=\"Search for Wallet Address\"\n          onChange={handleInputChange}\n        />\n        <img src=\"/images/search.svg\" className={styles.tableSearchIcon} alt=\"search-icon\" />\n      </div>\n        <TableContainer component={Paper} className={styles.tableContainer}>\n          <Table className={styles.table} aria-label=\"simple table\">\n            <TableHead className={styles.tableHeaderWrapper}>\n              <TableRow>\n              {\n                headers.map(header => (\n                  <TableCell key={header} className={styles.tableHeader}>\n                    <span>\n                      {header}\n                    </span>\n                  </TableCell>\n                ))\n              }\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {searchedWinners && searchedWinners.length> 0 && searchedWinners.map((row: any, index) => (\n              <TableRow key={index}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {index + 1}\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                  {isWidthDown('sm', props.width) ?\n                    <Tooltip title={<p>{row.wallet_address}</p>}>\n                      <>\n                        {shortenAddress(row.wallet_address)}\n                      </>\n                    </Tooltip>\n                    : row.wallet_address\n                  }\n                </TableCell>\n                </TableRow>\n            ))}\n              </TableBody>\n            </Table>\n        </TableContainer>\n      {\n        searchedWinners && searchedWinners.length> 0 && (\n          <Pagination\n            count={totalPage}\n            color=\"primary\"\n            style={{ marginTop: 30 }} className={styles.pagination}\n            onChange={(e: any, value: any) => setCurrentPage(value)}\n            page={currentPage}\n          />\n        )\n      }\n    </div>\n  )\n}\n\nexport default withWidth()(LotteryWinners);\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/ClaimToken/index.tsx",["1513","1514","1515","1516"],"import React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Button from '../Button';\nimport Countdown from '../../../components/Base/Countdown';\nimport TransactionSubmitModal from '../../../components/Base/TransactionSubmitModal';\nimport useStyles from './style';\n\nimport { TokenType } from '../../../hooks/useTokenDetails';\nimport useUserRemainTokensClaim from '../hooks/useUserRemainTokensClaim';\nimport useTokenClaim from '../hooks/useTokenClaim';\nimport { convertTimeToStringFormat } from '../../../utils/convertDate';\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport {useDispatch} from \"react-redux\";\nimport {alertFailure} from \"../../../store/actions/alert\";\nimport ClaimInfo from \"./ClaimInfo\";\nimport useDetectClaimConfigApplying from \"../hooks/useDetectClaimConfigApplying\";\nimport BigNumber from \"bignumber.js\";\n\ntype ClaimTokenProps = {\n  releaseTime: Date | undefined\n  tokenDetails: TokenType | undefined\n  poolAddress: string | undefined\n  ableToFetchFromBlockchain: boolean | undefined\n  buyTokenSuccess: boolean | undefined\n  poolId: number | undefined;\n  disableAllButton: boolean;\n  poolDetails: any;\n}\n\nconst ClaimToken: React.FC<ClaimTokenProps> = (props: ClaimTokenProps) => {\n  const dispatch = useDispatch();\n  const styles = useStyles();\n\n  const [openClaimModal, setOpenClaimModal] = useState<boolean>(false);\n  const [userPurchased, setUserPurchased] = useState<number>(0);\n  const [userClaimInfo, setUserClaimInfo] = useState<any>();\n\n  const { account: connectedAccount } = useWeb3React();\n  const {\n    releaseTime,\n    poolDetails,\n    tokenDetails,\n    poolAddress,\n    poolId,\n    ableToFetchFromBlockchain,\n    buyTokenSuccess,\n    disableAllButton\n  } = props;\n\n  const nowTime = new Date();\n  const nowTimeUnix = new Date().getTime();\n  const { claimToken, setClaimTokenLoading, transactionHash, claimTokenSuccess, loading, error } = useTokenClaim(poolAddress, poolId);\n  const { retrieveClaimableTokens } = useUserRemainTokensClaim(tokenDetails, poolAddress, ableToFetchFromBlockchain);\n  const availableClaim = releaseTime ? nowTime >= releaseTime: false;\n\n  useEffect(() => {\n    const fetchUserPurchased  = async () => {\n      if (connectedAccount && poolAddress) {\n\n        const userClaimInformations = await retrieveClaimableTokens(connectedAccount, poolAddress);\n        console.log('userClaimInformations', userClaimInformations);\n        setUserClaimInfo(userClaimInformations);\n\n        setUserPurchased(\n          (userClaimInformations?.userPurchasedReturn || 0) as number\n        );\n      }\n    }\n\n    (ableToFetchFromBlockchain || buyTokenSuccess) && fetchUserPurchased();\n  }, [connectedAccount, poolAddress, ableToFetchFromBlockchain, claimTokenSuccess, buyTokenSuccess]);\n\n  useEffect(() => {\n    if (error) {\n      setOpenClaimModal(false);\n      setClaimTokenLoading(false);\n    }\n  }, [error]);\n\n\n  const userPurchasedValue = userClaimInfo?.userPurchased || 0;\n  const userClaimed = userClaimInfo?.userClaimed || 0;\n  const {\n    currentClaim,\n    currentClaimIndex,\n    nextClaim,\n    nextClaimIndex,\n    maximumTokenClaimUtilNow,\n  } = useDetectClaimConfigApplying(\n    poolDetails,\n    userPurchasedValue,\n    userClaimed\n  );\n\n  const validateClaimable = () => {\n    if (new BigNumber(userPurchased).lte(0)) {\n      dispatch(alertFailure('You not enough claimable token!'));\n      return false;\n    }\n\n    if (!availableClaim) {\n      dispatch(alertFailure('You can not claim token at current time!'));\n      return false;\n    }\n\n    if (nextClaim &&\n      (new BigNumber(maximumTokenClaimUtilNow).lte(0))\n    ) {\n      dispatch(alertFailure('You can not claim token at current time!'));\n      return false;\n    }\n\n    if (!nextClaim &&\n      (new BigNumber(maximumTokenClaimUtilNow).lte(0)) // maximumTokenClaimUtilNow <= 0\n    ) {\n      dispatch(alertFailure('You not enough claimable token!'));\n      return false;\n    }\n\n    if (disableAllButton) {\n      dispatch(alertFailure('Please switch to correct network before Claim!'));\n      return false;\n    }\n    return true;\n  };\n\n  const handleTokenClaim = async () => {\n    if (!validateClaimable()) {\n      return ;\n    }\n    try {\n      setOpenClaimModal(true);\n      await claimToken();\n    } catch (err) {\n      setOpenClaimModal(false);\n    }\n  }\n\n\n  return (\n    <div className={styles.poolDetailClaim}>\n\n      {releaseTime && releaseTime >= nowTime &&\n        <>\n          <p className={styles.poolDetailClaimTitle}>\n            <span>{'Token can claim from'}</span>\n            <strong>{releaseTime ? convertTimeToStringFormat(releaseTime || new Date()) : 'TBA'}</strong>\n          </p>\n          <Countdown startDate={releaseTime} />\n        </>\n      }\n\n      {/*<div className={styles.poolDetailClaimInfo}>*/}\n      {/*  <div className={styles.poolDetailClaimInfoBlock}>*/}\n      {/*    <span>You can claim</span>*/}\n      {/*    <span>{numberWithCommas(`${userPurchased}`)} {tokenDetails?.symbol}</span>*/}\n      {/*  </div>*/}\n      {/*</div>*/}\n\n      <ClaimInfo\n        poolDetails={poolDetails}\n        tokenDetails={tokenDetails}\n        userClaimInfo={userClaimInfo}\n        releaseTime={releaseTime}\n\n        currentClaim={currentClaim}\n        currentClaimIndex={currentClaimIndex}\n        nextClaim={nextClaim}\n        nextClaimIndex={nextClaimIndex}\n        maximumTokenClaimUtilNow={maximumTokenClaimUtilNow}\n      />\n\n      <Button\n        text={'Claim'}\n        backgroundColor={'#3232DC'}\n        // disabled={!availableClaim || userPurchased <= 0 || disableAllButton}\n        disabled={disableAllButton || !ableToFetchFromBlockchain} // If network is not correct, disable Claim Button\n        loading={loading}\n        onClick={handleTokenClaim}\n      />\n\n      <TransactionSubmitModal\n        opened={openClaimModal}\n        handleClose={() => { setOpenClaimModal(false); setClaimTokenLoading(false)}}\n        transactionHash={transactionHash}\n        networkAvailable={poolDetails?.networkAvailable}\n      />\n    </div>\n  )\n}\n\nexport default ClaimToken;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/usdt-allowance.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/usdt-approve.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/claim-token.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/buy-token.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/token.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/PoolInfoTable/ExchangeRateUsdtRow.tsx",["1517","1518","1519"],"import React, {useState} from 'react';\nimport useStyles from \"../style\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport {ACCEPT_CURRENCY} from \"../../../constants\";\nimport BigNumber from \"bignumber.js\";\nimport {getIconCurrencyUsdt} from \"../../../utils/usdt\";\n\nfunction ExchangeRateUsdtRow(props: any) {\n  const styles = useStyles();\n  const {\n    poolDetail, poolDetails, key, label, force,\n  } = props;\n  const [showRateReserveUSDT, setShowRateReverseUSDT] = useState<boolean>(false);\n\n  const { currencyIcon, currencyName } = getIconCurrencyUsdt(poolDetails);\n  const tokenDetails = poolDetails?.tokenDetails;\n\n  let reverseRate = `1 ${tokenDetails.symbol} = ${poolDetails?.ethRate} ${currencyName}`;\n  let displayRate = `1 ${currencyName} = ${new BigNumber(1).div(poolDetails?.ethRate).toNumber()} ${tokenDetails?.symbol}`;\n\n  if (force) {\n    reverseRate = `1 ${tokenDetails.symbol} = ${poolDetails.priceUsdt} USD`;\n    displayRate = `1 USD = ${new BigNumber(1).div(poolDetails.priceUsdt).toNumber()} ${tokenDetails?.symbol}`;\n  }\n\n  // console.log('[ExchangeRateUsdtRow] - reverseRate', reverseRate);\n  // console.log('[ExchangeRateUsdtRow] - displayRate', displayRate);\n\n  return (\n    <>\n      <div className={styles.poolDetailBasic} key={key}>\n        <span className={styles.poolDetailBasicLabel}>{poolDetail.label || label}</span>\n        <p className={styles.poolsDetailBasicText}>\n          <Tooltip title={<p style={{ fontSize: 15 }}>{displayRate}</p>}>\n            <span>\n              {poolDetails?.purchasableCurrency != ACCEPT_CURRENCY.ETH &&\n                <>\n                  {/*NOTETH--USDT--*/}\n                  {/*{poolDetails?.purchasableCurrency}--{key}-{displayRate}---*/}\n\n                  {showRateReserveUSDT ? reverseRate : displayRate}\n                </>\n              }\n\n              {poolDetails?.purchasableCurrency === ACCEPT_CURRENCY.ETH &&\n                <>\n                  {showRateReserveUSDT ? reverseRate : displayRate}\n                </>\n              }\n\n            </span>\n          </Tooltip>\n          <img\n            src={poolDetail.utilIcon}\n            className={styles.poolDetailUtil}\n            onClick={() => {\n              setShowRateReverseUSDT(!showRateReserveUSDT);\n            }}\n            key={key}\n          />\n        </p>\n      </div>\n    </>\n  );\n}\n\nexport default ExchangeRateUsdtRow;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/PoolInfoTable/ExchangeRateEthRow.tsx",["1520","1521","1522"],"import React, {useState} from 'react';\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport {ACCEPT_CURRENCY} from \"../../../constants\";\nimport useStyles from \"../style\";\nimport BigNumber from 'bignumber.js';\n\nfunction ExchangeRateEthRow(props: any) {\n  const styles = useStyles();\n  const {\n    poolDetail, poolDetails, key,\n  } = props;\n  const [showRateReserve, setShowRateReverse] = useState<boolean>(false);\n\n  if (poolDetails?.purchasableCurrency != ACCEPT_CURRENCY.ETH) {\n    return <></>;\n  }\n\n  if (!poolDetails?.displayPriceRate) {\n    return <></>;\n  }\n\n  const tokenDetails = poolDetails?.tokenDetails;\n  const reverseRate = `1 ${tokenDetails.symbol} = ${poolDetails.priceUsdt} USD`;\n  const displayRate = `1 USD = ${new BigNumber(1).div(poolDetails.priceUsdt).toNumber()} ${tokenDetails?.symbol}`;\n\n  return (\n    <>\n      <div className={styles.poolDetailBasic} key={key}>\n        <span className={styles.poolDetailBasicLabel}>{poolDetail.label}</span>\n        <p className={styles.poolsDetailBasicText}>\n          <Tooltip title={<p style={{ fontSize: 15 }}>{displayRate}</p>}>\n            <span>\n             {poolDetails?.purchasableCurrency != ACCEPT_CURRENCY.ETH &&\n               <>\n                 {\n                   showRateReserve ? reverseRate : displayRate\n                 }\n               </>\n             }\n             {poolDetails?.purchasableCurrency === ACCEPT_CURRENCY.ETH &&\n               <>\n                 { !!poolDetails?.displayPriceRate && (showRateReserve ? reverseRate : displayRate) }\n               </>\n             }\n            </span>\n          </Tooltip>\n\n          <img\n            src={poolDetail.utilIcon}\n            className={styles.poolDetailUtil}\n            onClick={() => {\n              setShowRateReverse(!showRateReserve);\n            }}\n            key={key}\n          />\n        </p>\n      </div>\n    </>\n  );\n}\n\nexport default ExchangeRateEthRow;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/affiliate.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/transaction.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/store/constants/campaign.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Pools/Pool/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Layout/LandingLayout/LandingLayout.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Landing/ModalContent/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Landing/Card/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/user.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ForgotPassword/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Login/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Register/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useDetectClaimConfigApplying.ts",["1523","1524","1525"],"import { useState, useEffect, useCallback } from 'react';\nimport moment from \"moment\";\nimport BigNumber from \"bignumber.js\";\nimport usePoolDepositAction from \"./usePoolDepositAction\";\n\n\n\nconst useDetectClaimConfigApplying = (\n  poolDetails: any,\n  userPurchased: any,\n  userClaimed: any,\n) => {\n\n  const [currentClaim, setCurrentClaim] = useState<any>();\n  const [currentClaimIndex, setCurrentClaimIndex] = useState(0);\n  const [nextClaim, setNextClaim] = useState<any>();\n  const [nextClaimIndex, setNextClaimIndex] = useState(0);\n  const [maximumTokenClaimUtilNow, setMaximumTokenClaimUtilNow] = useState<any>(0);\n  let detechCurrentPhaseInterval = undefined as any;\n\n  useEffect(() => {\n    const detechCurrentPhase = () => {\n      const now = moment();\n      const nowUnix = now.unix();\n      let validRow = null;\n      let validIndex = -1;\n      for (let i = 0; i < poolDetails.campaignClaimConfig.length; i++) {\n        const row = poolDetails.campaignClaimConfig[i];\n        if (nowUnix < row.start_time) {\n          break;\n        } else {\n          validRow = row;\n          validIndex = i;\n        }\n      }\n      if (validRow) {\n        setCurrentClaim(validRow);\n        setCurrentClaimIndex(validIndex);\n\n        const next = poolDetails.campaignClaimConfig[validIndex + 1];\n        console.log('NextClaim: next: ', next);\n        if (next) {\n          setNextClaim(next);\n          setNextClaimIndex(validIndex + 1);\n        }\n\n        if (validIndex >= 0 && userPurchased && userClaimed) {\n          const maximum = (new BigNumber(validRow?.max_percent_claim || 0).dividedBy(100).multipliedBy(userPurchased || 0)).minus(userClaimed);\n          console.log('validRow.max_percent_claim', validRow?.max_percent_claim, userPurchased, userClaimed, maximum.toFixed());\n          if (maximum.lt(0)) {\n            setMaximumTokenClaimUtilNow(0);\n          } else {\n            setMaximumTokenClaimUtilNow(maximum.toFixed());\n          }\n        }\n      }\n      console.log('Finish validRow', validRow, validIndex);\n    };\n\n    if (poolDetails && poolDetails.campaignClaimConfig && poolDetails.campaignClaimConfig.length > 0) {\n      detechCurrentPhase();\n      detechCurrentPhaseInterval = setInterval(() => {\n        console.log('Deteching current phase....');\n        detechCurrentPhase();\n      }, 10000);\n    }\n\n    return () => {\n      detechCurrentPhaseInterval && clearInterval(detechCurrentPhaseInterval);\n    }\n  }, [poolDetails, userPurchased, userClaimed]);\n\n  return {\n    currentClaim,\n    currentClaimIndex,\n    nextClaim,\n    nextClaimIndex,\n    maximumTokenClaimUtilNow,\n  }\n};\n\nexport default useDetectClaimConfigApplying;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useTokenClaim.ts",["1526","1527","1528","1529","1530"],"import { useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\n\nimport useUserClaimSignature from '../hooks/useUserClaimSignature';\nimport useWalletSignature from '../../../hooks/useWalletSignature';\nimport PreSale_ABI from '../../../abi/PreSalePool.json';\nimport { getContract } from '../../../utils/contract';\nimport { alertSuccess, alertFailure } from '../../../store/actions/alert';\nimport {fixGasLimitWithProvider} from \"../../../utils\";\nimport BigNumber from 'bignumber.js';\n\nconst useTokenClaim = (poolAddress: string | undefined, poolId: number | undefined) => {\n  const { library, account } = useWeb3React();\n  const dispatch = useDispatch();\n\n  const [claimTokenSuccess, setClaimTokenSuccess] = useState<boolean>(false);\n  const [claimTransactionHash, setClaimTransactionHash] = useState(\"\");\n  const [claimTokenLoading, setClaimTokenLoading] = useState<boolean>(false);\n  const [claimError, setClaimError] = useState<string>(\"\");\n\n  const { error, signMessage, signature: authSignature, setSignature } = useWalletSignature();\n  const { signature, amount, error: claimSignError, setSignature: setUserClaimSignature, loadingClaim } = useUserClaimSignature(account, poolId, authSignature);\n\n  useEffect(() => {\n    poolAddress &&\n    signature &&\n    amount &&\n    !claimError &&\n    !loadingClaim &&\n    claimTokenWithSignature(signature, amount);\n  }, [signature, poolAddress, amount, claimError, loadingClaim]);\n\n  useEffect(() => {\n    if (error || claimSignError) {\n      const errorMessage = error || claimSignError;\n      setClaimError(errorMessage as string);\n      setClaimTokenLoading(false);\n      setSignature(\"\");\n      setUserClaimSignature(\"\");\n    }\n  }, [error, claimSignError]);\n\n  const claimTokenWithSignature = useCallback(\n    async (signature: string, amount: string) => {\n\n    console.log('poolAddress, signature, amount, account:', poolAddress, signature, amount, account);\n    if (poolAddress && signature && amount && account) {\n\n      if (amount && (new BigNumber(amount)).lte(0)) {\n        const msg = 'You can not claim token at current time!';\n        dispatch(alertFailure(msg));\n        setClaimTokenLoading(false);\n        setClaimError(msg);\n        setSignature(\"\");\n        setUserClaimSignature(\"\");\n        return;\n      }\n\n      try {\n         const contract = getContract(poolAddress, PreSale_ABI, library, account as string);\n         if (contract) {\n           // let overrides = fixGasLimitWithProvider(library, 'claim');\n           // const transaction = await contract.claimTokens(account, amount, signature, overrides);\n           const transaction = await contract.claimTokens(account, amount, signature);\n\n           setSignature(\"\");\n           setUserClaimSignature(\"\");\n           setClaimTransactionHash(transaction.hash);\n\n           await transaction.wait(1);\n\n           setClaimTokenSuccess(true);\n           setClaimTokenLoading(false);\n           dispatch(alertSuccess(\"Token Claim Successful\"));\n         }\n      } catch (err) {\n        dispatch(alertFailure(err.message));\n        setClaimTokenLoading(false);\n        setClaimError(err.message);\n        setSignature(\"\");\n        setUserClaimSignature(\"\");\n      }\n    }\n  }, [poolAddress, library, account, amount, signature]);\n\n  const claimToken = useCallback(async () => {\n    if (poolAddress) {\n      try {\n        setClaimTransactionHash(\"\");\n        setClaimError(\"\");\n        setClaimTokenLoading(true);\n        setClaimTokenSuccess(false);\n\n        await signMessage();\n      } catch (err) {\n        dispatch(alertFailure(err.message));\n        setClaimTokenLoading(false);\n        setClaimError(err.message);\n        setSignature(\"\");\n      }\n    }\n  }, [poolAddress, library, account]);\n\n  return {\n    claimToken,\n    transactionHash: claimTransactionHash,\n    loading: claimTokenLoading,\n    setClaimTokenLoading,\n    setClaimTransactionHash,\n    claimTokenSuccess,\n    error: claimError\n  }\n}\n\nexport default useTokenClaim;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useUserRemainTokensClaim.ts",["1531"],"import { useState, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\n\nimport { TokenType } from '../../../hooks/useTokenDetails';\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\nimport{ getContractInstance, SmartContractMethod } from '../../../services/web3';\nimport Pool_ABI from '../../../abi/PreSalePool.json';\n\nconst useUserRemainTokensClaim = (\n  tokenDetails: TokenType | undefined,\n  poolAddress: string | undefined,\n  ableToFetchFromBlockchain: boolean | undefined\n) => {\n  const [userPurchasedLoading, setUserPurchasedLoading] = useState<boolean>(false);\n\n  const { appChainID } = useTypedSelector(state  => state.appNetwork).data;\n  const connector  = useTypedSelector(state => state.connector).data;\n\n  const retrieveClaimableTokens = useCallback(async (userAddress: string, poolAddress: string) => {\n    try {\n      if (userAddress && poolAddress && tokenDetails && ableToFetchFromBlockchain\n          && ethers.utils.isAddress(userAddress)\n          && ethers.utils.isAddress(poolAddress)\n      ) {\n        setUserPurchasedLoading(true);\n        const contract = getContractInstance(Pool_ABI, poolAddress, connector, appChainID, SmartContractMethod.Read);\n        if (contract) {\n          const userPurchased = await contract.methods.userPurchased(userAddress).call();\n\n          console.log('userPurchased===>', userPurchased);\n\n          const userClaimed = await contract.methods.userClaimed(userAddress).call();\n          const userPurchasedReturn = new BigNumber(userPurchased).minus(new BigNumber(userClaimed)).div(new BigNumber(10).pow(tokenDetails.decimals)).toFixed();\n\n          return {\n            userPurchased: new BigNumber(userPurchased).div(new BigNumber(10).pow(tokenDetails.decimals)).toFixed(),\n            userClaimed: new BigNumber(userClaimed).div(new BigNumber(10).pow(tokenDetails.decimals)).toFixed(),\n            userPurchasedReturn,\n          }\n        }\n        return {\n          userPurchased: 0,\n          userClaimed: 0,\n          userPurchasedReturn: 0,\n          tokenDecimals: tokenDetails.decimals,\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }, [appChainID, connector, poolAddress, ableToFetchFromBlockchain]);\n\n  return {\n    userPurchasedLoading,\n    retrieveClaimableTokens\n  }\n}\n\nexport default useUserRemainTokensClaim;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/ClaimToken/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/LotteryWinners/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/PoolAbout/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useTokenSold.ts",["1532"],"import { useState, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\n\nimport { TokenType } from '../../../hooks/useTokenDetails';\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\nimport{ getContractInstance, SmartContractMethod } from '../../../services/web3';\nimport Pool_ABI from '../../../abi/Pool.json';\n\nconst DECIMAL_PLACES = 8;\n\nconst useTokenSold = (\n  tokenDetails: TokenType | undefined,\n  poolAddress: string | undefined,\n  ableToFetchFromBlockchain: boolean | undefined\n) => {\n  const [tokenSold, setTokenSold] = useState<any>();\n  const [tokenSoldLoading, setTokenSoldLoading] = useState<boolean>(false);\n  const { appChainID } = useTypedSelector(state  => state.appNetwork).data;\n  const connector  = useTypedSelector(state => state.connector).data;\n\n  const retrieveTokenSold = useCallback(async (poolAddress: string) => {\n    try {\n      if (poolAddress && tokenDetails && ableToFetchFromBlockchain\n          && ethers.utils.isAddress(poolAddress)\n         ) {\n           setTokenSoldLoading(true);\n           const contract = getContractInstance(Pool_ABI, poolAddress, connector, appChainID, SmartContractMethod.Read);\n           if (contract) {\n             let tokenSold = await contract.methods.tokenSold().call();\n             tokenSold = new BigNumber(tokenSold).div(new BigNumber(10).pow(18)).toFixed(DECIMAL_PLACES);\n             setTokenSold(tokenSold);\n             return tokenSold;\n           }\n           return 0;\n         }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }, [appChainID, connector, poolAddress, ableToFetchFromBlockchain]);\n\n  if (ableToFetchFromBlockchain && poolAddress && !tokenSoldLoading) {\n    retrieveTokenSold(poolAddress || '');\n  }\n\n  return {\n    tokenSoldLoading,\n    tokenSold,\n    retrieveTokenSold\n  }\n};\n\nexport default useTokenSold;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useTokenApprove.ts",["1533","1534"],"import { useState, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport { useWeb3React } from '@web3-react/core';\nimport { useDispatch } from 'react-redux';\n\nimport { TRANSACTION_ERROR_MESSAGE } from '../constants/alert';\nimport { MAX_INT } from '../services/web3';\nimport { alertSuccess, alertFailure } from '../store/actions/alert';\nimport { getContract } from '../utils/contract';\nimport { TokenType } from '../hooks/useTokenDetails';\n\nimport ERC20_ABI from '../abi/Erc20.json';\nimport {fixGasLimitWithProvider} from \"../utils\";\n\nconst useTokenAllowance = (\n  token: TokenType | undefined,\n  owner: string | null | undefined,\n  spender: string | null | undefined,\n  sotaABI: false\n) => {\n  const [tokenApproveLoading, setTokenApproveLoading] = useState<boolean>(false);\n  const [transactionHash, setTransactionHash] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const { library, account } = useWeb3React();\n\n    const approveToken = useCallback(async () => {\n      setTransactionHash(\"\");\n\n      try {\n        if (token && spender && owner\n            && ethers.utils.isAddress(owner)\n            && ethers.utils.isAddress(spender)\n            && ethers.utils.isAddress(token.address)\n           ) {\n             setTokenApproveLoading(true);\n\n             const contract = getContract(token.address, ERC20_ABI, library, account as string);\n\n             if (contract) {\n               // let overrides = fixGasLimitWithProvider(library, 'approve');\n               // const transaction = await contract.approve(spender, MAX_INT, overrides);\n               const transaction = await contract.approve(spender, MAX_INT);\n               console.log('Approve Token', transaction);\n\n              setTransactionHash(transaction.hash);\n\n               await transaction.wait(1);\n\n              dispatch(alertSuccess(\"Token Approve Successful!\"));\n               setTokenApproveLoading(false);\n             }\n           }\n      } catch (err) {\n        console.log('[ERROR] - useTokenAllowance:', err);\n        dispatch(alertFailure(TRANSACTION_ERROR_MESSAGE));\n        setTokenApproveLoading(false);\n        throw new Error(err.message);\n      }\n  }, [owner, spender, token]);\n\n  return {\n    tokenApproveLoading,\n    approveToken,\n    setTokenApproveLoading,\n    transactionHash\n  }\n}\n\nexport default useTokenAllowance;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/usePoolDepositAction.ts",["1535","1536","1537","1538","1539","1540","1541","1542","1543","1544","1545","1546","1547","1548","1549"],"import { useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\n\nimport useUserPurchaseSignature from '../hooks/useUserPurchaseSignature';\nimport useWalletSignature from '../../../hooks/useWalletSignature';\nimport { alertSuccess, alertFailure } from '../../../store/actions/alert';\nimport Pool_ABI from '../../../abi/Pool.json';\nimport PreSalePool from '../../../abi/PreSalePool.json';\nimport { getContract } from '../../../utils/contract';\nimport { TRANSACTION_ERROR_MESSAGE } from '../../../constants/alert';\nimport {fixGasLimitWithProvider} from \"../../../utils\";\n\ntype PoolDepositActionParams = {\n  poolAddress?: string;\n  poolId?: number;\n  purchasableCurrency: string;\n  amount: string;\n  isClaimable: boolean;\n  networkAvailable: string;\n}\n\nconst USDT_ADDRESS = process.env.REACT_APP_USDT_SMART_CONTRACT;\nconst USDC_ADDRESS = process.env.REACT_APP_USDC_SMART_CONTRACT;\nconst USDT_OR_USDC_DECIMALS = 6;\n\nconst usePoolDepositAction = ({ poolAddress, poolId, purchasableCurrency, amount, isClaimable, networkAvailable }: PoolDepositActionParams) => {\n  const dispatch = useDispatch();\n\n  const [depositError, setDepositError] = useState(\"\");\n  const [tokenDepositTransaction, setTokenDepositTransaction] = useState<string>(\"\");\n  const [tokenDepositLoading, setTokenDepositLoading] = useState<boolean>(false);\n  const [tokenDepositSuccess, setTokenDepositSuccess] = useState<boolean>(false);\n\n  const { account: connectedAccount, library } = useWeb3React();\n  const { error, signMessage, signature: authSignature, setSignature } = useWalletSignature();\n  const { signature, minBuy, maxBuy, error: buyError, setSignature: setUserPurchasedSignature } = useUserPurchaseSignature(connectedAccount, poolId, authSignature);\n\n  useEffect(() => {\n    poolAddress &&\n    purchasableCurrency &&\n    signature &&\n    minBuy &&\n    maxBuy &&\n    !depositError &&\n    depositWithSignature(poolAddress, purchasableCurrency, amount, signature, `${minBuy}`, maxBuy);\n  }, [signature, poolAddress, purchasableCurrency, amount, minBuy, maxBuy, depositError]);\n\n\n  useEffect(() => {\n    if (error || buyError) {\n      const errorMessage = error || buyError;\n      setDepositError(errorMessage as string);\n      setTokenDepositLoading(false);\n      setSignature(\"\");\n      setUserPurchasedSignature(\"\");\n    }\n  }, [error, buyError]);\n\n  const depositWithSignature = useCallback(async (\n    poolAddress: string,\n    acceptCurrency: string,\n    amount: string,\n    signature: string,\n    minBuy: string,\n    maxBuy: string\n  ) => {\n    try {\n      if (minBuy && maxBuy && signature && amount) {\n        const abiUse = isClaimable ? PreSalePool: Pool_ABI;\n        const poolContract = getContract(poolAddress, abiUse, library, connectedAccount as string);\n\n        const method = acceptCurrency === 'ETH' ? 'buyTokenByEtherWithPermission': 'buyTokenByTokenWithPermission';\n        let decimals = 6;\n        const isBSC = networkAvailable == 'bsc';\n        if (isBSC) {\n          if (acceptCurrency == 'ETH') {\n            decimals = 18;\n          } else if (acceptCurrency == 'USDT') {\n            decimals = 18;\n          } else if (acceptCurrency == 'USDC') {\n            decimals = 18;\n          }\n        } else {\n          if (acceptCurrency == 'ETH') {\n            decimals = 18;\n          } else if (acceptCurrency == 'USDT') {\n            decimals = 6;\n          } else if (acceptCurrency == 'USDC') {\n            decimals = 6;\n          }\n        }\n\n        let buyCurr = 'ETH';\n        if (isBSC) {\n          if (acceptCurrency === \"USDT\") {\n            buyCurr = process.env.REACT_APP_USDT_BSC_SMART_CONTRACT || '';\n          } else if (acceptCurrency === \"USDC\") {\n            buyCurr = process.env.REACT_APP_USDC_BSC_SMART_CONTRACT || '';\n          }\n        } else {\n          if (acceptCurrency === \"USDT\") {\n            buyCurr = process.env.REACT_APP_USDT_SMART_CONTRACT || '';\n          } else if (acceptCurrency === \"USDC\") {\n            buyCurr = process.env.REACT_APP_USDC_SMART_CONTRACT || '';\n          }\n        }\n\n        const params = acceptCurrency === 'ETH' ? [\n          connectedAccount,\n          connectedAccount,\n          maxBuy,\n          minBuy,\n          signature,\n          {\n            value: new BigNumber(amount).multipliedBy(10 ** 18).toFixed()\n          }\n        ]: [\n          connectedAccount,\n          // acceptCurrency === \"USDT\" ? USDT_ADDRESS: USDC_ADDRESS,\n          buyCurr,\n          new BigNumber(amount).multipliedBy(10 ** decimals).toFixed(),\n          connectedAccount,\n          maxBuy,\n          minBuy,\n          signature\n        ];\n\n        // let overrides = fixGasLimitWithProvider(library, 'buy');\n        const transaction = await poolContract[method](...params);\n\n        setUserPurchasedSignature(\"\");\n        setSignature(\"\");\n        setTokenDepositTransaction(transaction.hash);\n\n        await transaction.wait(1);\n\n        dispatch(alertSuccess(\"Token Deposit Successful!\"));\n        setTokenDepositLoading(false);\n        setTokenDepositSuccess(true);\n\n      }\n    } catch (err) {\n      console.log('[ERROR] - depositWithSignature:', err);\n      dispatch(alertFailure(TRANSACTION_ERROR_MESSAGE));\n      setDepositError(TRANSACTION_ERROR_MESSAGE);\n      setTokenDepositLoading(false);\n      setSignature(\"\");\n      setUserPurchasedSignature(\"\");\n    }\n  }, [minBuy, maxBuy, poolAddress, isClaimable]);\n\n  const deposit = useCallback(async () => {\n    if (amount && new BigNumber(amount).gt(0) && poolAddress) {\n      try {\n        setTokenDepositTransaction(\"\");\n        setDepositError(\"\");\n        setTokenDepositLoading(true);\n        setTokenDepositSuccess(false);\n\n        await signMessage();\n      } catch (err) {\n        console.log('[ERROR] - deposit:', err);\n        dispatch(alertFailure(TRANSACTION_ERROR_MESSAGE));\n        setDepositError(TRANSACTION_ERROR_MESSAGE);\n        setSignature(\"\");\n        setTokenDepositLoading(false);\n      }\n    }\n  }, [connectedAccount, library, poolAddress, amount])\n\n  // const estimateFee = useCallback(async (amount: string, acceptCurrency: string) => {\n  //   try {\n  //     setEstimateFeeLoading(true);\n\n  //     if (amount && new BigNumber(amount).gt(0) && poolAddress && acceptCurrency) {\n  //       const gasPrice = await library.getGasPrice();\n  //       const poolContract = getContract(poolAddress, Pool_ABI, library, connectedAccount as string);\n  //       const gasPriceCal = new BigNumber(gasPrice._hex).div(new BigNumber(10).pow(18));\n\n  //       const params = acceptCurrency === 'ETH' ? [\n  //         connectedAccount,\n  //         connectedAccount,\n  //         \"100000000000\",\n  //         \"100000000000\",\n  //         \"0x450859e7066471c9e38a481908e3547240285db6af24eed2615a3d825f043e5052bffc0815e98b6a4365526307e2f18b9552bb747739789d624ea666e4fb87ea1b\",\n  //         {\n  //           value: new BigNumber(amount).multipliedBy(10 ** 18).toFixed()\n  //         }\n  //       ]: [\n  //         connectedAccount,\n  //         acceptCurrency ===  \"USDT\" ? USDT_ADDRESS: USDC_ADDRESS,\n  //         new BigNumber(amount).multipliedBy(10 ** 18).toFixed(),\n  //         connectedAccount,\n  //         \"100000000000\",\n  //         \"299999999990\",\n  //         \"0x450859e7066471c9e38a481908e3547240285db6af24eed2615a3d825f043e5052bffc0815e98b6a4365526307e2f18b9552bb747739789d624ea666e4fb87ea1b\"\n  //       ];\n\n  //       const method = acceptCurrency === 'ETH' ? 'buyTokenByEtherWithPermission': 'buyTokenByTokenWithPermission';\n\n  //       const estimateFee = await poolContract.estimateGas[method](...params);\n\n  //       setEstimateErr(\"\");\n  //       setEstimateFeeLoading(false);\n\n  //       return new BigNumber(estimateFee._hex).multipliedBy(gasPriceCal).toNumber();\n  //     } else {\n  //       setEstimateErr(\"\");\n  //       setEstimateFeeLoading(false);\n  //       return 0;\n  //     }\n\n  //   } catch(err) {\n  //     console.error(err.message);\n  //     setEstimateFeeLoading(false);\n  //     setEstimateErr(err.message);\n  //   }\n  // }, [poolAddress, connectedAccount]);\n\n  return {\n    tokenDepositSuccess,\n    deposit,\n    tokenDepositLoading,\n    tokenDepositTransaction,\n    setTokenDepositTransaction,\n    setTokenDepositLoading,\n    depositError,\n  };\n}\n\nexport default usePoolDepositAction;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/ClaimToken/ClaimInfo.tsx",["1550","1551","1552","1553","1554","1555"],"import React from 'react';\nimport {convertUnixTimeToDateTime} from \"../../../utils/convertDate\";\nimport useStyles from \"./style\";\nimport {numberWithCommas} from \"../../../utils/formatNumber\";\nimport BigNumber from 'bignumber.js';\nimport {useWeb3React} from \"@web3-react/core\";\nimport useGetAirdrop from \"../../../hooks/useGetAirdrop\";\n\nfunction ClaimInfo(props: any) {\n  const styles = useStyles();\n  const {\n    poolDetails,\n    tokenDetails,\n    userClaimInfo,\n    releaseTime,\n    currentClaim,\n    currentClaimIndex,\n    nextClaim,\n    nextClaimIndex,\n    maximumTokenClaimUtilNow,\n  } = props;\n\n  const {\n    userPurchased = 0,\n    userClaimed = 0,\n    userPurchasedReturn = 0,\n  } = (userClaimInfo || {});\n\n  const { account: connectedAccount } = useWeb3React();\n  const { airdrop, loading: loadingAirdrop } = useGetAirdrop({ campaignId: poolDetails?.id, connectedAccount });\n\n  // const {\n  //   currentClaim,\n  //   currentClaimIndex,\n  //   nextClaim,\n  //   nextClaimIndex,\n  //   maximumTokenClaimUtilNow,\n  // } = useDetectClaimConfigApplying(poolDetails, userPurchased, userClaimed);\n\n  return (\n    <>\n      <div className={styles.poolDetailClaimInfo}>\n        <div className={styles.poolDetailClaimInfoBlock}>\n          <span>Total bought tokens</span>\n          <span>{numberWithCommas(`${userPurchased || 0}`)} {tokenDetails?.symbol}</span>\n        </div>\n\n        <div className={styles.poolDetailClaimInfoBlock}>\n          <span>You have claimed</span>\n          <span>{numberWithCommas(`${userClaimed || 0}`)} {tokenDetails?.symbol}</span>\n        </div>\n\n\n        <div className={styles.poolDetailClaimInfoBlock}>\n          <span>Remaining tokens (until now)</span>\n          <span>{numberWithCommas(`${maximumTokenClaimUtilNow || 0}`)} {tokenDetails?.symbol}</span>\n        </div>\n\n        {airdrop &&\n          <>\n            <div className={styles.poolDetailClaimInfoBlock}>\n              <span>ETH Airdrop</span>\n              <span>{airdrop?.eth_amount || 0} ETH</span>\n            </div>\n\n            <div className={styles.poolDetailClaimInfoBlock}>\n              <span>Token Airdrop</span>\n              <span>{airdrop?.token_amount || 0} {tokenDetails?.symbol}</span>\n            </div>\n          </>\n        }\n\n        {\n          !!userPurchased\n          && new BigNumber(userPurchased).gt(0) // User bought any token\n          && nextClaim // Current time user have next Claim Phase\n          && (new BigNumber(maximumTokenClaimUtilNow).lte(0)) // Only user claimed all token in Current Phase and waiting Next Claim Phase\n          &&\n          <>\n            <div className={styles.poolDetailClaimInfoBlock}>\n              <span>Next Claim Time</span>\n              <span>{convertUnixTimeToDateTime(nextClaim?.start_time, 1)}</span>\n            </div>\n          </>\n        }\n\n      </div>\n\n    </>\n  );\n}\n\nexport default ClaimInfo;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useUserPurchased.ts",["1556"],"import { useState, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\n\nimport { TokenType } from '../../../hooks/useTokenDetails';\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\nimport{ getContractInstance, SmartContractMethod } from '../../../services/web3';\nimport Pool_ABI from '../../../abi/Pool.json';\n\nconst useUserPurchased = (\n  tokenDetails: TokenType | undefined, \n  poolAddress: string | undefined,\n  ableToFetchFromBlockchain: boolean | undefined\n) => {\n  const [userPurchasedLoading, setUserPurchasedLoading] = useState<boolean>(false);\n\n  const { appChainID } = useTypedSelector(state  => state.appNetwork).data;\n  const connector  = useTypedSelector(state => state.connector).data;\n\n  const retrieveUserPurchased = useCallback(async (userAddress: string, poolAddress: string) => {\n    try {\n      if (userAddress && poolAddress && tokenDetails && ableToFetchFromBlockchain \n          && ethers.utils.isAddress(userAddress) \n          && ethers.utils.isAddress(poolAddress) \n         ) {\n           setUserPurchasedLoading(true);\n\n           const contract = getContractInstance(Pool_ABI, poolAddress, connector, appChainID, SmartContractMethod.Read); \n\n           if (contract) {\n             const userPurchased = await contract.methods.userPurchased(userAddress).call();\n             const userPurchasedReturn = new BigNumber(userPurchased).div(new BigNumber(10).pow(tokenDetails.decimals)).toFixed();\n\n             return userPurchasedReturn;\n           }\n\n           return 0;\n         }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }, [appChainID, connector, poolAddress, ableToFetchFromBlockchain]);\n\n  return {\n    userPurchasedLoading,\n    retrieveUserPurchased\n  }\n}\n\nexport default useUserPurchased;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useTokenAllowance.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/constants/purchasableCurrency.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useTokenBalance.ts",["1557"],"import { useState, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSelector } from 'react-redux';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\n\nimport { TokenType } from '../hooks/useTokenDetails';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { getContractInstance, SmartContractMethod } from '../services/web3';\n\nimport ERC20_ABI from '../abi/Erc20.json';\n\nconst useTokenBalance = (token: TokenType | undefined, userAddress: string | null | undefined) => {\n  const [tokenBalanceLoading, setTokenBalanceLoading] = useState<boolean>(false);\n\n  const { library } = useWeb3React();\n  const { appChainID }  = useSelector((state: any) => state.appNetwork).data;\n  const connector  = useTypedSelector(state => state.connector).data;\n\n  const retrieveTokenBalance = useCallback(async (token: TokenType | undefined, userAddress: string) => {\n    if (token \n    && userAddress \n    && ethers.utils.isAddress(userAddress) \n    && (ethers.utils.isAddress(token.address))) {\n      setTokenBalanceLoading(true);\n      const contract = getContractInstance(ERC20_ABI, token.address, connector, appChainID, SmartContractMethod.Read);\n\n      if (contract) {\n        const balance = await contract.methods.balanceOf(userAddress).call();\n        const balanceReturn = new BigNumber(balance).div(new BigNumber(10).pow(token?.decimals as number)).toFixed(7);\n\n        return balanceReturn;\n      }\n    }\n\n    if (token && token?.symbol === 'ETH') {\n        const balance = await library.provider.request({ method: 'eth_getBalance', params: [userAddress, 'latest'] });\n        const balanceReturn = new BigNumber(balance).div(new BigNumber(10).pow(token?.decimals as number)).toFixed(7);\n        return balanceReturn;\n    }\n\n    return 0;\n  }, [userAddress, token, appChainID, connector]);\n\n  return {\n    retrieveTokenBalance,\n    tokenBalanceLoading\n  }\n}\n\nexport default useTokenBalance;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useUserClaimSignature.ts",["1558"],"\nimport { useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport axios from '../../../services/axios';\nimport { alertFailure } from '../../../store/actions/alert';\n\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst useUserClaimSignature = (connectedAccount: string | undefined | null, campaignId: number | undefined, authSignature: string | undefined) => {\n  const dispatch = useDispatch();\n  const [signature, setSignature] = useState<string | undefined>(undefined);\n  const [amount, setAmount] = useState<string| undefined>(\"\");\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [loadingClaim, setLoadingClaim] = useState<boolean | undefined>(false);\n\n  useEffect(() => {\n      const getUserSignature = async () => {\n        setError(\"\");\n        setSignature(\"\");\n        setLoadingClaim(true);\n\n        try {\n          const config = {\n            headers: {\n              msgSignature: MESSAGE_INVESTOR_SIGNATURE\n            }\n          }\n          const response = await axios.post('/user/claim', {\n            campaign_id: campaignId,\n            wallet_address: connectedAccount,\n            signature: authSignature\n          }, config);\n\n          if (response.data && response.status && response.status === 200) {\n            const { data, message, status } = response.data;\n            if (data && status === 200) {\n              setSignature(data.signature);\n              setAmount(data.amount);\n            }\n\n            if (message && status !== 200) {\n              dispatch(alertFailure(message));\n              setError(message);\n              setSignature(\"\");\n            }\n          }\n          setLoadingClaim(false);\n        } catch (err) {\n          setError(err.message);\n          setSignature(\"\");\n          setLoadingClaim(false);\n        }\n      }\n    connectedAccount && campaignId && authSignature && getUserSignature();\n  }, [connectedAccount, campaignId, authSignature]);\n\n  return {\n    signature,\n    setSignature,\n    amount,\n    error,\n    loadingClaim,\n  }\n}\n\nexport default useUserClaimSignature;\n\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/BuyTokenForm/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/contractAddress/getAddresses.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/StatusBar/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/Countdown/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/Button/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useGetAirdrop.ts",["1559","1560","1561"],"import {useEffect, useMemo, useState} from 'react';\nimport useFetch from './useFetch';\n\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nexport type Account = {\n  email: ''\n}\n\nconst useGetAirdrop = (payload: any) => {\n  const campaignId = payload.campaignId;\n  const connectedAccount = payload.connectedAccount;\n  const [fetchDone, setFetchDone] = useState<boolean>(false);\n  const { loading, error, data }  = useFetch<any>(`/user/get-airdrop/${campaignId}/${connectedAccount}`, false, {});\n\n  const airdrop = useMemo(() => {\n    // if (connectedAccount && data && !loading && !error && fetchDone)  {\n    //   return data;\n    // }\n    return data;\n  }, [data, loading, error, fetchDone, connectedAccount]);\n\n  useEffect(() => {\n    data && setFetchDone(true);\n  }, [connectedAccount]);\n\n  return  {\n    airdrop,\n    loading: !fetchDone\n  }\n};\n\nexport default useGetAirdrop;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/MyTier/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useUserPurchaseSignature.ts",["1562"],"import { useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport axios from '../../../services/axios';\nimport { alertFailure } from '../../../store/actions/alert';\n\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst useUserPurchaseSignature = (connectedAccount: string | undefined | null, campaignId: number | undefined, authSignature: string | undefined) => {\n  const dispatch = useDispatch();\n  const [signature, setSignature] = useState<string | undefined>(undefined);\n  const [minBuy, setMinBuy] = useState<string| undefined>(\"\");\n  const [maxBuy, setMaxBuy] = useState<string| undefined>(\"\");\n  const [error, setError] = useState<string | undefined>(\"\");\n\n  useEffect(() => {\n      const getUserSignature = async () => {\n        setError(\"\");\n        setSignature(\"\");\n\n        try {\n          const config = {\n            headers: {\n              msgSignature: MESSAGE_INVESTOR_SIGNATURE \n            }\n          }\n          const response = await axios.post('/user/deposit', {\n            campaign_id: campaignId,\n            wallet_address: connectedAccount,\n            signature: authSignature\n          }, config);\n\n          if (response.data && response.status && response.status === 200) {\n            const { data, message, status } = response.data;\n            if (data && status === 200) {\n              setSignature(data.signature);\n              setMinBuy(data.min_buy);\n              setMaxBuy(data.max_buy);\n            } \n\n            if (message && status !== 200) {\n              dispatch(alertFailure(message));\n              setError(message);\n              setSignature(\"\");\n            }\n          } \n        } catch (err) {\n          setError(err.message);\n          setSignature(\"\");\n        }\n      }\n    connectedAccount && campaignId && authSignature && getUserSignature();\n  }, [connectedAccount, campaignId, authSignature]);\n\n  return {\n    signature,\n    setSignature,\n    minBuy,\n    maxBuy,\n    error\n  }\n}\n\nexport default useUserPurchaseSignature;\n\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/TransactionSubmitModal/index.tsx",["1563","1564","1565","1566"],"import React from 'react';\nimport {createStyles, Theme, withStyles, WithStyles} from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport {ClipLoader} from \"react-spinners\";\nimport {useTypedSelector} from '../../../hooks/useTypedSelector';\nimport {ETH_CHAIN_ID} from '../../../constants/network';\n\nimport useStyles from './style';\n\nconst ETHERSCAN_URL = process.env.REACT_APP_ETHERSCAN_BASE_URL || \"\";\nconst BCSSCAN_URL = process.env.REACT_APP_BSCSCAN_BASE_URL || \"\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n      background: '#020616',\n      paddingTop: 0\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: 'black',\n      backgroundColor: '#4B4B4B',\n      padding: 4,\n\n      \"&:hover\" : {\n        backgroundColor: '#D4D4D4'\n      }\n    },\n    svgIcon: {\n      fontSize: 5\n    }\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n  customClass: string,\n  networkAvailable?: string,\n}\n\nexport interface ComponentProps {\n  opened: boolean,\n  handleClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, customClass, onClose, ...other } = props;\n\n  const customStyles = {\n    color: 'white',\n  }\n\n  return (\n    <MuiDialogTitle disableTypography className={`${classes.root} ${customClass}`} {...other} style={customStyles}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    color: '#999999'\n  },\n}))(MuiDialogContent);\n\nconst TransactionSubmitModal: React.FC<any> = (props: any) => {\n  const styles = useStyles();\n  const { appChainID } = useTypedSelector(state => state.appNetwork).data;\n  const { opened, handleClose, transactionHash, additionalText, networkAvailable } = props;\n\n  return (\n      <Dialog open={opened} onClose={handleClose} className={styles.dialog}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} customClass={styles.dialogTitle} >\n          Transaction {transactionHash ? 'Submitted': 'Submitting'}\n        </DialogTitle>\n        <DialogContent>\n          <div>\n            {\n              transactionHash ? (\n                <>\n                <span className={styles.dialogLabel}>TXn Hash</span>\n                <input value={transactionHash} className={styles.dialogInput} disabled={true} />\n                <a\n                  href={ETH_CHAIN_ID == appChainID ? `${ETHERSCAN_URL}/tx/${transactionHash}` : `${BCSSCAN_URL}/tx/${transactionHash}`}\n                  className={styles.dialogButton}\n                  target=\"_blank\"\n                >\n                  View on {ETH_CHAIN_ID == appChainID ? 'Etherscan' : 'Bscscan'}\n                </a>\n                {\n                  additionalText && (\n                    <p style={{ marginTop: 30, fontWeight: 'bold', lineHeight: '18px', fontSize: 15.5, color: '#8db4ff', fontFamily: 'Helvetica' }}>\n                      {additionalText}\n                    </p>\n                  )\n                }\n                </>\n              ): <ClipLoader color={'white'}/>\n            }\n          </div>\n        </DialogContent>\n      </Dialog>\n  )\n}\n\nexport default TransactionSubmitModal;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/MyTier/TierTableWithWeightRate.tsx",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/InvestorLayout/ConnectYourWallet.tsx",["1567"],"import React from 'react';\nimport useStyles from './style_dark';\nimport TextTitle from \"./TextTitle\";\n\nconst ConnectYourWallet = (props: any) => {\n  const classes = useStyles();\n  return (\n    <>\n      <TextTitle>\n        Connect Your Wallet\n      </TextTitle>\n      <div className={classes.connectYourWallet__wrapper}>\n        <img src=\"/images/ethereum.jpg\" className={classes.connectYourWallet__etherLogo} />\n        <div className={classes.connectYourWallet__desc}>\n          <p className={classes.connectYourWallet__desc_bold}>\n            Web3 Wallet Detected\n          </p>\n          <p>Connect to continue signing in!</p>\n        </div>\n      </div>\n      {props.children}\n    </>\n  );\n}\n\nexport default ConnectYourWallet;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderLandingLayout/index.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/TransactionSubmitModal/style.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderLandingLayout/HeaderLandingLayout.tsx",["1568","1569","1570","1571","1572"],"import useStyles from './styles';\nimport { useState } from 'react'\n\nconst BrightStartIcon = \"/images/bright-star.svg\";\nconst logo = '/images/logo-red-kite.svg';\nconst iconClose = \"/images/icons/close.svg\";\n\nconst HeaderDefaultLayout = () => {\n  const styles = useStyles();\n  const [showBanner, setShowBanner] = useState(true)\n\n  return (\n    <>\n      <div className={styles.navBar}>\n        <div>\n          <div className=\"pool\">\n            <a href=\"#/dashboard\"><img src={BrightStartIcon} alt=\"\"/></a>\n            <a href=\"#/dashboard\"><span>&nbsp;&nbsp;Pool</span></a>\n          </div>\n          <div className=\"logo\">\n            <img src={logo} alt=\"\"/>\n          </div>\n          <div className=\"connects\">\n            <a href=\"https://t.me/polkafoundry/\" target=\"_blank\"><i className=\"custom-icon-telegram\"></i></a>\n            <a href=\"https://twitter.com/polkafoundry/\" target=\"_blank\"><i className=\"custom-icon-twitter\"></i></a>\n            {/* <a href=\"#\"><i className=\"custom-icon-facebook\"></i></a>\n            <a href=\"#\"><i className=\"custom-icon-github\"></i></a> */}\n          </div>\n        </div>\n        {/*{showBanner && <div className={styles.banner}>*/}\n        {/*  <img src=\"/images/icons/ring.svg\" alt=\"red-warning icon\" />*/}\n        {/*  <img src={iconClose} onClick={() => setShowBanner(false)} className={styles.closeBtn}/>*/}\n        {/*  <span className={styles.loginErrorBannerText}>*/}\n        {/*  NFTify (N1) launches on 4 June.*/}\n        {/*  &nbsp;&nbsp;<button*/}\n        {/*    className={styles.btnChangeAppNetwork}*/}\n        {/*    onClick={() => {window.open('#/buy-token/23', '_blank')}}*/}\n        {/*  >*/}\n        {/*    View Details*/}\n        {/*  </button>*/}\n        {/*  </span>*/}\n        {/*</div>}*/}\n      </div>\n    </>\n  );\n};\n\nexport default HeaderDefaultLayout;\n","/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderLandingLayout/styles.ts",[],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/JoinPolkaSmith/index.tsx",["1573","1574","1575","1576","1577","1578","1579","1580","1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591","1592","1593","1594","1595","1596","1597","1598","1599","1600","1601"],"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/JoinPolkaSmith/style.ts",[],{"ruleId":"1602","replacedBy":"1603"},{"ruleId":"1604","replacedBy":"1605"},{"ruleId":"1606","severity":1,"message":"1607","line":2,"column":40,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":49},{"ruleId":"1610","severity":1,"message":"1611","line":36,"column":1,"nodeType":"1612","endLine":38,"endColumn":2},{"ruleId":"1606","severity":1,"message":"1613","line":2,"column":80,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":88},{"ruleId":"1606","severity":1,"message":"1614","line":10,"column":8,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1615","line":13,"column":8,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1616","line":37,"column":9,"nodeType":"1608","messageId":"1609","endLine":37,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1617","line":37,"column":21,"nodeType":"1608","messageId":"1609","endLine":37,"endColumn":32},{"ruleId":"1618","severity":1,"message":"1619","line":77,"column":37,"nodeType":"1620","messageId":"1621","endLine":77,"endColumn":39},{"ruleId":"1622","severity":1,"message":"1623","line":94,"column":8,"nodeType":"1624","endLine":94,"endColumn":10,"suggestions":"1625"},{"ruleId":"1606","severity":1,"message":"1626","line":1,"column":10,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1627","line":1,"column":27,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":35},{"ruleId":"1606","severity":1,"message":"1628","line":8,"column":8,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1629","line":25,"column":9,"nodeType":"1608","messageId":"1609","endLine":25,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1630","line":1,"column":69,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":79},{"ruleId":"1622","severity":1,"message":"1631","line":111,"column":6,"nodeType":"1624","endLine":111,"endColumn":42,"suggestions":"1632"},{"ruleId":"1622","severity":1,"message":"1633","line":115,"column":6,"nodeType":"1624","endLine":115,"endColumn":18,"suggestions":"1634"},{"ruleId":"1622","severity":1,"message":"1635","line":123,"column":6,"nodeType":"1624","endLine":123,"endColumn":25,"suggestions":"1636"},{"ruleId":"1622","severity":1,"message":"1637","line":135,"column":8,"nodeType":"1624","endLine":135,"endColumn":68,"suggestions":"1638"},{"ruleId":"1622","severity":1,"message":"1639","line":139,"column":8,"nodeType":"1624","endLine":139,"endColumn":73,"suggestions":"1640"},{"ruleId":"1622","severity":1,"message":"1641","line":147,"column":8,"nodeType":"1624","endLine":147,"endColumn":57,"suggestions":"1642"},{"ruleId":"1643","severity":1,"message":"1644","line":211,"column":96,"nodeType":"1645","messageId":"1646","endLine":211,"endColumn":97,"suggestions":"1647"},{"ruleId":"1622","severity":1,"message":"1648","line":231,"column":6,"nodeType":"1624","endLine":231,"endColumn":41,"suggestions":"1649"},{"ruleId":"1622","severity":1,"message":"1641","line":252,"column":6,"nodeType":"1624","endLine":252,"endColumn":70,"suggestions":"1650"},{"ruleId":"1622","severity":1,"message":"1651","line":268,"column":6,"nodeType":"1624","endLine":268,"endColumn":8,"suggestions":"1652"},{"ruleId":"1606","severity":1,"message":"1653","line":26,"column":10,"nodeType":"1608","messageId":"1609","endLine":26,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1654","line":28,"column":20,"nodeType":"1608","messageId":"1609","endLine":28,"endColumn":39},{"ruleId":"1606","severity":1,"message":"1655","line":32,"column":28,"nodeType":"1608","messageId":"1609","endLine":32,"endColumn":37},{"ruleId":"1606","severity":1,"message":"1656","line":32,"column":39,"nodeType":"1608","messageId":"1609","endLine":32,"endColumn":47},{"ruleId":"1622","severity":1,"message":"1641","line":51,"column":6,"nodeType":"1624","endLine":51,"endColumn":28,"suggestions":"1657"},{"ruleId":"1622","severity":1,"message":"1658","line":84,"column":6,"nodeType":"1624","endLine":84,"endColumn":28,"suggestions":"1659"},{"ruleId":"1606","severity":1,"message":"1660","line":3,"column":21,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":37},{"ruleId":"1606","severity":1,"message":"1661","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1662","line":5,"column":21,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":30},{"ruleId":"1606","severity":1,"message":"1616","line":11,"column":9,"nodeType":"1608","messageId":"1609","endLine":11,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1663","line":29,"column":7,"nodeType":"1608","messageId":"1609","endLine":29,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1664","line":32,"column":9,"nodeType":"1608","messageId":"1609","endLine":32,"endColumn":16},{"ruleId":"1622","severity":1,"message":"1641","line":56,"column":6,"nodeType":"1624","endLine":56,"endColumn":13,"suggestions":"1665"},{"ruleId":"1622","severity":1,"message":"1623","line":82,"column":6,"nodeType":"1624","endLine":82,"endColumn":51,"suggestions":"1666"},{"ruleId":"1667","severity":1,"message":"1668","line":144,"column":84,"nodeType":"1669","endLine":144,"endColumn":87},{"ruleId":"1667","severity":1,"message":"1668","line":144,"column":112,"nodeType":"1669","endLine":144,"endColumn":115},{"ruleId":"1606","severity":1,"message":"1670","line":31,"column":17,"nodeType":"1608","messageId":"1609","endLine":31,"endColumn":26},{"ruleId":"1622","severity":1,"message":"1671","line":58,"column":6,"nodeType":"1624","endLine":58,"endColumn":21,"suggestions":"1672"},{"ruleId":"1622","severity":1,"message":"1673","line":79,"column":6,"nodeType":"1624","endLine":79,"endColumn":13,"suggestions":"1674"},{"ruleId":"1606","severity":1,"message":"1627","line":1,"column":27,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":35},{"ruleId":"1622","severity":1,"message":"1675","line":27,"column":6,"nodeType":"1624","endLine":27,"endColumn":8,"suggestions":"1676"},{"ruleId":"1606","severity":1,"message":"1677","line":22,"column":27,"nodeType":"1608","messageId":"1609","endLine":22,"endColumn":53},{"ruleId":"1606","severity":1,"message":"1678","line":114,"column":17,"nodeType":"1608","messageId":"1609","endLine":114,"endColumn":20},{"ruleId":"1618","severity":1,"message":"1619","line":146,"column":35,"nodeType":"1620","messageId":"1621","endLine":146,"endColumn":37},{"ruleId":"1606","severity":1,"message":"1678","line":389,"column":17,"nodeType":"1608","messageId":"1609","endLine":389,"endColumn":20},{"ruleId":"1618","severity":1,"message":"1619","line":421,"column":35,"nodeType":"1620","messageId":"1621","endLine":421,"endColumn":37},{"ruleId":"1606","severity":1,"message":"1679","line":47,"column":7,"nodeType":"1608","messageId":"1609","endLine":47,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1680","line":58,"column":7,"nodeType":"1608","messageId":"1609","endLine":58,"endColumn":25},{"ruleId":"1606","severity":1,"message":"1681","line":132,"column":11,"nodeType":"1608","messageId":"1609","endLine":132,"endColumn":23},{"ruleId":"1622","severity":1,"message":"1682","line":180,"column":6,"nodeType":"1624","endLine":180,"endColumn":100,"suggestions":"1683"},{"ruleId":"1622","severity":1,"message":"1684","line":202,"column":6,"nodeType":"1624","endLine":202,"endColumn":63,"suggestions":"1685"},{"ruleId":"1622","severity":1,"message":"1686","line":221,"column":6,"nodeType":"1624","endLine":221,"endColumn":24,"suggestions":"1687"},{"ruleId":"1622","severity":1,"message":"1641","line":228,"column":6,"nodeType":"1624","endLine":228,"endColumn":23,"suggestions":"1688"},{"ruleId":"1622","severity":1,"message":"1641","line":238,"column":6,"nodeType":"1624","endLine":238,"endColumn":31,"suggestions":"1689"},{"ruleId":"1690","severity":1,"message":"1691","line":268,"column":17,"nodeType":"1669","endLine":268,"endColumn":108},{"ruleId":"1692","severity":1,"message":"1693","line":300,"column":19,"nodeType":"1669","endLine":300,"endColumn":57},{"ruleId":"1618","severity":1,"message":"1619","line":309,"column":55,"nodeType":"1620","messageId":"1621","endLine":309,"endColumn":57},{"ruleId":"1694","severity":1,"message":"1695","line":528,"column":25,"nodeType":"1696","messageId":"1697","endLine":528,"endColumn":32},{"ruleId":"1698","severity":1,"message":"1699","line":535,"column":51,"nodeType":"1700","messageId":"1701","endLine":535,"endColumn":53},{"ruleId":"1698","severity":1,"message":"1699","line":535,"column":71,"nodeType":"1700","messageId":"1701","endLine":535,"endColumn":73},{"ruleId":"1694","severity":1,"message":"1695","line":537,"column":25,"nodeType":"1696","messageId":"1697","endLine":537,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1702","line":1,"column":17,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1703","line":1,"column":35,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":44},{"ruleId":"1606","severity":1,"message":"1704","line":2,"column":10,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1705","line":2,"column":23,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1706","line":3,"column":22,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1707","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1708","line":14,"column":7,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1709","line":16,"column":7,"nodeType":"1608","messageId":"1609","endLine":16,"endColumn":17},{"ruleId":"1710","severity":1,"message":"1711","line":87,"column":15,"nodeType":"1669","messageId":"1712","endLine":87,"endColumn":70,"fix":"1713"},{"ruleId":"1692","severity":1,"message":"1693","line":90,"column":17,"nodeType":"1669","endLine":90,"endColumn":44},{"ruleId":"1710","severity":1,"message":"1711","line":120,"column":17,"nodeType":"1669","messageId":"1712","endLine":120,"endColumn":72,"fix":"1714"},{"ruleId":"1692","severity":1,"message":"1693","line":123,"column":21,"nodeType":"1669","endLine":123,"endColumn":48},{"ruleId":"1606","severity":1,"message":"1715","line":8,"column":9,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1716","line":8,"column":25,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":44},{"ruleId":"1606","severity":1,"message":"1717","line":8,"column":46,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":69},{"ruleId":"1606","severity":1,"message":"1718","line":8,"column":71,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":86},{"ruleId":"1606","severity":1,"message":"1719","line":9,"column":8,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1720","line":17,"column":9,"nodeType":"1608","messageId":"1609","endLine":17,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1721","line":17,"column":28,"nodeType":"1608","messageId":"1609","endLine":17,"endColumn":54},{"ruleId":"1606","severity":1,"message":"1722","line":18,"column":8,"nodeType":"1608","messageId":"1609","endLine":18,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1723","line":19,"column":9,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":29},{"ruleId":"1692","severity":1,"message":"1693","line":146,"column":13,"nodeType":"1669","endLine":146,"endColumn":36},{"ruleId":"1622","severity":1,"message":"1724","line":47,"column":6,"nodeType":"1624","endLine":47,"endColumn":8,"suggestions":"1725"},{"ruleId":"1606","severity":1,"message":"1726","line":18,"column":9,"nodeType":"1608","messageId":"1609","endLine":18,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1727","line":19,"column":21,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":31},{"ruleId":"1606","severity":1,"message":"1728","line":19,"column":33,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":40},{"ruleId":"1606","severity":1,"message":"1729","line":55,"column":9,"nodeType":"1608","messageId":"1609","endLine":55,"endColumn":17},{"ruleId":"1618","severity":1,"message":"1619","line":56,"column":27,"nodeType":"1620","messageId":"1621","endLine":56,"endColumn":29},{"ruleId":"1618","severity":1,"message":"1619","line":56,"column":62,"nodeType":"1620","messageId":"1621","endLine":56,"endColumn":64},{"ruleId":"1698","severity":1,"message":"1730","line":56,"column":79,"nodeType":"1700","messageId":"1701","endLine":56,"endColumn":81},{"ruleId":"1698","severity":1,"message":"1730","line":57,"column":5,"nodeType":"1700","messageId":"1701","endLine":57,"endColumn":7},{"ruleId":"1698","severity":1,"message":"1699","line":57,"column":5,"nodeType":"1700","messageId":"1701","endLine":57,"endColumn":7},{"ruleId":"1618","severity":1,"message":"1619","line":57,"column":23,"nodeType":"1620","messageId":"1621","endLine":57,"endColumn":25},{"ruleId":"1618","severity":1,"message":"1619","line":57,"column":58,"nodeType":"1620","messageId":"1621","endLine":57,"endColumn":60},{"ruleId":"1698","severity":1,"message":"1699","line":57,"column":88,"nodeType":"1700","messageId":"1701","endLine":57,"endColumn":90},{"ruleId":"1698","severity":1,"message":"1699","line":58,"column":5,"nodeType":"1700","messageId":"1701","endLine":58,"endColumn":7},{"ruleId":"1618","severity":1,"message":"1619","line":58,"column":23,"nodeType":"1620","messageId":"1621","endLine":58,"endColumn":25},{"ruleId":"1618","severity":1,"message":"1619","line":58,"column":63,"nodeType":"1620","messageId":"1621","endLine":58,"endColumn":65},{"ruleId":"1698","severity":1,"message":"1699","line":58,"column":80,"nodeType":"1700","messageId":"1701","endLine":58,"endColumn":82},{"ruleId":"1698","severity":1,"message":"1699","line":59,"column":5,"nodeType":"1700","messageId":"1701","endLine":59,"endColumn":7},{"ruleId":"1618","severity":1,"message":"1619","line":59,"column":23,"nodeType":"1620","messageId":"1621","endLine":59,"endColumn":25},{"ruleId":"1618","severity":1,"message":"1619","line":59,"column":63,"nodeType":"1620","messageId":"1621","endLine":59,"endColumn":65},{"ruleId":"1698","severity":1,"message":"1699","line":59,"column":93,"nodeType":"1700","messageId":"1701","endLine":59,"endColumn":95},{"ruleId":"1618","severity":1,"message":"1731","line":74,"column":63,"nodeType":"1620","messageId":"1621","endLine":74,"endColumn":65},{"ruleId":"1618","severity":1,"message":"1731","line":74,"column":103,"nodeType":"1620","messageId":"1621","endLine":74,"endColumn":105},{"ruleId":"1618","severity":1,"message":"1619","line":74,"column":144,"nodeType":"1620","messageId":"1621","endLine":74,"endColumn":146},{"ruleId":"1618","severity":1,"message":"1619","line":75,"column":63,"nodeType":"1620","messageId":"1621","endLine":75,"endColumn":65},{"ruleId":"1618","severity":1,"message":"1619","line":75,"column":103,"nodeType":"1620","messageId":"1621","endLine":75,"endColumn":105},{"ruleId":"1618","severity":1,"message":"1619","line":75,"column":145,"nodeType":"1620","messageId":"1621","endLine":75,"endColumn":147},{"ruleId":"1618","severity":1,"message":"1619","line":79,"column":21,"nodeType":"1620","messageId":"1621","endLine":79,"endColumn":23},{"ruleId":"1622","severity":1,"message":"1732","line":82,"column":6,"nodeType":"1624","endLine":82,"endColumn":13,"suggestions":"1733"},{"ruleId":"1692","severity":1,"message":"1693","line":109,"column":11,"nodeType":"1669","endLine":109,"endColumn":38},{"ruleId":"1692","severity":1,"message":"1693","line":125,"column":11,"nodeType":"1669","endLine":125,"endColumn":38},{"ruleId":"1692","severity":1,"message":"1693","line":129,"column":9,"nodeType":"1669","endLine":129,"endColumn":32},{"ruleId":"1692","severity":1,"message":"1693","line":135,"column":13,"nodeType":"1669","endLine":135,"endColumn":40},{"ruleId":"1606","severity":1,"message":"1707","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1734","line":6,"column":10,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1735","line":6,"column":33,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":44},{"ruleId":"1606","severity":1,"message":"1736","line":18,"column":8,"nodeType":"1608","messageId":"1609","endLine":18,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1716","line":19,"column":10,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1737","line":19,"column":31,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":50},{"ruleId":"1606","severity":1,"message":"1722","line":20,"column":8,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1738","line":37,"column":10,"nodeType":"1608","messageId":"1609","endLine":37,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1739","line":37,"column":21,"nodeType":"1608","messageId":"1609","endLine":37,"endColumn":33},{"ruleId":"1740","severity":1,"message":"1741","line":41,"column":11,"nodeType":"1742","messageId":"1743","endLine":41,"endColumn":26,"fix":"1744"},{"ruleId":"1606","severity":1,"message":"1745","line":41,"column":37,"nodeType":"1608","messageId":"1609","endLine":41,"endColumn":42},{"ruleId":"1606","severity":1,"message":"1746","line":48,"column":10,"nodeType":"1608","messageId":"1609","endLine":48,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1747","line":48,"column":17,"nodeType":"1608","messageId":"1609","endLine":48,"endColumn":25},{"ruleId":"1606","severity":1,"message":"1748","line":49,"column":24,"nodeType":"1608","messageId":"1609","endLine":49,"endColumn":35},{"ruleId":"1622","severity":1,"message":"1641","line":57,"column":6,"nodeType":"1624","endLine":57,"endColumn":44,"suggestions":"1749"},{"ruleId":"1618","severity":1,"message":"1619","line":73,"column":33,"nodeType":"1620","messageId":"1621","endLine":73,"endColumn":35},{"ruleId":"1622","severity":1,"message":"1641","line":83,"column":6,"nodeType":"1624","endLine":83,"endColumn":18,"suggestions":"1750"},{"ruleId":"1618","severity":1,"message":"1619","line":87,"column":22,"nodeType":"1620","messageId":"1621","endLine":87,"endColumn":24},{"ruleId":"1692","severity":1,"message":"1693","line":88,"column":21,"nodeType":"1669","endLine":88,"endColumn":45},{"ruleId":"1692","severity":1,"message":"1693","line":89,"column":9,"nodeType":"1669","endLine":89,"endColumn":100},{"ruleId":"1606","severity":1,"message":"1751","line":2,"column":8,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":18},{"ruleId":"1618","severity":1,"message":"1619","line":89,"column":24,"nodeType":"1620","messageId":"1621","endLine":89,"endColumn":26},{"ruleId":"1618","severity":1,"message":"1619","line":92,"column":31,"nodeType":"1620","messageId":"1621","endLine":92,"endColumn":33},{"ruleId":"1618","severity":1,"message":"1619","line":17,"column":18,"nodeType":"1620","messageId":"1621","endLine":17,"endColumn":20},{"ruleId":"1618","severity":1,"message":"1619","line":19,"column":25,"nodeType":"1620","messageId":"1621","endLine":19,"endColumn":27},{"ruleId":"1606","severity":1,"message":"1752","line":2,"column":9,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1753","line":7,"column":37,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":52},{"ruleId":"1754","severity":1,"message":"1755","line":10,"column":12,"nodeType":"1756","messageId":"1757","endLine":10,"endColumn":20,"fix":"1758"},{"ruleId":"1606","severity":1,"message":"1703","line":1,"column":16,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":25},{"ruleId":"1606","severity":1,"message":"1627","line":1,"column":27,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":35},{"ruleId":"1606","severity":1,"message":"1759","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1760","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":12},{"ruleId":"1618","severity":1,"message":"1619","line":110,"column":14,"nodeType":"1620","messageId":"1621","endLine":110,"endColumn":16},{"ruleId":"1618","severity":1,"message":"1619","line":115,"column":21,"nodeType":"1620","messageId":"1621","endLine":115,"endColumn":23},{"ruleId":"1618","severity":1,"message":"1619","line":120,"column":21,"nodeType":"1620","messageId":"1621","endLine":120,"endColumn":23},{"ruleId":"1618","severity":1,"message":"1619","line":125,"column":21,"nodeType":"1620","messageId":"1621","endLine":125,"endColumn":23},{"ruleId":"1761","severity":1,"message":"1762","line":140,"column":3,"nodeType":"1763","messageId":"1764","endLine":147,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1765","line":1,"column":21,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1707","line":6,"column":8,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":9},{"ruleId":"1622","severity":1,"message":"1766","line":44,"column":6,"nodeType":"1624","endLine":44,"endColumn":68,"suggestions":"1767"},{"ruleId":"1622","severity":1,"message":"1768","line":77,"column":6,"nodeType":"1624","endLine":77,"endColumn":25,"suggestions":"1769"},{"ruleId":"1618","severity":1,"message":"1619","line":54,"column":16,"nodeType":"1620","messageId":"1621","endLine":54,"endColumn":18},{"ruleId":"1622","severity":1,"message":"1770","line":62,"column":6,"nodeType":"1624","endLine":62,"endColumn":33,"suggestions":"1771"},{"ruleId":"1622","severity":1,"message":"1772","line":27,"column":6,"nodeType":"1624","endLine":27,"endColumn":11,"suggestions":"1773"},{"ruleId":"1622","severity":1,"message":"1774","line":31,"column":6,"nodeType":"1624","endLine":31,"endColumn":26,"suggestions":"1775"},{"ruleId":"1618","severity":1,"message":"1731","line":29,"column":70,"nodeType":"1620","messageId":"1621","endLine":29,"endColumn":72},{"ruleId":"1606","severity":1,"message":"1616","line":3,"column":9,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1776","line":17,"column":13,"nodeType":"1608","messageId":"1609","endLine":17,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1777","line":9,"column":24,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":36},{"ruleId":"1606","severity":1,"message":"1778","line":13,"column":9,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1779","line":13,"column":22,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":45},{"ruleId":"1618","severity":1,"message":"1731","line":39,"column":44,"nodeType":"1620","messageId":"1621","endLine":39,"endColumn":46},{"ruleId":"1606","severity":1,"message":"1780","line":37,"column":9,"nodeType":"1608","messageId":"1609","endLine":37,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1780","line":52,"column":9,"nodeType":"1608","messageId":"1609","endLine":52,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1781","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1782","line":6,"column":7,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":15},{"ruleId":"1618","severity":1,"message":"1619","line":57,"column":65,"nodeType":"1620","messageId":"1621","endLine":57,"endColumn":67},{"ruleId":"1618","severity":1,"message":"1619","line":57,"column":90,"nodeType":"1620","messageId":"1621","endLine":57,"endColumn":92},{"ruleId":"1618","severity":1,"message":"1619","line":58,"column":70,"nodeType":"1620","messageId":"1621","endLine":58,"endColumn":72},{"ruleId":"1618","severity":1,"message":"1619","line":58,"column":95,"nodeType":"1620","messageId":"1621","endLine":58,"endColumn":97},{"ruleId":"1622","severity":1,"message":"1783","line":65,"column":6,"nodeType":"1624","endLine":65,"endColumn":61,"suggestions":"1784"},{"ruleId":"1622","severity":1,"message":"1783","line":78,"column":6,"nodeType":"1624","endLine":78,"endColumn":61,"suggestions":"1785"},{"ruleId":"1606","severity":1,"message":"1703","line":1,"column":10,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1627","line":1,"column":21,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1705","line":2,"column":23,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1707","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1786","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1787","line":4,"column":17,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1788","line":6,"column":20,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":31},{"ruleId":"1606","severity":1,"message":"1789","line":6,"column":33,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":42},{"ruleId":"1692","severity":1,"message":"1693","line":22,"column":13,"nodeType":"1669","endLine":22,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1707","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1790","line":7,"column":30,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":44},{"ruleId":"1606","severity":1,"message":"1791","line":15,"column":8,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1792","line":17,"column":10,"nodeType":"1608","messageId":"1609","endLine":17,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1793","line":19,"column":17,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1794","line":19,"column":45,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":58},{"ruleId":"1606","severity":1,"message":"1795","line":40,"column":11,"nodeType":"1608","messageId":"1609","endLine":40,"endColumn":27},{"ruleId":"1606","severity":1,"message":"1796","line":47,"column":5,"nodeType":"1608","messageId":"1609","endLine":47,"endColumn":18},{"ruleId":"1622","severity":1,"message":"1641","line":53,"column":6,"nodeType":"1624","endLine":53,"endColumn":8,"suggestions":"1797"},{"ruleId":"1622","severity":1,"message":"1798","line":65,"column":6,"nodeType":"1624","endLine":65,"endColumn":40,"suggestions":"1799"},{"ruleId":"1622","severity":1,"message":"1798","line":77,"column":6,"nodeType":"1624","endLine":77,"endColumn":40,"suggestions":"1800"},{"ruleId":"1622","severity":1,"message":"1798","line":89,"column":6,"nodeType":"1624","endLine":89,"endColumn":42,"suggestions":"1801"},{"ruleId":"1618","severity":1,"message":"1619","line":123,"column":55,"nodeType":"1620","messageId":"1621","endLine":123,"endColumn":57},{"ruleId":"1618","severity":1,"message":"1619","line":125,"column":37,"nodeType":"1620","messageId":"1621","endLine":125,"endColumn":39},{"ruleId":"1618","severity":1,"message":"1619","line":130,"column":57,"nodeType":"1620","messageId":"1621","endLine":130,"endColumn":59},{"ruleId":"1618","severity":1,"message":"1619","line":132,"column":37,"nodeType":"1620","messageId":"1621","endLine":132,"endColumn":39},{"ruleId":"1692","severity":1,"message":"1693","line":174,"column":11,"nodeType":"1669","endLine":174,"endColumn":90},{"ruleId":"1606","severity":1,"message":"1703","line":1,"column":20,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1704","line":2,"column":10,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1707","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1802","line":14,"column":33,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":40},{"ruleId":"1606","severity":1,"message":"1803","line":14,"column":47,"nodeType":"1608","messageId":"1609","endLine":14,"endColumn":55},{"ruleId":"1606","severity":1,"message":"1804","line":16,"column":11,"nodeType":"1608","messageId":"1609","endLine":16,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1805","line":16,"column":37,"nodeType":"1608","messageId":"1609","endLine":16,"endColumn":47},{"ruleId":"1606","severity":1,"message":"1806","line":21,"column":9,"nodeType":"1608","messageId":"1609","endLine":21,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1807","line":30,"column":5,"nodeType":"1608","messageId":"1609","endLine":30,"endColumn":10},{"ruleId":"1618","severity":1,"message":"1731","line":41,"column":35,"nodeType":"1620","messageId":"1621","endLine":41,"endColumn":37},{"ruleId":"1618","severity":1,"message":"1619","line":42,"column":26,"nodeType":"1620","messageId":"1621","endLine":42,"endColumn":28},{"ruleId":"1618","severity":1,"message":"1619","line":43,"column":27,"nodeType":"1620","messageId":"1621","endLine":43,"endColumn":29},{"ruleId":"1618","severity":1,"message":"1619","line":64,"column":24,"nodeType":"1620","messageId":"1621","endLine":64,"endColumn":26},{"ruleId":"1618","severity":1,"message":"1619","line":65,"column":24,"nodeType":"1620","messageId":"1621","endLine":65,"endColumn":26},{"ruleId":"1618","severity":1,"message":"1619","line":67,"column":24,"nodeType":"1620","messageId":"1621","endLine":67,"endColumn":26},{"ruleId":"1618","severity":1,"message":"1619","line":69,"column":24,"nodeType":"1620","messageId":"1621","endLine":69,"endColumn":26},{"ruleId":"1618","severity":1,"message":"1619","line":82,"column":24,"nodeType":"1620","messageId":"1621","endLine":82,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1787","line":5,"column":10,"nodeType":"1608","messageId":"1609","endLine":5,"endColumn":25},{"ruleId":"1618","severity":1,"message":"1619","line":50,"column":14,"nodeType":"1620","messageId":"1621","endLine":50,"endColumn":16},{"ruleId":"1618","severity":1,"message":"1731","line":89,"column":22,"nodeType":"1620","messageId":"1621","endLine":89,"endColumn":24},{"ruleId":"1618","severity":1,"message":"1731","line":89,"column":48,"nodeType":"1620","messageId":"1621","endLine":89,"endColumn":50},{"ruleId":"1618","severity":1,"message":"1731","line":90,"column":22,"nodeType":"1620","messageId":"1621","endLine":90,"endColumn":24},{"ruleId":"1618","severity":1,"message":"1731","line":90,"column":48,"nodeType":"1620","messageId":"1621","endLine":90,"endColumn":50},{"ruleId":"1622","severity":1,"message":"1641","line":91,"column":6,"nodeType":"1624","endLine":91,"endColumn":44,"suggestions":"1808"},{"ruleId":"1618","severity":1,"message":"1731","line":94,"column":23,"nodeType":"1620","messageId":"1621","endLine":94,"endColumn":25},{"ruleId":"1692","severity":1,"message":"1693","line":136,"column":15,"nodeType":"1669","endLine":136,"endColumn":42},{"ruleId":"1694","severity":1,"message":"1809","line":144,"column":62,"nodeType":"1810","messageId":"1811","endLine":144,"endColumn":64},{"ruleId":"1618","severity":1,"message":"1731","line":145,"column":19,"nodeType":"1620","messageId":"1621","endLine":145,"endColumn":21},{"ruleId":"1618","severity":1,"message":"1619","line":154,"column":25,"nodeType":"1620","messageId":"1621","endLine":154,"endColumn":27},{"ruleId":"1618","severity":1,"message":"1619","line":161,"column":25,"nodeType":"1620","messageId":"1621","endLine":161,"endColumn":27},{"ruleId":"1692","severity":1,"message":"1693","line":171,"column":19,"nodeType":"1669","endLine":171,"endColumn":52},{"ruleId":"1692","severity":1,"message":"1693","line":194,"column":13,"nodeType":"1669","endLine":194,"endColumn":36},{"ruleId":"1692","severity":1,"message":"1693","line":199,"column":11,"nodeType":"1669","endLine":199,"endColumn":44},{"ruleId":"1692","severity":1,"message":"1693","line":12,"column":11,"nodeType":"1669","endLine":12,"endColumn":39},{"ruleId":"1606","severity":1,"message":"1705","line":2,"column":9,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1812","line":10,"column":9,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1813","line":13,"column":7,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":14},{"ruleId":"1622","severity":1,"message":"1814","line":54,"column":6,"nodeType":"1624","endLine":54,"endColumn":12,"suggestions":"1815"},{"ruleId":"1606","severity":1,"message":"1681","line":86,"column":11,"nodeType":"1608","messageId":"1609","endLine":86,"endColumn":23},{"ruleId":"1692","severity":1,"message":"1693","line":92,"column":11,"nodeType":"1669","endLine":92,"endColumn":36},{"ruleId":"1618","severity":1,"message":"1619","line":93,"column":24,"nodeType":"1620","messageId":"1621","endLine":93,"endColumn":26},{"ruleId":"1618","severity":1,"message":"1619","line":96,"column":24,"nodeType":"1620","messageId":"1621","endLine":96,"endColumn":26},{"ruleId":"1618","severity":1,"message":"1619","line":99,"column":24,"nodeType":"1620","messageId":"1621","endLine":99,"endColumn":26},{"ruleId":"1618","severity":1,"message":"1619","line":102,"column":24,"nodeType":"1620","messageId":"1621","endLine":102,"endColumn":26},{"ruleId":"1618","severity":1,"message":"1619","line":105,"column":24,"nodeType":"1620","messageId":"1621","endLine":105,"endColumn":26},{"ruleId":"1618","severity":1,"message":"1619","line":108,"column":24,"nodeType":"1620","messageId":"1621","endLine":108,"endColumn":26},{"ruleId":"1618","severity":1,"message":"1619","line":111,"column":24,"nodeType":"1620","messageId":"1621","endLine":111,"endColumn":26},{"ruleId":"1692","severity":1,"message":"1693","line":117,"column":13,"nodeType":"1669","endLine":117,"endColumn":44},{"ruleId":"1618","severity":1,"message":"1619","line":150,"column":55,"nodeType":"1620","messageId":"1621","endLine":150,"endColumn":57},{"ruleId":"1692","severity":1,"message":"1693","line":163,"column":64,"nodeType":"1669","endLine":163,"endColumn":90},{"ruleId":"1692","severity":1,"message":"1693","line":163,"column":93,"nodeType":"1669","endLine":163,"endColumn":114},{"ruleId":"1606","severity":1,"message":"1816","line":139,"column":10,"nodeType":"1608","messageId":"1609","endLine":139,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1817","line":2,"column":10,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1721","line":4,"column":19,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":45},{"ruleId":"1618","severity":1,"message":"1619","line":54,"column":17,"nodeType":"1620","messageId":"1621","endLine":54,"endColumn":19},{"ruleId":"1618","severity":1,"message":"1619","line":57,"column":40,"nodeType":"1620","messageId":"1621","endLine":57,"endColumn":42},{"ruleId":"1618","severity":1,"message":"1619","line":81,"column":15,"nodeType":"1620","messageId":"1621","endLine":81,"endColumn":17},{"ruleId":"1618","severity":1,"message":"1619","line":119,"column":18,"nodeType":"1620","messageId":"1621","endLine":119,"endColumn":20},{"ruleId":"1618","severity":1,"message":"1619","line":22,"column":24,"nodeType":"1620","messageId":"1621","endLine":22,"endColumn":26},{"ruleId":"1618","severity":1,"message":"1619","line":23,"column":50,"nodeType":"1620","messageId":"1621","endLine":23,"endColumn":52},{"ruleId":"1618","severity":1,"message":"1619","line":26,"column":57,"nodeType":"1620","messageId":"1621","endLine":26,"endColumn":59},{"ruleId":"1606","severity":1,"message":"1818","line":20,"column":7,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":18},{"ruleId":"1622","severity":1,"message":"1819","line":102,"column":6,"nodeType":"1624","endLine":102,"endColumn":31,"suggestions":"1820"},{"ruleId":"1692","severity":1,"message":"1693","line":117,"column":15,"nodeType":"1669","endLine":117,"endColumn":62},{"ruleId":"1692","severity":1,"message":"1693","line":120,"column":46,"nodeType":"1669","endLine":120,"endColumn":109},{"ruleId":"1692","severity":1,"message":"1693","line":124,"column":19,"nodeType":"1669","endLine":124,"endColumn":67},{"ruleId":"1692","severity":1,"message":"1693","line":125,"column":19,"nodeType":"1669","endLine":125,"endColumn":107},{"ruleId":"1692","severity":1,"message":"1693","line":129,"column":21,"nodeType":"1669","endLine":129,"endColumn":99},{"ruleId":"1692","severity":1,"message":"1693","line":152,"column":44,"nodeType":"1669","endLine":152,"endColumn":82},{"ruleId":"1698","severity":1,"message":"1730","line":156,"column":40,"nodeType":"1700","messageId":"1701","endLine":156,"endColumn":42},{"ruleId":"1698","severity":1,"message":"1730","line":156,"column":86,"nodeType":"1700","messageId":"1701","endLine":156,"endColumn":88},{"ruleId":"1710","severity":1,"message":"1711","line":183,"column":17,"nodeType":"1669","messageId":"1712","endLine":183,"endColumn":170,"fix":"1821"},{"ruleId":"1618","severity":1,"message":"1731","line":198,"column":86,"nodeType":"1620","messageId":"1621","endLine":198,"endColumn":88},{"ruleId":"1710","severity":1,"message":"1711","line":18,"column":15,"nodeType":"1669","messageId":"1712","endLine":18,"endColumn":68,"fix":"1822"},{"ruleId":"1710","severity":1,"message":"1711","line":21,"column":15,"nodeType":"1669","messageId":"1712","endLine":21,"endColumn":75,"fix":"1823"},{"ruleId":"1692","severity":1,"message":"1693","line":115,"column":31,"nodeType":"1669","endLine":115,"endColumn":52},{"ruleId":"1692","severity":1,"message":"1693","line":121,"column":13,"nodeType":"1669","endLine":121,"endColumn":76},{"ruleId":"1692","severity":1,"message":"1693","line":155,"column":13,"nodeType":"1669","endLine":155,"endColumn":89},{"ruleId":"1690","severity":1,"message":"1691","line":99,"column":15,"nodeType":"1669","endLine":99,"endColumn":68},{"ruleId":"1692","severity":1,"message":"1693","line":30,"column":21,"nodeType":"1669","endLine":30,"endColumn":63},{"ruleId":"1606","severity":1,"message":"1626","line":6,"column":9,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1824","line":7,"column":23,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":40},{"ruleId":"1692","severity":1,"message":"1693","line":65,"column":17,"nodeType":"1669","endLine":69,"endColumn":19},{"ruleId":"1692","severity":1,"message":"1693","line":95,"column":85,"nodeType":"1669","endLine":95,"endColumn":118},{"ruleId":"1606","severity":1,"message":"1704","line":2,"column":10,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1707","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":9},{"ruleId":"1643","severity":1,"message":"1825","line":13,"column":25,"nodeType":"1826","messageId":"1646","endLine":13,"endColumn":26,"suggestions":"1827"},{"ruleId":"1643","severity":1,"message":"1825","line":13,"column":50,"nodeType":"1826","messageId":"1646","endLine":13,"endColumn":51,"suggestions":"1828"},{"ruleId":"1606","severity":1,"message":"1745","line":21,"column":49,"nodeType":"1608","messageId":"1609","endLine":21,"endColumn":54},{"ruleId":"1618","severity":1,"message":"1731","line":40,"column":18,"nodeType":"1620","messageId":"1621","endLine":40,"endColumn":20},{"ruleId":"1618","severity":1,"message":"1619","line":54,"column":28,"nodeType":"1620","messageId":"1621","endLine":54,"endColumn":30},{"ruleId":"1618","severity":1,"message":"1619","line":60,"column":35,"nodeType":"1620","messageId":"1621","endLine":60,"endColumn":37},{"ruleId":"1622","severity":1,"message":"1829","line":68,"column":6,"nodeType":"1624","endLine":68,"endColumn":17,"suggestions":"1830"},{"ruleId":"1618","severity":1,"message":"1619","line":72,"column":46,"nodeType":"1620","messageId":"1621","endLine":72,"endColumn":48},{"ruleId":"1618","severity":1,"message":"1731","line":77,"column":19,"nodeType":"1620","messageId":"1621","endLine":77,"endColumn":21},{"ruleId":"1698","severity":1,"message":"1730","line":77,"column":25,"nodeType":"1700","messageId":"1701","endLine":77,"endColumn":27},{"ruleId":"1618","severity":1,"message":"1619","line":77,"column":51,"nodeType":"1620","messageId":"1621","endLine":77,"endColumn":53},{"ruleId":"1698","severity":1,"message":"1730","line":77,"column":60,"nodeType":"1700","messageId":"1701","endLine":77,"endColumn":62},{"ruleId":"1618","severity":1,"message":"1619","line":77,"column":74,"nodeType":"1620","messageId":"1621","endLine":77,"endColumn":76},{"ruleId":"1692","severity":1,"message":"1693","line":96,"column":11,"nodeType":"1669","endLine":96,"endColumn":102},{"ruleId":"1606","severity":1,"message":"1707","line":1,"column":8,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1831","line":1,"column":13,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":16},{"ruleId":"1692","severity":1,"message":"1693","line":36,"column":9,"nodeType":"1669","endLine":36,"endColumn":75},{"ruleId":"1710","severity":1,"message":"1711","line":52,"column":11,"nodeType":"1669","messageId":"1712","endLine":56,"endColumn":12,"fix":"1832"},{"ruleId":"1606","severity":1,"message":"1833","line":3,"column":13,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1834","line":26,"column":17,"nodeType":"1608","messageId":"1609","endLine":26,"endColumn":28},{"ruleId":"1622","severity":1,"message":"1835","line":50,"column":6,"nodeType":"1624","endLine":50,"endColumn":34,"suggestions":"1836"},{"ruleId":"1622","severity":1,"message":"1837","line":81,"column":6,"nodeType":"1624","endLine":81,"endColumn":64,"suggestions":"1838"},{"ruleId":"1622","severity":1,"message":"1839","line":85,"column":6,"nodeType":"1624","endLine":85,"endColumn":22,"suggestions":"1840"},{"ruleId":"1618","severity":1,"message":"1619","line":88,"column":32,"nodeType":"1620","messageId":"1621","endLine":88,"endColumn":34},{"ruleId":"1618","severity":1,"message":"1619","line":88,"column":53,"nodeType":"1620","messageId":"1621","endLine":88,"endColumn":55},{"ruleId":"1618","severity":1,"message":"1619","line":89,"column":29,"nodeType":"1620","messageId":"1621","endLine":89,"endColumn":31},{"ruleId":"1618","severity":1,"message":"1619","line":91,"column":36,"nodeType":"1620","messageId":"1621","endLine":91,"endColumn":38},{"ruleId":"1618","severity":1,"message":"1619","line":94,"column":36,"nodeType":"1620","messageId":"1621","endLine":94,"endColumn":38},{"ruleId":"1618","severity":1,"message":"1619","line":102,"column":34,"nodeType":"1620","messageId":"1621","endLine":102,"endColumn":36},{"ruleId":"1618","severity":1,"message":"1619","line":105,"column":23,"nodeType":"1620","messageId":"1621","endLine":105,"endColumn":25},{"ruleId":"1618","severity":1,"message":"1619","line":107,"column":30,"nodeType":"1620","messageId":"1621","endLine":107,"endColumn":32},{"ruleId":"1698","severity":1,"message":"1730","line":107,"column":56,"nodeType":"1700","messageId":"1701","endLine":107,"endColumn":58},{"ruleId":"1618","severity":1,"message":"1619","line":107,"column":81,"nodeType":"1620","messageId":"1621","endLine":107,"endColumn":83},{"ruleId":"1698","severity":1,"message":"1730","line":108,"column":7,"nodeType":"1700","messageId":"1701","endLine":108,"endColumn":9},{"ruleId":"1698","severity":1,"message":"1699","line":108,"column":7,"nodeType":"1700","messageId":"1701","endLine":108,"endColumn":9},{"ruleId":"1618","severity":1,"message":"1619","line":108,"column":25,"nodeType":"1620","messageId":"1621","endLine":108,"endColumn":27},{"ruleId":"1698","severity":1,"message":"1699","line":108,"column":58,"nodeType":"1700","messageId":"1701","endLine":108,"endColumn":60},{"ruleId":"1618","severity":1,"message":"1619","line":108,"column":83,"nodeType":"1620","messageId":"1621","endLine":108,"endColumn":85},{"ruleId":"1618","severity":1,"message":"1619","line":111,"column":30,"nodeType":"1620","messageId":"1621","endLine":111,"endColumn":32},{"ruleId":"1698","severity":1,"message":"1730","line":111,"column":56,"nodeType":"1700","messageId":"1701","endLine":111,"endColumn":58},{"ruleId":"1618","severity":1,"message":"1619","line":111,"column":81,"nodeType":"1620","messageId":"1621","endLine":111,"endColumn":83},{"ruleId":"1698","severity":1,"message":"1730","line":112,"column":7,"nodeType":"1700","messageId":"1701","endLine":112,"endColumn":9},{"ruleId":"1698","severity":1,"message":"1699","line":112,"column":7,"nodeType":"1700","messageId":"1701","endLine":112,"endColumn":9},{"ruleId":"1618","severity":1,"message":"1619","line":112,"column":25,"nodeType":"1620","messageId":"1621","endLine":112,"endColumn":27},{"ruleId":"1698","severity":1,"message":"1699","line":112,"column":58,"nodeType":"1700","messageId":"1701","endLine":112,"endColumn":60},{"ruleId":"1618","severity":1,"message":"1619","line":112,"column":83,"nodeType":"1620","messageId":"1621","endLine":112,"endColumn":85},{"ruleId":"1692","severity":1,"message":"1693","line":135,"column":11,"nodeType":"1669","endLine":135,"endColumn":77},{"ruleId":"1618","severity":1,"message":"1619","line":151,"column":40,"nodeType":"1620","messageId":"1621","endLine":151,"endColumn":42},{"ruleId":"1618","severity":1,"message":"1619","line":152,"column":43,"nodeType":"1620","messageId":"1621","endLine":152,"endColumn":45},{"ruleId":"1698","severity":1,"message":"1730","line":152,"column":76,"nodeType":"1700","messageId":"1701","endLine":152,"endColumn":78},{"ruleId":"1618","severity":1,"message":"1619","line":152,"column":101,"nodeType":"1620","messageId":"1621","endLine":152,"endColumn":103},{"ruleId":"1698","severity":1,"message":"1730","line":152,"column":108,"nodeType":"1700","messageId":"1701","endLine":152,"endColumn":110},{"ruleId":"1698","severity":1,"message":"1699","line":152,"column":108,"nodeType":"1700","messageId":"1701","endLine":152,"endColumn":110},{"ruleId":"1618","severity":1,"message":"1619","line":153,"column":42,"nodeType":"1620","messageId":"1621","endLine":153,"endColumn":44},{"ruleId":"1698","severity":1,"message":"1699","line":153,"column":68,"nodeType":"1700","messageId":"1701","endLine":153,"endColumn":70},{"ruleId":"1618","severity":1,"message":"1619","line":153,"column":93,"nodeType":"1620","messageId":"1621","endLine":153,"endColumn":95},{"ruleId":"1606","severity":1,"message":"1707","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1841","line":43,"column":10,"nodeType":"1608","messageId":"1609","endLine":43,"endColumn":23},{"ruleId":"1622","severity":1,"message":"1835","line":57,"column":6,"nodeType":"1624","endLine":57,"endColumn":43,"suggestions":"1842"},{"ruleId":"1622","severity":1,"message":"1843","line":73,"column":6,"nodeType":"1624","endLine":73,"endColumn":62,"suggestions":"1844"},{"ruleId":"1618","severity":1,"message":"1619","line":76,"column":32,"nodeType":"1620","messageId":"1621","endLine":76,"endColumn":34},{"ruleId":"1618","severity":1,"message":"1619","line":76,"column":53,"nodeType":"1620","messageId":"1621","endLine":76,"endColumn":55},{"ruleId":"1618","severity":1,"message":"1619","line":77,"column":29,"nodeType":"1620","messageId":"1621","endLine":77,"endColumn":31},{"ruleId":"1618","severity":1,"message":"1619","line":79,"column":36,"nodeType":"1620","messageId":"1621","endLine":79,"endColumn":38},{"ruleId":"1618","severity":1,"message":"1619","line":82,"column":36,"nodeType":"1620","messageId":"1621","endLine":82,"endColumn":38},{"ruleId":"1618","severity":1,"message":"1619","line":113,"column":34,"nodeType":"1620","messageId":"1621","endLine":113,"endColumn":36},{"ruleId":"1618","severity":1,"message":"1619","line":116,"column":23,"nodeType":"1620","messageId":"1621","endLine":116,"endColumn":25},{"ruleId":"1618","severity":1,"message":"1619","line":120,"column":30,"nodeType":"1620","messageId":"1621","endLine":120,"endColumn":32},{"ruleId":"1698","severity":1,"message":"1730","line":120,"column":56,"nodeType":"1700","messageId":"1701","endLine":120,"endColumn":58},{"ruleId":"1618","severity":1,"message":"1619","line":120,"column":81,"nodeType":"1620","messageId":"1621","endLine":120,"endColumn":83},{"ruleId":"1698","severity":1,"message":"1730","line":121,"column":7,"nodeType":"1700","messageId":"1701","endLine":121,"endColumn":9},{"ruleId":"1698","severity":1,"message":"1699","line":121,"column":7,"nodeType":"1700","messageId":"1701","endLine":121,"endColumn":9},{"ruleId":"1618","severity":1,"message":"1619","line":121,"column":25,"nodeType":"1620","messageId":"1621","endLine":121,"endColumn":27},{"ruleId":"1698","severity":1,"message":"1699","line":121,"column":58,"nodeType":"1700","messageId":"1701","endLine":121,"endColumn":60},{"ruleId":"1618","severity":1,"message":"1619","line":121,"column":83,"nodeType":"1620","messageId":"1621","endLine":121,"endColumn":85},{"ruleId":"1618","severity":1,"message":"1619","line":126,"column":30,"nodeType":"1620","messageId":"1621","endLine":126,"endColumn":32},{"ruleId":"1698","severity":1,"message":"1730","line":126,"column":56,"nodeType":"1700","messageId":"1701","endLine":126,"endColumn":58},{"ruleId":"1618","severity":1,"message":"1619","line":126,"column":81,"nodeType":"1620","messageId":"1621","endLine":126,"endColumn":83},{"ruleId":"1698","severity":1,"message":"1730","line":127,"column":7,"nodeType":"1700","messageId":"1701","endLine":127,"endColumn":9},{"ruleId":"1698","severity":1,"message":"1699","line":127,"column":7,"nodeType":"1700","messageId":"1701","endLine":127,"endColumn":9},{"ruleId":"1618","severity":1,"message":"1619","line":127,"column":25,"nodeType":"1620","messageId":"1621","endLine":127,"endColumn":27},{"ruleId":"1698","severity":1,"message":"1699","line":127,"column":58,"nodeType":"1700","messageId":"1701","endLine":127,"endColumn":60},{"ruleId":"1618","severity":1,"message":"1619","line":127,"column":83,"nodeType":"1620","messageId":"1621","endLine":127,"endColumn":85},{"ruleId":"1692","severity":1,"message":"1693","line":152,"column":11,"nodeType":"1669","endLine":152,"endColumn":77},{"ruleId":"1618","severity":1,"message":"1619","line":154,"column":63,"nodeType":"1620","messageId":"1621","endLine":154,"endColumn":65},{"ruleId":"1618","severity":1,"message":"1619","line":172,"column":40,"nodeType":"1620","messageId":"1621","endLine":172,"endColumn":42},{"ruleId":"1618","severity":1,"message":"1619","line":173,"column":44,"nodeType":"1620","messageId":"1621","endLine":173,"endColumn":46},{"ruleId":"1698","severity":1,"message":"1730","line":173,"column":51,"nodeType":"1700","messageId":"1701","endLine":173,"endColumn":53},{"ruleId":"1618","severity":1,"message":"1619","line":173,"column":75,"nodeType":"1620","messageId":"1621","endLine":173,"endColumn":77},{"ruleId":"1698","severity":1,"message":"1730","line":173,"column":101,"nodeType":"1700","messageId":"1701","endLine":173,"endColumn":103},{"ruleId":"1698","severity":1,"message":"1699","line":173,"column":101,"nodeType":"1700","messageId":"1701","endLine":173,"endColumn":103},{"ruleId":"1618","severity":1,"message":"1619","line":174,"column":43,"nodeType":"1620","messageId":"1621","endLine":174,"endColumn":45},{"ruleId":"1698","severity":1,"message":"1699","line":174,"column":50,"nodeType":"1700","messageId":"1701","endLine":174,"endColumn":52},{"ruleId":"1618","severity":1,"message":"1619","line":174,"column":74,"nodeType":"1620","messageId":"1621","endLine":174,"endColumn":76},{"ruleId":"1618","severity":1,"message":"1619","line":205,"column":28,"nodeType":"1620","messageId":"1621","endLine":205,"endColumn":30},{"ruleId":"1622","severity":1,"message":"1845","line":101,"column":6,"nodeType":"1624","endLine":101,"endColumn":44,"suggestions":"1846"},{"ruleId":"1618","severity":1,"message":"1619","line":17,"column":23,"nodeType":"1620","messageId":"1621","endLine":17,"endColumn":25},{"ruleId":"1618","severity":1,"message":"1619","line":21,"column":23,"nodeType":"1620","messageId":"1621","endLine":21,"endColumn":25},{"ruleId":"1606","severity":1,"message":"1781","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1847","line":7,"column":9,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":44},{"ruleId":"1606","severity":1,"message":"1782","line":9,"column":7,"nodeType":"1608","messageId":"1609","endLine":9,"endColumn":15},{"ruleId":"1618","severity":1,"message":"1619","line":74,"column":40,"nodeType":"1620","messageId":"1621","endLine":74,"endColumn":42},{"ruleId":"1694","severity":1,"message":"1695","line":86,"column":59,"nodeType":"1810","messageId":"1848","endLine":86,"endColumn":61},{"ruleId":"1622","severity":1,"message":"1783","line":150,"column":6,"nodeType":"1624","endLine":150,"endColumn":75,"suggestions":"1849"},{"ruleId":"1606","severity":1,"message":"1850","line":6,"column":8,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1716","line":7,"column":9,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1737","line":7,"column":47,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":66},{"ruleId":"1606","severity":1,"message":"1721","line":8,"column":9,"nodeType":"1608","messageId":"1609","endLine":8,"endColumn":35},{"ruleId":"1606","severity":1,"message":"1851","line":38,"column":38,"nodeType":"1608","messageId":"1609","endLine":38,"endColumn":51},{"ruleId":"1622","severity":1,"message":"1852","line":52,"column":30,"nodeType":"1853","endLine":52,"endColumn":73},{"ruleId":"1622","severity":1,"message":"1854","line":38,"column":6,"nodeType":"1624","endLine":38,"endColumn":13,"suggestions":"1855"},{"ruleId":"1622","severity":1,"message":"1856","line":72,"column":6,"nodeType":"1624","endLine":72,"endColumn":34,"suggestions":"1857"},{"ruleId":"1606","severity":1,"message":"1858","line":3,"column":9,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":35},{"ruleId":"1606","severity":1,"message":"1859","line":3,"column":37,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":51},{"ruleId":"1710","severity":1,"message":"1711","line":29,"column":11,"nodeType":"1669","messageId":"1712","endLine":29,"endColumn":147,"fix":"1860"},{"ruleId":"1710","severity":1,"message":"1711","line":42,"column":11,"nodeType":"1669","messageId":"1712","endLine":42,"endColumn":143,"fix":"1861"},{"ruleId":"1606","severity":1,"message":"1627","line":1,"column":16,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":24},{"ruleId":"1694","severity":1,"message":"1695","line":22,"column":86,"nodeType":"1696","messageId":"1697","endLine":22,"endColumn":93},{"ruleId":"1618","severity":1,"message":"1619","line":25,"column":50,"nodeType":"1620","messageId":"1621","endLine":25,"endColumn":52},{"ruleId":"1618","severity":1,"message":"1619","line":47,"column":50,"nodeType":"1620","messageId":"1621","endLine":47,"endColumn":52},{"ruleId":"1692","severity":1,"message":"1693","line":65,"column":39,"nodeType":"1669","endLine":65,"endColumn":109},{"ruleId":"1692","severity":1,"message":"1693","line":75,"column":21,"nodeType":"1669","endLine":84,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1862","line":71,"column":7,"nodeType":"1608","messageId":"1609","endLine":71,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1863","line":73,"column":7,"nodeType":"1608","messageId":"1609","endLine":73,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1864","line":80,"column":7,"nodeType":"1608","messageId":"1609","endLine":80,"endColumn":23},{"ruleId":"1618","severity":1,"message":"1619","line":121,"column":26,"nodeType":"1620","messageId":"1621","endLine":121,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1702","line":1,"column":17,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1704","line":2,"column":10,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1705","line":2,"column":23,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1707","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":9},{"ruleId":"1606","severity":1,"message":"1865","line":7,"column":10,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1866","line":7,"column":23,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":30},{"ruleId":"1606","severity":1,"message":"1867","line":7,"column":32,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":41},{"ruleId":"1606","severity":1,"message":"1868","line":7,"column":60,"nodeType":"1608","messageId":"1609","endLine":7,"endColumn":68},{"ruleId":"1606","severity":1,"message":"1782","line":15,"column":7,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":15},{"ruleId":"1606","severity":1,"message":"1869","line":20,"column":10,"nodeType":"1608","messageId":"1609","endLine":20,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1870","line":37,"column":40,"nodeType":"1608","messageId":"1609","endLine":37,"endColumn":49},{"ruleId":"1606","severity":1,"message":"1851","line":37,"column":51,"nodeType":"1608","messageId":"1609","endLine":37,"endColumn":64},{"ruleId":"1622","severity":1,"message":"1871","line":78,"column":6,"nodeType":"1624","endLine":78,"endColumn":8,"suggestions":"1872"},{"ruleId":"1606","severity":1,"message":"1681","line":101,"column":11,"nodeType":"1608","messageId":"1609","endLine":101,"endColumn":23},{"ruleId":"1692","severity":1,"message":"1693","line":108,"column":13,"nodeType":"1669","endLine":108,"endColumn":44},{"ruleId":"1606","severity":1,"message":"1627","line":1,"column":10,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":18},{"ruleId":"1606","severity":1,"message":"1703","line":1,"column":20,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1704","line":2,"column":10,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1705","line":2,"column":23,"nodeType":"1608","messageId":"1609","endLine":2,"endColumn":34},{"ruleId":"1606","severity":1,"message":"1707","line":3,"column":8,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":9},{"ruleId":"1692","severity":1,"message":"1693","line":29,"column":9,"nodeType":"1669","endLine":29,"endColumn":47},{"ruleId":"1692","severity":1,"message":"1693","line":30,"column":9,"nodeType":"1669","endLine":30,"endColumn":89},{"ruleId":"1692","severity":1,"message":"1693","line":18,"column":13,"nodeType":"1669","endLine":18,"endColumn":40},{"ruleId":"1602","replacedBy":"1603"},{"ruleId":"1604","replacedBy":"1605"},{"ruleId":"1606","severity":1,"message":"1706","line":3,"column":10,"nodeType":"1608","messageId":"1609","endLine":3,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1788","line":6,"column":20,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":31},{"ruleId":"1618","severity":1,"message":"1619","line":30,"column":40,"nodeType":"1620","messageId":"1621","endLine":30,"endColumn":42},{"ruleId":"1622","severity":1,"message":"1873","line":64,"column":6,"nodeType":"1624","endLine":64,"endColumn":17,"suggestions":"1874"},{"ruleId":"1606","severity":1,"message":"1875","line":12,"column":10,"nodeType":"1608","messageId":"1609","endLine":12,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1876","line":25,"column":8,"nodeType":"1608","messageId":"1609","endLine":25,"endColumn":14},{"ruleId":"1606","severity":1,"message":"1877","line":27,"column":3,"nodeType":"1608","messageId":"1609","endLine":27,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1878","line":28,"column":3,"nodeType":"1608","messageId":"1609","endLine":28,"endColumn":38},{"ruleId":"1606","severity":1,"message":"1879","line":100,"column":5,"nodeType":"1608","messageId":"1609","endLine":100,"endColumn":21},{"ruleId":"1606","severity":1,"message":"1880","line":106,"column":5,"nodeType":"1608","messageId":"1609","endLine":106,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1881","line":107,"column":5,"nodeType":"1608","messageId":"1609","endLine":107,"endColumn":20},{"ruleId":"1618","severity":1,"message":"1619","line":139,"column":30,"nodeType":"1620","messageId":"1621","endLine":139,"endColumn":32},{"ruleId":"1618","severity":1,"message":"1619","line":157,"column":30,"nodeType":"1620","messageId":"1621","endLine":157,"endColumn":32},{"ruleId":"1622","severity":1,"message":"1882","line":169,"column":6,"nodeType":"1624","endLine":169,"endColumn":39,"suggestions":"1883"},{"ruleId":"1622","severity":1,"message":"1884","line":217,"column":6,"nodeType":"1624","endLine":217,"endColumn":76,"suggestions":"1885"},{"ruleId":"1606","severity":1,"message":"1886","line":219,"column":11,"nodeType":"1608","messageId":"1609","endLine":219,"endColumn":28},{"ruleId":"1606","severity":1,"message":"1887","line":221,"column":11,"nodeType":"1608","messageId":"1609","endLine":221,"endColumn":24},{"ruleId":"1622","severity":1,"message":"1888","line":256,"column":6,"nodeType":"1624","endLine":267,"endColumn":4,"suggestions":"1889"},{"ruleId":"1618","severity":1,"message":"1731","line":272,"column":48,"nodeType":"1620","messageId":"1621","endLine":272,"endColumn":50},{"ruleId":"1622","severity":1,"message":"1845","line":315,"column":6,"nodeType":"1624","endLine":315,"endColumn":62,"suggestions":"1890"},{"ruleId":"1622","severity":1,"message":"1891","line":326,"column":6,"nodeType":"1624","endLine":326,"endColumn":67,"suggestions":"1892"},{"ruleId":"1622","severity":1,"message":"1893","line":346,"column":6,"nodeType":"1624","endLine":346,"endColumn":23,"suggestions":"1894"},{"ruleId":"1622","severity":1,"message":"1895","line":377,"column":6,"nodeType":"1624","endLine":377,"endColumn":27,"suggestions":"1896"},{"ruleId":"1622","severity":1,"message":"1897","line":395,"column":6,"nodeType":"1624","endLine":395,"endColumn":57,"suggestions":"1898"},{"ruleId":"1606","severity":1,"message":"1899","line":4,"column":10,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1900","line":37,"column":19,"nodeType":"1608","messageId":"1609","endLine":37,"endColumn":33},{"ruleId":"1606","severity":1,"message":"1901","line":37,"column":35,"nodeType":"1608","messageId":"1609","endLine":37,"endColumn":45},{"ruleId":"1606","severity":1,"message":"1863","line":37,"column":47,"nodeType":"1608","messageId":"1609","endLine":37,"endColumn":66},{"ruleId":"1606","severity":1,"message":"1902","line":37,"column":68,"nodeType":"1608","messageId":"1609","endLine":37,"endColumn":81},{"ruleId":"1606","severity":1,"message":"1899","line":12,"column":10,"nodeType":"1608","messageId":"1609","endLine":12,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1903","line":51,"column":9,"nodeType":"1608","messageId":"1609","endLine":51,"endColumn":20},{"ruleId":"1622","severity":1,"message":"1904","line":71,"column":6,"nodeType":"1624","endLine":71,"endColumn":100,"suggestions":"1905"},{"ruleId":"1622","severity":1,"message":"1906","line":78,"column":6,"nodeType":"1624","endLine":78,"endColumn":13,"suggestions":"1907"},{"ruleId":"1606","severity":1,"message":"1681","line":15,"column":11,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":23},{"ruleId":"1618","severity":1,"message":"1731","line":36,"column":49,"nodeType":"1620","messageId":"1621","endLine":36,"endColumn":51},{"ruleId":"1692","severity":1,"message":"1693","line":53,"column":11,"nodeType":"1669","endLine":60,"endColumn":13},{"ruleId":"1618","severity":1,"message":"1731","line":14,"column":40,"nodeType":"1620","messageId":"1621","endLine":14,"endColumn":42},{"ruleId":"1618","severity":1,"message":"1731","line":33,"column":48,"nodeType":"1620","messageId":"1621","endLine":33,"endColumn":50},{"ruleId":"1692","severity":1,"message":"1693","line":48,"column":11,"nodeType":"1669","endLine":55,"endColumn":13},{"ruleId":"1606","severity":1,"message":"1908","line":1,"column":31,"nodeType":"1608","messageId":"1609","endLine":1,"endColumn":42},{"ruleId":"1606","severity":1,"message":"1909","line":4,"column":8,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":28},{"ruleId":"1622","severity":1,"message":"1910","line":62,"column":36,"nodeType":"1853","endLine":65,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1779","line":10,"column":9,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":32},{"ruleId":"1622","severity":1,"message":"1911","line":32,"column":6,"nodeType":"1624","endLine":32,"endColumn":64,"suggestions":"1912"},{"ruleId":"1622","severity":1,"message":"1913","line":42,"column":6,"nodeType":"1624","endLine":42,"endColumn":29,"suggestions":"1914"},{"ruleId":"1622","severity":1,"message":"1915","line":85,"column":6,"nodeType":"1624","endLine":85,"endColumn":56,"suggestions":"1916"},{"ruleId":"1622","severity":1,"message":"1917","line":103,"column":6,"nodeType":"1624","endLine":103,"endColumn":37,"suggestions":"1918"},{"ruleId":"1622","severity":1,"message":"1919","line":52,"column":6,"nodeType":"1624","endLine":52,"endColumn":69,"suggestions":"1920"},{"ruleId":"1622","severity":1,"message":"1919","line":40,"column":6,"nodeType":"1624","endLine":40,"endColumn":69,"suggestions":"1921"},{"ruleId":"1606","severity":1,"message":"1779","line":13,"column":9,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":32},{"ruleId":"1622","severity":1,"message":"1922","line":60,"column":6,"nodeType":"1624","endLine":60,"endColumn":29,"suggestions":"1923"},{"ruleId":"1606","severity":1,"message":"1779","line":13,"column":9,"nodeType":"1608","messageId":"1609","endLine":13,"endColumn":32},{"ruleId":"1606","severity":1,"message":"1924","line":24,"column":7,"nodeType":"1608","messageId":"1609","endLine":24,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1925","line":25,"column":7,"nodeType":"1608","messageId":"1609","endLine":25,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1926","line":26,"column":7,"nodeType":"1608","messageId":"1609","endLine":26,"endColumn":28},{"ruleId":"1622","severity":1,"message":"1927","line":48,"column":6,"nodeType":"1624","endLine":48,"endColumn":89,"suggestions":"1928"},{"ruleId":"1622","severity":1,"message":"1929","line":59,"column":6,"nodeType":"1624","endLine":59,"endColumn":23,"suggestions":"1930"},{"ruleId":"1618","severity":1,"message":"1619","line":76,"column":40,"nodeType":"1620","messageId":"1621","endLine":76,"endColumn":42},{"ruleId":"1618","severity":1,"message":"1619","line":78,"column":30,"nodeType":"1620","messageId":"1621","endLine":78,"endColumn":32},{"ruleId":"1618","severity":1,"message":"1619","line":80,"column":37,"nodeType":"1620","messageId":"1621","endLine":80,"endColumn":39},{"ruleId":"1618","severity":1,"message":"1619","line":82,"column":37,"nodeType":"1620","messageId":"1621","endLine":82,"endColumn":39},{"ruleId":"1618","severity":1,"message":"1619","line":86,"column":30,"nodeType":"1620","messageId":"1621","endLine":86,"endColumn":32},{"ruleId":"1618","severity":1,"message":"1619","line":88,"column":37,"nodeType":"1620","messageId":"1621","endLine":88,"endColumn":39},{"ruleId":"1618","severity":1,"message":"1619","line":90,"column":37,"nodeType":"1620","messageId":"1621","endLine":90,"endColumn":39},{"ruleId":"1622","severity":1,"message":"1931","line":152,"column":6,"nodeType":"1624","endLine":152,"endColumn":48,"suggestions":"1932"},{"ruleId":"1622","severity":1,"message":"1917","line":171,"column":6,"nodeType":"1624","endLine":171,"endColumn":54,"suggestions":"1933"},{"ruleId":"1606","severity":1,"message":"1934","line":15,"column":5,"nodeType":"1608","messageId":"1609","endLine":15,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1935","line":16,"column":5,"nodeType":"1608","messageId":"1609","endLine":16,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1936","line":17,"column":5,"nodeType":"1608","messageId":"1609","endLine":17,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1937","line":19,"column":5,"nodeType":"1608","messageId":"1609","endLine":19,"endColumn":19},{"ruleId":"1606","severity":1,"message":"1938","line":26,"column":5,"nodeType":"1608","messageId":"1609","endLine":26,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1939","line":30,"column":29,"nodeType":"1608","messageId":"1609","endLine":30,"endColumn":43},{"ruleId":"1622","severity":1,"message":"1919","line":42,"column":6,"nodeType":"1624","endLine":42,"endColumn":69,"suggestions":"1940"},{"ruleId":"1622","severity":1,"message":"1941","line":43,"column":6,"nodeType":"1624","endLine":43,"endColumn":49,"suggestions":"1942"},{"ruleId":"1622","severity":1,"message":"1641","line":55,"column":6,"nodeType":"1624","endLine":55,"endColumn":51,"suggestions":"1943"},{"ruleId":"1606","severity":1,"message":"1782","line":4,"column":7,"nodeType":"1608","messageId":"1609","endLine":4,"endColumn":15},{"ruleId":"1622","severity":1,"message":"1944","line":21,"column":6,"nodeType":"1624","endLine":21,"endColumn":57,"suggestions":"1945"},{"ruleId":"1622","severity":1,"message":"1946","line":25,"column":6,"nodeType":"1624","endLine":25,"endColumn":24,"suggestions":"1947"},{"ruleId":"1622","severity":1,"message":"1641","line":52,"column":6,"nodeType":"1624","endLine":52,"endColumn":51,"suggestions":"1948"},{"ruleId":"1606","severity":1,"message":"1949","line":85,"column":65,"nodeType":"1608","messageId":"1609","endLine":85,"endColumn":81},{"ruleId":"1710","severity":1,"message":"1711","line":99,"column":17,"nodeType":"1669","messageId":"1712","endLine":103,"endColumn":18,"fix":"1950"},{"ruleId":"1618","severity":1,"message":"1619","line":100,"column":38,"nodeType":"1620","messageId":"1621","endLine":100,"endColumn":40},{"ruleId":"1618","severity":1,"message":"1619","line":104,"column":41,"nodeType":"1620","messageId":"1621","endLine":104,"endColumn":43},{"ruleId":"1692","severity":1,"message":"1693","line":13,"column":9,"nodeType":"1669","endLine":13,"endColumn":92},{"ruleId":"1606","severity":1,"message":"1679","line":6,"column":7,"nodeType":"1608","messageId":"1609","endLine":6,"endColumn":16},{"ruleId":"1606","severity":1,"message":"1951","line":10,"column":10,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":20},{"ruleId":"1606","severity":1,"message":"1952","line":10,"column":22,"nodeType":"1608","messageId":"1609","endLine":10,"endColumn":35},{"ruleId":"1710","severity":1,"message":"1711","line":24,"column":13,"nodeType":"1669","messageId":"1712","endLine":24,"endColumn":66,"fix":"1953"},{"ruleId":"1710","severity":1,"message":"1711","line":25,"column":13,"nodeType":"1669","messageId":"1712","endLine":25,"endColumn":73,"fix":"1954"},{"ruleId":"1606","severity":1,"message":"1955","line":26,"column":7,"nodeType":"1608","messageId":"1609","endLine":26,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1956","line":46,"column":12,"nodeType":"1608","messageId":"1609","endLine":46,"endColumn":23},{"ruleId":"1606","severity":1,"message":"1957","line":46,"column":25,"nodeType":"1608","messageId":"1609","endLine":46,"endColumn":39},{"ruleId":"1606","severity":1,"message":"1958","line":48,"column":12,"nodeType":"1608","messageId":"1609","endLine":48,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1959","line":49,"column":12,"nodeType":"1608","messageId":"1609","endLine":49,"endColumn":24},{"ruleId":"1606","severity":1,"message":"1960","line":52,"column":12,"nodeType":"1608","messageId":"1609","endLine":52,"endColumn":17},{"ruleId":"1606","severity":1,"message":"1961","line":52,"column":19,"nodeType":"1608","messageId":"1609","endLine":52,"endColumn":27},{"ruleId":"1606","severity":1,"message":"1962","line":57,"column":22,"nodeType":"1608","messageId":"1609","endLine":57,"endColumn":33},{"ruleId":"1694","severity":1,"message":"1695","line":251,"column":43,"nodeType":"1810","messageId":"1848","endLine":251,"endColumn":45},{"ruleId":"1622","severity":1,"message":"1963","line":273,"column":8,"nodeType":"1624","endLine":273,"endColumn":10,"suggestions":"1964"},{"ruleId":"1692","severity":1,"message":"1693","line":282,"column":39,"nodeType":"1669","endLine":282,"endColumn":84},{"ruleId":"1692","severity":1,"message":"1693","line":300,"column":33,"nodeType":"1669","endLine":300,"endColumn":84},{"ruleId":"1692","severity":1,"message":"1693","line":304,"column":29,"nodeType":"1669","endLine":304,"endColumn":66},{"ruleId":"1692","severity":1,"message":"1693","line":328,"column":33,"nodeType":"1669","endLine":328,"endColumn":67},{"ruleId":"1692","severity":1,"message":"1693","line":369,"column":101,"nodeType":"1669","endLine":369,"endColumn":144},{"ruleId":"1710","severity":1,"message":"1711","line":373,"column":37,"nodeType":"1669","messageId":"1712","endLine":374,"endColumn":100,"fix":"1965"},{"ruleId":"1667","severity":1,"message":"1966","line":499,"column":76,"nodeType":"1669","endLine":499,"endColumn":117},{"ruleId":"1692","severity":1,"message":"1693","line":506,"column":84,"nodeType":"1669","endLine":506,"endColumn":127},{"ruleId":"1710","severity":1,"message":"1711","line":509,"column":82,"nodeType":"1669","messageId":"1712","endLine":509,"endColumn":245,"fix":"1967"},{"ruleId":"1710","severity":1,"message":"1711","line":510,"column":73,"nodeType":"1669","messageId":"1712","endLine":510,"endColumn":228,"fix":"1968"},{"ruleId":"1692","severity":1,"message":"1693","line":673,"column":41,"nodeType":"1669","endLine":674,"endColumn":109},{"ruleId":"1692","severity":1,"message":"1693","line":693,"column":41,"nodeType":"1669","endLine":694,"endColumn":109},{"ruleId":"1692","severity":1,"message":"1693","line":713,"column":41,"nodeType":"1669","endLine":714,"endColumn":109},{"ruleId":"1692","severity":1,"message":"1693","line":733,"column":41,"nodeType":"1669","endLine":734,"endColumn":109},{"ruleId":"1692","severity":1,"message":"1693","line":753,"column":41,"nodeType":"1669","endLine":754,"endColumn":109},{"ruleId":"1692","severity":1,"message":"1693","line":773,"column":41,"nodeType":"1669","endLine":774,"endColumn":109},{"ruleId":"1692","severity":1,"message":"1693","line":794,"column":41,"nodeType":"1669","endLine":795,"endColumn":109},{"ruleId":"1692","severity":1,"message":"1693","line":814,"column":41,"nodeType":"1669","endLine":815,"endColumn":109},{"ruleId":"1692","severity":1,"message":"1693","line":833,"column":29,"nodeType":"1669","endLine":833,"endColumn":72},"no-native-reassign",["1969"],"no-negated-in-lhs",["1970"],"@typescript-eslint/no-unused-vars","'Transform' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Redirect' is defined but never used.","'ErrorPage' is defined but never used.","'PrivateRoute' is defined but never used.","'adminRoute' is defined but never used.","'publicRoute' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["1971"],"'ConnectorNames' is defined but never used.","'useState' is defined but never used.","'InstallMetameask' is defined but never used.","'onLoginWithoutLoginPage' is assigned a value but never used.","'useContext' is defined but never used.","React Hook useEffect has missing dependencies: 'active', 'appChainID', 'dispatch', 'error', and 'handleConnectorDisconnect'. Either include them or remove the dependency array.",["1972"],"React Hook useEffect has a missing dependency: 'currentConnector'. Either include it or remove the dependency array.",["1973"],"React Hook useEffect has a missing dependency: 'setOpenConnectDialog'. Either include it or remove the dependency array. If 'setOpenConnectDialog' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1974"],"React Hook useEffect has a missing dependency: 'tryActivate'. Either include it or remove the dependency array.",["1975"],"React Hook useEffect has a missing dependency: 'switchNetwork'. Either include it or remove the dependency array.",["1976"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["1977"],"no-useless-escape","Unnecessary escape character: \\'.","TemplateElement","unnecessaryEscape",["1978","1979"],"React Hook useCallback has missing dependencies: 'activate', 'connectWalletLoading', 'dispatch', and 'setOpenConnectDialog'. Either include them or remove the dependency array. If 'setOpenConnectDialog' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1980"],["1981"],"React Hook useCallback has missing dependencies: 'deactivate' and 'dispatch'. Either include them or remove the dependency array.",["1982"],"'userExists' is assigned a value but never used.","'userRegisterLoading' is assigned a value but never used.","'getValues' is assigned a value but never used.","'setValue' is assigned a value but never used.",["1983"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.history'. Either include them or remove the dependency array.",["1984"],"'CircularProgress' is defined but never used.","'Container' is defined but never used.","'useParams' is defined but never used.","'loginLogo' is assigned a value but never used.","'classes' is assigned a value but never used.",["1985"],["1986"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'loginUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["1987"],"React Hook useEffect has missing dependencies: 'baseRequest', 'dispatch', 'loginInvestor', and 'props.history'. Either include them or remove the dependency array.",["1988"],"React Hook useEffect has a missing dependency: 'countDownUnix'. Either include it or remove the dependency array.",["1989"],"'claimTokenClaimableReducer' is defined but never used.","'res' is assigned a value but never used.","'iconClose' is assigned a value but never used.","'ETHERSCAN_BASE_URL' is assigned a value but never used.","'currencyIcon' is assigned a value but never used.","React Hook useCallback has unnecessary dependencies: 'endBuyTimeInDate', 'endJoinTimeInDate', 'joinTimeInDate', 'poolDetails.method', and 'startBuyTimeInDate'. Either exclude them or remove the dependency array.",["1990"],"React Hook useMemo has missing dependencies: 'currencyName' and 'pickedWinner'. Either include them or remove the dependency array.",["1991"],"React Hook useEffect has a missing dependency: 'activeNav'. Either include it or remove the dependency array.",["1992"],["1993"],["1994"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'useRef' is defined but never used.","'useEffect' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","'Link' is defined but never used.","'_' is defined but never used.","'cardImage' is assigned a value but never used.","'background' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"1995","text":"1996"},{"range":"1997","text":"1996"},"'convertFromWei' is defined but never used.","'getContractInstance' is defined but never used.","'getContractInstanceWeb3' is defined but never used.","'getPoolContract' is defined but never used.","'POOL_ABI' is defined but never used.","'NETWORK_AVAILABLE' is defined but never used.","'NFT_PLUS_AMOUNT_PRODUCTION' is defined but never used.","'BigNumber' is defined but never used.","'getProgressWithPools' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'token'. Either include them or remove the dependency array.",["1998"],"'dispatch' is assigned a value but never used.","'pagination' is assigned a value but never used.","'loading' is assigned a value but never used.","'checkTBA' is assigned a value but never used.","Unexpected mix of '&&' and '||'.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'poolFetched' and 'setStatusPools'. Either include them or remove the dependency array.",["1999"],"'getTiers' is defined but never used.","'getUserInfo' is defined but never used.","'RedKite' is defined but never used.","'SmartContractMethod' is defined but never used.","'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","no-useless-rename","Destructuring assignment data unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"2000","text":"2001"},"'error' is assigned a value but never used.","'rates' is assigned a value but never used.","'setRates' is assigned a value but never used.","'totalStaked' is assigned a value but never used.",["2002"],["2003"],"'WalletLink' is defined but never used.","'URI_AVAILABLE' is defined but never used.","'NETWORK_BSC_URL' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"2004","text":"2005"},"'TextTitle' is defined but never used.","'Logo' is defined but never used.","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","'useMemo' is defined but never used.","React Hook useEffect has a missing dependency: 'tiersLoading'. Either include it or remove the dependency array.",["2006"],"React Hook useEffect has missing dependencies: 'address', 'appChainID', 'calculateUserTier', 'connector', and 'networkAvailable'. Either include them or remove the dependency array.",["2007"],"React Hook useEffect has missing dependencies: 'appChainID' and 'connector'. Either include them or remove the dependency array.",["2008"],"React Hook useCallback has a missing dependency: 'config'. Either include it or remove the dependency array.",["2009"],"React Hook useEffect has a missing dependency: 'fetchDataFromUri'. Either include it or remove the dependency array.",["2010"],"'history' is assigned a value but never used.","'alertSuccess' is defined but never used.","'fixGasLimit' is defined but never used.","'fixGasLimitWithProvider' is defined but never used.","'requiredReleaseTime' is assigned a value but never used.","'useTokenDetails' is defined but never used.","'BASE_URL' is assigned a value but never used.","React Hook useMemo has an unnecessary dependency: 'connectedAccountTier'. Either exclude it or remove the dependency array.",["2011"],["2012"],"'TIERS' is defined but never used.","'CONVERSION_RATE' is defined but never used.","'isWidthDown' is defined but never used.","'isWidthUp' is defined but never used.","'getWithdrawFee' is defined but never used.","'AnimatedNumber' is defined but never used.","'timeAgo' is defined but never used.","'DialogTitle' is defined but never used.","'DialogActions' is defined but never used.","'connectedAccount' is assigned a value but never used.","'totalUnstaked' is assigned a value but never used.",["2013"],"React Hook useEffect has missing dependencies: 'dispatch' and 'transactionHashes'. Either include them or remove the dependency array. You can also do a functional update 'setTransactionHashes(t => ...)' if you only need 'transactionHashes' in the 'setTransactionHashes' call.",["2014"],["2015"],["2016"],"'balance' is assigned a value but never used.","'userInfo' is assigned a value but never used.","'isAuth' is assigned a value but never used.","'wrongChain' is assigned a value but never used.","'handleRejectKYC' is assigned a value but never used.","'isKYC' is assigned a value but never used.",["2017"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'checkPoolIsFinish' is defined but never used.","'dotIcon' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'autoFetch'. Either include it or remove the dependency array.",["2018"],"'format' is defined but never used.","'NONAME' is defined but never used.","'AccountIcon' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentConnector', 'handleProviderChosen', 'setCurrentConnectedWallet', and 'setWalletName'. Either include them or remove the dependency array.",["2019"],{"range":"2020","text":"1996"},{"range":"2021","text":"1996"},{"range":"2022","text":"1996"},"'APP_NETWORKS_NAME' is defined but never used.","Unnecessary escape character: \\[.","Literal",["2023","2024"],["2025","2026"],"React Hook useEffect has missing dependencies: 'connectedAccount', 'dispatch', 'inputEmail', 'setEmail', 'setEmailVeryfied', 'setOpenModalVerifyEmail', and 'setSignature'. Either include them or remove the dependency array.",["2027"],"'set' is defined but never used.",{"range":"2028","text":"1996"},"'gt' is defined but never used.","'withdrawFee' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setDefaultToken'. Either include it or remove the dependency array.",["2029"],"React Hook useEffect has a missing dependency: 'currentStaked'. Either include it or remove the dependency array.",["2030"],"React Hook useEffect has missing dependencies: 'connectedAccount' and 'dispatch'. Either include them or remove the dependency array.",["2031"],"'currentStaked' is assigned a value but never used.",["2032"],"React Hook useEffect has a missing dependency: 'currentBalance'. Either include it or remove the dependency array.",["2033"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["2034"],"'convertMomentObjectToDateTimeString' is defined but never used.","expectedInside",["2035"],"'Pool_ABI' is defined but never used.","'totalSoldCoin' is assigned a value but never used.","Assignments to the 'soldProgressInterval' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","React Hook useEffect has a missing dependency: 'poolJoinLoading'. Either include it or remove the dependency array.",["2036"],"React Hook useEffect has missing dependencies: 'account', 'dispatch', 'poolId', and 'setSignature'. Either include them or remove the dependency array.",["2037"],"'INSTRUCTION_WHITELIST_LINK' is defined but never used.","'WHITELIST_LINK' is defined but never used.",{"range":"2038","text":"1996"},{"range":"2039","text":"1996"},"'method' is assigned a value but never used.","'purchasableCurrency' is assigned a value but never used.","'displayPriceRate' is assigned a value but never used.","'POOL_STATUS' is defined but never used.","'NETWORK' is defined but never used.","'POOL_TYPE' is defined but never used.","'BUY_TYPE' is defined but never used.","'timeLeft' is assigned a value but never used.","'tokenSold' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'pool.start_time'. Either include it or remove the dependency array.",["2040"],"React Hook useEffect has a missing dependency: 'emitCurrentDate'. Either include it or remove the dependency array.",["2041"],"'BSC_CHAIN_ID' is defined but never used.","'moment' is defined but never used.","'convertTimeToStringFormat' is defined but never used.","'convertTimeToStringFormatWithoutGMT' is defined but never used.","'endBuyTimeInDate' is assigned a value but never used.","'joinPoolSuccess' is assigned a value but never used.","'alreadyJoinPool' is assigned a value but never used.","React Hook useCallback has an unnecessary dependency: 'appChainID'. Either exclude it or remove the dependency array.",["2042"],"React Hook useMemo has unnecessary dependencies: 'poolAmount' and 'tokenSold'. Either exclude them or remove the dependency array.",["2043"],"'retrieveTokenSold' is assigned a value but never used.","'timeToShowMsg' is assigned a value but never used.","React Hook useMemo has missing dependencies: 'currencyName', 'tokenDetails?.symbol', and 'totalUserTokenSold'. Either include them or remove the dependency array.",["2044"],["2045"],"React Hook useCallback has missing dependencies: 'retrieveTokenAllowance', 'retrieveTokenBalance', and 'retrieveUserPurchased'. Either include them or remove the dependency array.",["2046"],"React Hook useEffect has a missing dependency: 'fetchPoolDetails'. Either include it or remove the dependency array.",["2047"],"React Hook useEffect has missing dependencies: 'fetchPoolDetails', 'fetchUserBalance', and 'setBuyTokenSuccess'. Either include them or remove the dependency array.",["2048"],"React Hook useEffect has missing dependencies: 'connectedAccount', 'parsedFirstBuy', and 'poolAddress'. Either include them or remove the dependency array.",["2049"],"'numberWithCommas' is defined but never used.","'userWinLottery' is assigned a value but never used.","'maximumBuy' is assigned a value but never used.","'verifiedEmail' is assigned a value but never used.","'nowTimeUnix' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'retrieveClaimableTokens'. Either include it or remove the dependency array.",["2050"],"React Hook useEffect has a missing dependency: 'setClaimTokenLoading'. Either include it or remove the dependency array.",["2051"],"'useCallback' is defined but never used.","'usePoolDepositAction' is defined but never used.","Assignments to the 'detechCurrentPhaseInterval' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has a missing dependency: 'claimTokenWithSignature'. Either include it or remove the dependency array.",["2052"],"React Hook useEffect has missing dependencies: 'setSignature' and 'setUserClaimSignature'. Either include them or remove the dependency array.",["2053"],"React Hook useCallback has missing dependencies: 'dispatch', 'setSignature', and 'setUserClaimSignature'. Either include them or remove the dependency array.",["2054"],"React Hook useCallback has missing dependencies: 'dispatch', 'setSignature', and 'signMessage'. Either include them or remove the dependency array.",["2055"],"React Hook useCallback has a missing dependency: 'tokenDetails'. Either include it or remove the dependency array.",["2056"],["2057"],"React Hook useCallback has missing dependencies: 'account', 'dispatch', and 'library'. Either include them or remove the dependency array.",["2058"],"'USDT_ADDRESS' is assigned a value but never used.","'USDC_ADDRESS' is assigned a value but never used.","'USDT_OR_USDC_DECIMALS' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'depositWithSignature'. Either include it or remove the dependency array.",["2059"],"React Hook useEffect has missing dependencies: 'setSignature' and 'setUserPurchasedSignature'. Either include them or remove the dependency array.",["2060"],"React Hook useCallback has missing dependencies: 'connectedAccount', 'dispatch', 'library', 'networkAvailable', 'setSignature', and 'setUserPurchasedSignature'. Either include them or remove the dependency array.",["2061"],["2062"],"'releaseTime' is assigned a value but never used.","'currentClaim' is assigned a value but never used.","'currentClaimIndex' is assigned a value but never used.","'nextClaimIndex' is assigned a value but never used.","'userPurchasedReturn' is assigned a value but never used.","'loadingAirdrop' is assigned a value but never used.",["2063"],"React Hook useCallback has a missing dependency: 'library.provider'. Either include it or remove the dependency array.",["2064"],["2065"],"React Hook useMemo has unnecessary dependencies: 'connectedAccount', 'error', 'fetchDone', and 'loading'. Either exclude them or remove the dependency array.",["2066"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["2067"],["2068"],"'networkAvailable' is assigned a value but never used.",{"range":"2069","text":"1996"},"'showBanner' is assigned a value but never used.","'setShowBanner' is assigned a value but never used.",{"range":"2070","text":"1996"},{"range":"2071","text":"1996"},"'receivedAddress' is assigned a value but never used.","'isConnected' is assigned a value but never used.","'setIsConnected' is assigned a value but never used.","'isRejected' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'setMemoHash' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentWallet'. Either include it or remove the dependency array.",["2072"],{"range":"2073","text":"1996"},"The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",{"range":"2074","text":"1996"},{"range":"2075","text":"1996"},"no-global-assign","no-unsafe-negation",{"desc":"2076","fix":"2077"},{"desc":"2078","fix":"2079"},{"desc":"2080","fix":"2081"},{"desc":"2082","fix":"2083"},{"desc":"2084","fix":"2085"},{"desc":"2086","fix":"2087"},{"desc":"2088","fix":"2089"},{"messageId":"2090","fix":"2091","desc":"2092"},{"messageId":"2093","fix":"2094","desc":"2095"},{"desc":"2096","fix":"2097"},{"desc":"2098","fix":"2099"},{"desc":"2100","fix":"2101"},{"desc":"2102","fix":"2103"},{"desc":"2104","fix":"2105"},{"desc":"2106","fix":"2107"},{"desc":"2108","fix":"2109"},{"desc":"2110","fix":"2111"},{"desc":"2112","fix":"2113"},{"desc":"2114","fix":"2115"},{"desc":"2116","fix":"2117"},{"desc":"2118","fix":"2119"},{"desc":"2120","fix":"2121"},{"desc":"2122","fix":"2123"},{"desc":"2124","fix":"2125"},[4495,4495]," rel=\"noreferrer\"",[6182,6182],{"desc":"2126","fix":"2127"},{"desc":"2128","fix":"2129"},[2019,2034],"data = {}",{"desc":"2130","fix":"2131"},{"desc":"2132","fix":"2133"},[326,326],"()",{"desc":"2134","fix":"2135"},{"desc":"2136","fix":"2137"},{"desc":"2138","fix":"2139"},{"desc":"2140","fix":"2141"},{"desc":"2142","fix":"2143"},{"desc":"2144","fix":"2145"},{"desc":"2144","fix":"2146"},{"desc":"2147","fix":"2148"},{"desc":"2149","fix":"2150"},{"desc":"2151","fix":"2152"},{"desc":"2153","fix":"2154"},{"desc":"2130","fix":"2155"},{"desc":"2156","fix":"2157"},{"desc":"2158","fix":"2159"},[7784,7784],[661,661],[842,842],{"messageId":"2090","fix":"2160","desc":"2092"},{"messageId":"2093","fix":"2161","desc":"2095"},{"messageId":"2090","fix":"2162","desc":"2092"},{"messageId":"2093","fix":"2163","desc":"2095"},{"desc":"2164","fix":"2165"},[1721,1721],{"desc":"2166","fix":"2167"},{"desc":"2168","fix":"2169"},{"desc":"2170","fix":"2171"},{"desc":"2172","fix":"2173"},{"desc":"2174","fix":"2175"},{"desc":"2176","fix":"2177"},{"desc":"2178","fix":"2179"},{"desc":"2180","fix":"2181"},{"desc":"2182","fix":"2183"},[1139,1139],[1937,1937],{"desc":"2184","fix":"2185"},{"desc":"2186","fix":"2187"},{"desc":"2188","fix":"2189"},{"desc":"2190","fix":"2191"},{"desc":"2192","fix":"2193"},{"desc":"2194","fix":"2195"},{"desc":"2196","fix":"2197"},{"desc":"2198","fix":"2199"},{"desc":"2200","fix":"2201"},{"desc":"2202","fix":"2203"},{"desc":"2204","fix":"2205"},{"desc":"2206","fix":"2207"},{"desc":"2208","fix":"2209"},{"desc":"2210","fix":"2211"},{"desc":"2212","fix":"2213"},{"desc":"2214","fix":"2215"},{"desc":"2216","fix":"2217"},{"desc":"2216","fix":"2218"},{"desc":"2219","fix":"2220"},{"desc":"2221","fix":"2222"},{"desc":"2223","fix":"2224"},{"desc":"2225","fix":"2226"},{"desc":"2227","fix":"2228"},{"desc":"2216","fix":"2229"},{"desc":"2230","fix":"2231"},{"desc":"2232","fix":"2233"},{"desc":"2234","fix":"2235"},{"desc":"2236","fix":"2237"},{"desc":"2232","fix":"2238"},[3303,3303],[777,777],[894,894],{"desc":"2239","fix":"2240"},[18278,18278],[28371,28371],[28653,28653],"Update the dependencies array to be: [dispatch, history]",{"range":"2241","text":"2242"},"Update the dependencies array to be: [currentConnector, connectedAccount, active, error, dispatch, appChainID, handleConnectorDisconnect]",{"range":"2243","text":"2244"},"Update the dependencies array to be: [appChainID, currentConnector]",{"range":"2245","text":"2246"},"Update the dependencies array to be: [appNetworkLoading, setOpenConnectDialog]",{"range":"2247","text":"2248"},"Update the dependencies array to be: [currentConnector, appChainID, walletName, binanceAvailable, tryActivate]",{"range":"2249","text":"2250"},"Update the dependencies array to be: [walletChainID, appNetworkLoading, appChainID, openConnectDialog, switchNetwork]",{"range":"2251","text":"2252"},"Update the dependencies array to be: [connectWalletLoading, connectedAccount, chainId, dispatch]",{"range":"2253","text":"2254"},"removeEscape",{"range":"2255","text":"2256"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"2257","text":"2258"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [connectWalletLoading, walletName, activate, setOpenConnectDialog, dispatch]",{"range":"2259","text":"2260"},"Update the dependencies array to be: [walletNameSuccess, connectedAccount, appChainID, walletChainID, dispatch]",{"range":"2261","text":"2262"},"Update the dependencies array to be: [deactivate, dispatch]",{"range":"2263","text":"2264"},"Update the dependencies array to be: [dispatch, error, errorRegister]",{"range":"2265","text":"2266"},"Update the dependencies array to be: [loginInvestor, error, props.history, dispatch]",{"range":"2267","text":"2268"},"Update the dependencies array to be: [dispatch, error]",{"range":"2269","text":"2270"},"Update the dependencies array to be: [connectedAccount, dispatch, handleConnectorDisconnect, history]",{"range":"2271","text":"2272"},"Update the dependencies array to be: [loginInvestor, props.history]",{"range":"2273","text":"2274"},"Update the dependencies array to be: [baseRequest, dispatch, loginInvestor, props.history, token]",{"range":"2275","text":"2276"},"Update the dependencies array to be: [countDownUnix]",{"range":"2277","text":"2278"},"Update the dependencies array to be: []",{"range":"2279","text":"2280"},"Update the dependencies array to be: [verifiedEmail, pickedWinner, poolDetails, userBuyLimit, currencyName]",{"range":"2281","text":"2282"},"Update the dependencies array to be: [activeNav, endBuyTimeInDate]",{"range":"2283","text":"2284"},"Update the dependencies array to be: [currentUserTier, dispatch]",{"range":"2285","text":"2286"},"Update the dependencies array to be: [appChainID, dispatch, poolDetails]",{"range":"2287","text":"2288"},"Update the dependencies array to be: [dispatch, token]",{"range":"2289","text":"2290"},"Update the dependencies array to be: [poolFetched, pools, setStatusPools]",{"range":"2291","text":"2292"},"Update the dependencies array to be: [isAuth, wrongChain, connectedAccount, dispatch]",{"range":"2293","text":"2294"},"Update the dependencies array to be: [appChainID, dispatch]",{"range":"2295","text":"2296"},"Update the dependencies array to be: [userInfoLoading, userInfo, tokenDetailsLoading, tokenDetails, tiersLoading]",{"range":"2297","text":"2298"},"Update the dependencies array to be: [address, appChainID, calculateUserTier, connector, loading, networkAvailable, userInfo]",{"range":"2299","text":"2300"},"Update the dependencies array to be: [address, appChainID, connector, networkAvailable]",{"range":"2301","text":"2302"},"Update the dependencies array to be: [config, uri]",{"range":"2303","text":"2304"},"Update the dependencies array to be: [uri, suspendRender, fetchDataFromUri]",{"range":"2305","text":"2306"},"Update the dependencies array to be: [data, loading, error, poolsDone]",{"range":"2307","text":"2308"},{"range":"2309","text":"2308"},"Update the dependencies array to be: [dispatch]",{"range":"2310","text":"2311"},"Update the dependencies array to be: [depositTransaction, depositError, transactionHashes, dispatch]",{"range":"2312","text":"2313"},"Update the dependencies array to be: [approveTransaction, approveError, transactionHashes, dispatch]",{"range":"2314","text":"2315"},"Update the dependencies array to be: [withdrawTransaction, withdrawError, transactionHashes, dispatch]",{"range":"2316","text":"2317"},{"range":"2318","text":"2294"},"Update the dependencies array to be: [autoFetch, pool]",{"range":"2319","text":"2320"},"Update the dependencies array to be: [walletsInfo, walletName, currentConnector, setCurrentConnectedWallet, setWalletName, handleProviderChosen]",{"range":"2321","text":"2322"},{"range":"2323","text":"2256"},{"range":"2324","text":"2258"},{"range":"2325","text":"2256"},{"range":"2326","text":"2258"},"Update the dependencies array to be: [connectedAccount, dispatch, inputEmail, setEmail, setEmailVeryfied, setOpenModalVerifyEmail, setSignature, signature]",{"range":"2327","text":"2328"},"Update the dependencies array to be: [userInfo, listTokenDetails, setDefaultToken]",{"range":"2329","text":"2330"},"Update the dependencies array to be: [connectedAccount, userInfo, withdrawAmount, currentToken, currentStaked]",{"range":"2331","text":"2332"},"Update the dependencies array to be: [connectedAccount, dispatch, withdrawAmount]",{"range":"2333","text":"2334"},"Update the dependencies array to be: [balance, userInfo, listTokenDetails, setDefaultToken]",{"range":"2335","text":"2336"},"Update the dependencies array to be: [connectedAccount, balance, depositAmount, currentToken, currentBalance]",{"range":"2337","text":"2338"},"Update the dependencies array to be: [connectedAccount, library, connector, dispatch]",{"range":"2339","text":"2340"},"Update the dependencies array to be: [data, fetchPoolLoading, error, poolDetailDone]",{"range":"2341","text":"2342"},"Update the dependencies array to be: [error, poolJoinLoading]",{"range":"2343","text":"2344"},"Update the dependencies array to be: [signature, poolJoinLoading, account, poolId, setSignature, dispatch]",{"range":"2345","text":"2346"},"Update the dependencies array to be: [pool.start_time]",{"range":"2347","text":"2348"},"Update the dependencies array to be: [emitCurrentDate, startDate]",{"range":"2349","text":"2350"},"Update the dependencies array to be: [purchasableCurrency]",{"range":"2351","text":"2352"},"Update the dependencies array to be: [tokenBalance, maximumBuy, userPurchased, rate]",{"range":"2353","text":"2354"},"Update the dependencies array to be: [endJoinTimeInDate, startBuyTimeInDate, minimumBuy, input, connectedAccountFirstBuy, estimateTokens, poolAmount, currencyName, totalUserTokenSold, tokenDetails?.symbol]",{"range":"2355","text":"2356"},"Update the dependencies array to be: [appChainID, connectedAccount, connector, walletChainID, dispatch]",{"range":"2357","text":"2358"},"Update the dependencies array to be: [tokenDetails, poolAddress, connectedAccount, tokenToApprove, retrieveTokenAllowance, retrieveUserPurchased, retrieveTokenBalance]",{"range":"2359","text":"2360"},"Update the dependencies array to be: [fetchPoolDetails, loadingPoolInfo]",{"range":"2361","text":"2362"},"Update the dependencies array to be: [fetchPoolDetails, fetchUserBalance, setBuyTokenSuccess, tokenDepositSuccess]",{"range":"2363","text":"2364"},"Update the dependencies array to be: [tokenDepositTransaction, connectedAccountFirstBuy, parsedFirstBuy, poolAddress, connectedAccount]",{"range":"2365","text":"2366"},"Update the dependencies array to be: [connectedAccount, poolAddress, ableToFetchFromBlockchain, claimTokenSuccess, buyTokenSuccess, retrieveClaimableTokens]",{"range":"2367","text":"2368"},"Update the dependencies array to be: [error, setClaimTokenLoading]",{"range":"2369","text":"2370"},"Update the dependencies array to be: [signature, poolAddress, amount, claimError, loadingClaim, claimTokenWithSignature]",{"range":"2371","text":"2372"},"Update the dependencies array to be: [error, claimSignError, setSignature, setUserClaimSignature]",{"range":"2373","text":"2374"},"Update the dependencies array to be: [poolAddress, account, dispatch, setSignature, setUserClaimSignature, library]",{"range":"2375","text":"2376"},"Update the dependencies array to be: [poolAddress, signMessage, dispatch, setSignature]",{"range":"2377","text":"2378"},"Update the dependencies array to be: [tokenDetails, ableToFetchFromBlockchain, connector, appChainID]",{"range":"2379","text":"2380"},{"range":"2381","text":"2380"},"Update the dependencies array to be: [account, dispatch, library, owner, spender, token]",{"range":"2382","text":"2383"},"Update the dependencies array to be: [signature, poolAddress, purchasableCurrency, amount, minBuy, maxBuy, depositError, depositWithSignature]",{"range":"2384","text":"2385"},"Update the dependencies array to be: [error, buyError, setSignature, setUserPurchasedSignature]",{"range":"2386","text":"2387"},"Update the dependencies array to be: [isClaimable, library, connectedAccount, networkAvailable, setUserPurchasedSignature, setSignature, dispatch]",{"range":"2388","text":"2389"},"Update the dependencies array to be: [amount, poolAddress, signMessage, dispatch, setSignature]",{"range":"2390","text":"2391"},{"range":"2392","text":"2380"},"Update the dependencies array to be: [connector, appChainID, library.provider]",{"range":"2393","text":"2394"},"Update the dependencies array to be: [connectedAccount, campaignId, authSignature, dispatch]",{"range":"2395","text":"2396"},"Update the dependencies array to be: [data]",{"range":"2397","text":"2398"},"Update the dependencies array to be: [connectedAccount, data]",{"range":"2399","text":"2400"},{"range":"2401","text":"2396"},"Update the dependencies array to be: [currentWallet]",{"range":"2402","text":"2403"},[3411,3413],"[dispatch, history]",[4432,4468],"[currentConnector, connectedAccount, active, error, dispatch, appChainID, handleConnectorDisconnect]",[4549,4561],"[appChainID, currentConnector]",[4778,4797],"[appNetworkLoading, setOpenConnectDialog]",[5296,5356],"[currentConnector, appChainID, walletName, binanceAvailable, tryActivate]",[5498,5563],"[walletChainID, appNetworkLoading, appChainID, openConnectDialog, switchNetwork]",[5850,5899],"[connectWalletLoading, connectedAccount, chainId, dispatch]",[8393,8394],"",[8393,8393],"\\",[9095,9130],"[connectWalletLoading, walletName, activate, setOpenConnectDialog, dispatch]",[9754,9818],"[walletNameSuccess, connectedAccount, appChainID, walletChainID, dispatch]",[10285,10287],"[deactivate, dispatch]",[2170,2192],"[dispatch, error, errorRegister]",[2970,2992],"[loginInvestor, error, props.history, dispatch]",[2323,2330],"[dispatch, error]",[2984,3029],"[connectedAccount, dispatch, handleConnectorDisconnect, history]",[2163,2178],"[loginInvestor, props.history]",[2760,2767],"[baseRequest, dispatch, loginInvestor, props.history, token]",[817,819],"[countDownUnix]",[7663,7757],"[]",[8641,8698],"[verifiedEmail, pickedWinner, poolDetails, userBuyLimit, currencyName]",[9248,9266],"[activeNav, endBuyTimeInDate]",[9421,9438],"[currentUserTier, dispatch]",[9873,9898],"[appChainID, dispatch, poolDetails]",[1491,1493],"[dispatch, token]",[3604,3611],"[poolFetched, pools, setStatusPools]",[2875,2913],"[isAuth, wrongChain, connectedAccount, dispatch]",[3593,3605],"[appChainID, dispatch]",[1787,1849],"[userInfoLoading, userInfo, tokenDetailsLoading, tokenDetails, tiersLoading]",[3128,3147],"[address, appChainID, calculateUserTier, connector, loading, networkAvailable, userInfo]",[1883,1910],"[address, appChainID, connector, networkAvailable]",[811,816],"[config, uri]",[894,914],"[uri, suspendRender, fetchDataFromUri]",[1803,1858],"[data, loading, error, poolsDone]",[2113,2168],[2364,2366],"[dispatch]",[2759,2793],"[depositTransaction, depositError, transactionHashes, dispatch]",[3185,3219],"[approveTransaction, approveError, transactionHashes, dispatch]",[3616,3652],"[withdrawTransaction, withdrawError, transactionHashes, dispatch]",[2997,3035],[1838,1844],"[autoFetch, pool]",[3747,3772],"[walletsInfo, walletName, currentConnector, setCurrentConnectedWallet, setWalletName, handleProviderChosen]",[590,591],[590,590],[615,616],[615,615],[2337,2348],"[connectedAccount, dispatch, inputEmail, setEmail, setEmailVeryfied, setOpenModalVerifyEmail, setSignature, signature]",[1899,1927],"[userInfo, listTokenDetails, setDefaultToken]",[2878,2936],"[connectedAccount, userInfo, withdrawAmount, currentToken, currentStaked]",[3058,3074],"[connectedAccount, dispatch, withdrawAmount]",[2267,2304],"[balance, userInfo, listTokenDetails, setDefaultToken]",[2862,2918],"[connectedAccount, balance, depositAmount, currentToken, currentBalance]",[3879,3917],"[connectedAccount, library, connector, dispatch]",[4748,4817],"[data, fetchPoolLoading, error, poolDetailDone]",[1241,1248],"[error, poolJoinLoading]",[2134,2162],"[signature, poolJoinLoading, account, poolId, setSignature, dispatch]",[2635,2637],"[pool.start_time]",[2124,2135],"[emitCurrentDate, startDate]",[5936,5969],"[purchasableCurrency]",[7480,7550],"[tokenBalance, maximumBuy, userPurchased, rate]",[8942,9147],"[endJoinTimeInDate, startBuyTimeInDate, minimumBuy, input, connectedAccountFirstBuy, estimateTokens, poolAmount, currencyName, totalUserTokenSold, tokenDetails?.symbol]",[10976,11032],"[appChainID, connectedAccount, connector, walletChainID, dispatch]",[11674,11735],"[tokenDetails, poolAddress, connectedAccount, tokenToApprove, retrieveTokenAllowance, retrieveUserPurchased, retrieveTokenBalance]",[12324,12341],"[fetchPoolDetails, loadingPoolInfo]",[13171,13192],"[fetchPoolDetails, fetchUserBalance, setBuyTokenSuccess, tokenDepositSuccess]",[13700,13751],"[tokenDepositTransaction, connectedAccountFirstBuy, parsedFirstBuy, poolAddress, connectedAccount]",[2698,2792],"[connectedAccount, poolAddress, ableToFetchFromBlockchain, claimTokenSuccess, buyTokenSuccess, retrieveClaimableTokens]",[2911,2918],"[error, setClaimTokenLoading]",[1449,1507],"[signature, poolAddress, amount, claimError, loadingClaim, claimTokenWithSignature]",[1766,1789],"[error, claimSignError, setSignature, setUserClaimSignature]",[3282,3332],"[poolAddress, account, dispatch, setSignature, setUserClaimSignature, library]",[3770,3801],"[poolAddress, signMessage, dispatch, setSignature]",[2192,2255],"[tokenDetails, ableToFetchFromBlockchain, connector, appChainID]",[1586,1649],[2168,2191],"[account, dispatch, library, owner, spender, token]",[2084,2167],"[signature, poolAddress, purchasableCurrency, amount, minBuy, maxBuy, depositError, depositWithSignature]",[2423,2440],"[error, buyError, setSignature, setUserPurchasedSignature]",[5439,5481],"[isClaimable, library, connectedAccount, networkAvailable, setUserPurchasedSignature, setSignature, dispatch]",[6046,6094],"[amount, poolAddress, signMessage, dispatch, setSignature]",[1639,1702],[1813,1856],"[connector, appChainID, library.provider]",[1958,2003],"[connectedAccount, campaignId, authSignature, dispatch]",[659,710],"[data]",[771,789],"[connectedAccount, data]",[1889,1934],[11700,11702],"[currentWallet]"]