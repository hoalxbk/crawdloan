{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\nimport useUserClaimSignature from '../hooks/useUserClaimSignature';\nimport useWalletSignature from '../../../hooks/useWalletSignature';\nimport PreSale_ABI from '../../../abi/PreSalePool.json';\nimport { getContract } from '../../../utils/contract';\nimport { alertSuccess, alertFailure } from '../../../store/actions/alert';\nimport BigNumber from 'bignumber.js';\n\nconst useTokenClaim = (poolAddress, poolId) => {\n  _s();\n\n  const {\n    library,\n    account\n  } = useWeb3React();\n  const dispatch = useDispatch();\n  const [claimTokenSuccess, setClaimTokenSuccess] = useState(false);\n  const [claimTransactionHash, setClaimTransactionHash] = useState(\"\");\n  const [claimTokenLoading, setClaimTokenLoading] = useState(false);\n  const [claimError, setClaimError] = useState(\"\");\n  const {\n    error,\n    signMessage,\n    signature: authSignature,\n    setSignature\n  } = useWalletSignature();\n  const {\n    signature,\n    amount,\n    error: claimSignError,\n    setSignature: setUserClaimSignature,\n    loadingClaim\n  } = useUserClaimSignature(account, poolId, authSignature);\n  useEffect(() => {\n    poolAddress && signature && amount && !claimError && !loadingClaim && claimTokenWithSignature(signature, amount);\n  }, [signature, poolAddress, amount, claimError, loadingClaim]);\n  useEffect(() => {\n    if (error || claimSignError) {\n      const errorMessage = error || claimSignError;\n      setClaimError(errorMessage);\n      setClaimTokenLoading(false);\n      setSignature(\"\");\n      setUserClaimSignature(\"\");\n    }\n  }, [error, claimSignError]);\n  const claimTokenWithSignature = useCallback(async (signature, amount) => {\n    console.log('poolAddress, signature, amount, account:', poolAddress, signature, amount, account);\n\n    if (poolAddress && signature && amount && account) {\n      if (amount && new BigNumber(amount).lte(0)) {\n        const msg = 'You can not claim token at current time!';\n        dispatch(alertFailure(msg));\n        setClaimTokenLoading(false);\n        setClaimError(msg);\n        setSignature(\"\");\n        setUserClaimSignature(\"\");\n        return;\n      }\n\n      try {\n        const contract = getContract(poolAddress, PreSale_ABI, library, account);\n\n        if (contract) {\n          // let overrides = fixGasLimitWithProvider(library, 'claim');\n          // const transaction = await contract.claimTokens(account, amount, signature, overrides);\n          const transaction = await contract.claimTokens(account, amount, signature);\n          setSignature(\"\");\n          setUserClaimSignature(\"\");\n          setClaimTransactionHash(transaction.hash);\n          await transaction.wait(1);\n          setClaimTokenSuccess(true);\n          setClaimTokenLoading(false);\n          dispatch(alertSuccess(\"Token Claim Successful\"));\n        }\n      } catch (err) {\n        dispatch(alertFailure(err.message));\n        setClaimTokenLoading(false);\n        setClaimError(err.message);\n        setSignature(\"\");\n        setUserClaimSignature(\"\");\n      }\n    }\n  }, [poolAddress, library, account, amount, signature]);\n  const claimToken = useCallback(async () => {\n    if (poolAddress) {\n      try {\n        setClaimTransactionHash(\"\");\n        setClaimError(\"\");\n        setClaimTokenLoading(true);\n        setClaimTokenSuccess(false);\n        await signMessage();\n      } catch (err) {\n        dispatch(alertFailure(err.message));\n        setClaimTokenLoading(false);\n        setClaimError(err.message);\n        setSignature(\"\");\n      }\n    }\n  }, [poolAddress, library, account]);\n  return {\n    claimToken,\n    transactionHash: claimTransactionHash,\n    loading: claimTokenLoading,\n    setClaimTokenLoading,\n    setClaimTransactionHash,\n    claimTokenSuccess,\n    error: claimError\n  };\n};\n\n_s(useTokenClaim, \"PyqKwPQ2QTHr+D6xZhjec/6ApkE=\", false, function () {\n  return [useWeb3React, useDispatch, useWalletSignature, useUserClaimSignature];\n});\n\nexport default useTokenClaim;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useTokenClaim.ts"],"names":["useState","useEffect","useCallback","useDispatch","useWeb3React","useUserClaimSignature","useWalletSignature","PreSale_ABI","getContract","alertSuccess","alertFailure","BigNumber","useTokenClaim","poolAddress","poolId","library","account","dispatch","claimTokenSuccess","setClaimTokenSuccess","claimTransactionHash","setClaimTransactionHash","claimTokenLoading","setClaimTokenLoading","claimError","setClaimError","error","signMessage","signature","authSignature","setSignature","amount","claimSignError","setUserClaimSignature","loadingClaim","claimTokenWithSignature","errorMessage","console","log","lte","msg","contract","transaction","claimTokens","hash","wait","err","message","claimToken","transactionHash","loading"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\n\nimport useUserClaimSignature from '../hooks/useUserClaimSignature';\nimport useWalletSignature from '../../../hooks/useWalletSignature';\nimport PreSale_ABI from '../../../abi/PreSalePool.json';\nimport { getContract } from '../../../utils/contract';\nimport { alertSuccess, alertFailure } from '../../../store/actions/alert';\nimport {fixGasLimitWithProvider} from \"../../../utils\";\nimport BigNumber from 'bignumber.js';\n\nconst useTokenClaim = (poolAddress: string | undefined, poolId: number | undefined) => {\n  const { library, account } = useWeb3React();\n  const dispatch = useDispatch();\n\n  const [claimTokenSuccess, setClaimTokenSuccess] = useState<boolean>(false);\n  const [claimTransactionHash, setClaimTransactionHash] = useState(\"\");\n  const [claimTokenLoading, setClaimTokenLoading] = useState<boolean>(false);\n  const [claimError, setClaimError] = useState<string>(\"\");\n\n  const { error, signMessage, signature: authSignature, setSignature } = useWalletSignature();\n  const { signature, amount, error: claimSignError, setSignature: setUserClaimSignature, loadingClaim } = useUserClaimSignature(account, poolId, authSignature);\n\n  useEffect(() => {\n    poolAddress &&\n    signature &&\n    amount &&\n    !claimError &&\n    !loadingClaim &&\n    claimTokenWithSignature(signature, amount);\n  }, [signature, poolAddress, amount, claimError, loadingClaim]);\n\n  useEffect(() => {\n    if (error || claimSignError) {\n      const errorMessage = error || claimSignError;\n      setClaimError(errorMessage as string);\n      setClaimTokenLoading(false);\n      setSignature(\"\");\n      setUserClaimSignature(\"\");\n    }\n  }, [error, claimSignError]);\n\n  const claimTokenWithSignature = useCallback(\n    async (signature: string, amount: string) => {\n\n    console.log('poolAddress, signature, amount, account:', poolAddress, signature, amount, account);\n    if (poolAddress && signature && amount && account) {\n\n      if (amount && (new BigNumber(amount)).lte(0)) {\n        const msg = 'You can not claim token at current time!';\n        dispatch(alertFailure(msg));\n        setClaimTokenLoading(false);\n        setClaimError(msg);\n        setSignature(\"\");\n        setUserClaimSignature(\"\");\n        return;\n      }\n\n      try {\n         const contract = getContract(poolAddress, PreSale_ABI, library, account as string);\n         if (contract) {\n           // let overrides = fixGasLimitWithProvider(library, 'claim');\n           // const transaction = await contract.claimTokens(account, amount, signature, overrides);\n           const transaction = await contract.claimTokens(account, amount, signature);\n\n           setSignature(\"\");\n           setUserClaimSignature(\"\");\n           setClaimTransactionHash(transaction.hash);\n\n           await transaction.wait(1);\n\n           setClaimTokenSuccess(true);\n           setClaimTokenLoading(false);\n           dispatch(alertSuccess(\"Token Claim Successful\"));\n         }\n      } catch (err) {\n        dispatch(alertFailure(err.message));\n        setClaimTokenLoading(false);\n        setClaimError(err.message);\n        setSignature(\"\");\n        setUserClaimSignature(\"\");\n      }\n    }\n  }, [poolAddress, library, account, amount, signature]);\n\n  const claimToken = useCallback(async () => {\n    if (poolAddress) {\n      try {\n        setClaimTransactionHash(\"\");\n        setClaimError(\"\");\n        setClaimTokenLoading(true);\n        setClaimTokenSuccess(false);\n\n        await signMessage();\n      } catch (err) {\n        dispatch(alertFailure(err.message));\n        setClaimTokenLoading(false);\n        setClaimError(err.message);\n        setSignature(\"\");\n      }\n    }\n  }, [poolAddress, library, account]);\n\n  return {\n    claimToken,\n    transactionHash: claimTransactionHash,\n    loading: claimTokenLoading,\n    setClaimTokenLoading,\n    setClaimTransactionHash,\n    claimTokenSuccess,\n    error: claimError\n  }\n}\n\nexport default useTokenClaim;\n"]},"metadata":{},"sourceType":"module"}