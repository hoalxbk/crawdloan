{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport axios from '../../../services/axios';\nimport { alertFailure } from '../../../store/actions/alert';\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst useUserClaimSignature = (connectedAccount, campaignId, authSignature) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [signature, setSignature] = useState(undefined);\n  const [amount, setAmount] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loadingClaim, setLoadingClaim] = useState(false);\n  useEffect(() => {\n    const getUserSignature = async () => {\n      setError(\"\");\n      setSignature(\"\");\n      setLoadingClaim(true);\n\n      try {\n        const config = {\n          headers: {\n            msgSignature: MESSAGE_INVESTOR_SIGNATURE\n          }\n        };\n        const response = await axios.post('/user/claim', {\n          campaign_id: campaignId,\n          wallet_address: connectedAccount,\n          signature: authSignature\n        }, config);\n\n        if (response.data && response.status && response.status === 200) {\n          const {\n            data,\n            message,\n            status\n          } = response.data;\n\n          if (data && status === 200) {\n            setSignature(data.signature);\n            setAmount(data.amount);\n          }\n\n          if (message && status !== 200) {\n            dispatch(alertFailure(message));\n            setError(message);\n            setSignature(\"\");\n          }\n        }\n\n        setLoadingClaim(false);\n      } catch (err) {\n        setError(err.message);\n        setSignature(\"\");\n        setLoadingClaim(false);\n      }\n    };\n\n    connectedAccount && campaignId && authSignature && getUserSignature();\n  }, [connectedAccount, campaignId, authSignature]);\n  return {\n    signature,\n    setSignature,\n    amount,\n    error,\n    loadingClaim\n  };\n};\n\n_s(useUserClaimSignature, \"pqbOhmnXVtv84GW3bAksJkbS77M=\", false, function () {\n  return [useDispatch];\n});\n\nexport default useUserClaimSignature;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useUserClaimSignature.ts"],"names":["useDispatch","useState","useEffect","axios","alertFailure","MESSAGE_INVESTOR_SIGNATURE","process","env","REACT_APP_MESSAGE_INVESTOR_SIGNATURE","useUserClaimSignature","connectedAccount","campaignId","authSignature","dispatch","signature","setSignature","undefined","amount","setAmount","error","setError","loadingClaim","setLoadingClaim","getUserSignature","config","headers","msgSignature","response","post","campaign_id","wallet_address","data","status","message","err"],"mappings":";;AACA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AAEA,MAAMC,0BAA0B,GAAGC,OAAO,CAACC,GAAR,CAAYC,oCAAZ,IAAoD,EAAvF;;AAEA,MAAMC,qBAAqB,GAAG,CAACC,gBAAD,EAA8CC,UAA9C,EAA8EC,aAA9E,KAAoH;AAAA;;AAChJ,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAqBe,SAArB,CAA1C;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAoB,EAApB,CAApC;AACA,QAAM,CAACkB,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAqB,EAArB,CAAlC;AACA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAsB,KAAtB,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMqB,gBAAgB,GAAG,YAAY;AACnCH,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAL,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACAO,MAAAA,eAAe,CAAC,IAAD,CAAf;;AAEA,UAAI;AACF,cAAME,MAAM,GAAG;AACbC,UAAAA,OAAO,EAAE;AACPC,YAAAA,YAAY,EAAErB;AADP;AADI,SAAf;AAKA,cAAMsB,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,IAAN,CAAW,aAAX,EAA0B;AAC/CC,UAAAA,WAAW,EAAElB,UADkC;AAE/CmB,UAAAA,cAAc,EAAEpB,gBAF+B;AAG/CI,UAAAA,SAAS,EAAEF;AAHoC,SAA1B,EAIpBY,MAJoB,CAAvB;;AAMA,YAAIG,QAAQ,CAACI,IAAT,IAAiBJ,QAAQ,CAACK,MAA1B,IAAoCL,QAAQ,CAACK,MAAT,KAAoB,GAA5D,EAAiE;AAC/D,gBAAM;AAAED,YAAAA,IAAF;AAAQE,YAAAA,OAAR;AAAiBD,YAAAA;AAAjB,cAA4BL,QAAQ,CAACI,IAA3C;;AACA,cAAIA,IAAI,IAAIC,MAAM,KAAK,GAAvB,EAA4B;AAC1BjB,YAAAA,YAAY,CAACgB,IAAI,CAACjB,SAAN,CAAZ;AACAI,YAAAA,SAAS,CAACa,IAAI,CAACd,MAAN,CAAT;AACD;;AAED,cAAIgB,OAAO,IAAID,MAAM,KAAK,GAA1B,EAA+B;AAC7BnB,YAAAA,QAAQ,CAACT,YAAY,CAAC6B,OAAD,CAAb,CAAR;AACAb,YAAAA,QAAQ,CAACa,OAAD,CAAR;AACAlB,YAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;AACF;;AACDO,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD,OA1BD,CA0BE,OAAOY,GAAP,EAAY;AACZd,QAAAA,QAAQ,CAACc,GAAG,CAACD,OAAL,CAAR;AACAlB,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACAO,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,KApCD;;AAqCFZ,IAAAA,gBAAgB,IAAIC,UAApB,IAAkCC,aAAlC,IAAmDW,gBAAgB,EAAnE;AACD,GAvCQ,EAuCN,CAACb,gBAAD,EAAmBC,UAAnB,EAA+BC,aAA/B,CAvCM,CAAT;AAyCA,SAAO;AACLE,IAAAA,SADK;AAELC,IAAAA,YAFK;AAGLE,IAAAA,MAHK;AAILE,IAAAA,KAJK;AAKLE,IAAAA;AALK,GAAP;AAOD,CAvDD;;GAAMZ,qB;UACaT,W;;;AAwDnB,eAAeS,qBAAf","sourcesContent":["\nimport { useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport axios from '../../../services/axios';\nimport { alertFailure } from '../../../store/actions/alert';\n\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst useUserClaimSignature = (connectedAccount: string | undefined | null, campaignId: number | undefined, authSignature: string | undefined) => {\n  const dispatch = useDispatch();\n  const [signature, setSignature] = useState<string | undefined>(undefined);\n  const [amount, setAmount] = useState<string| undefined>(\"\");\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [loadingClaim, setLoadingClaim] = useState<boolean | undefined>(false);\n\n  useEffect(() => {\n      const getUserSignature = async () => {\n        setError(\"\");\n        setSignature(\"\");\n        setLoadingClaim(true);\n\n        try {\n          const config = {\n            headers: {\n              msgSignature: MESSAGE_INVESTOR_SIGNATURE\n            }\n          }\n          const response = await axios.post('/user/claim', {\n            campaign_id: campaignId,\n            wallet_address: connectedAccount,\n            signature: authSignature\n          }, config);\n\n          if (response.data && response.status && response.status === 200) {\n            const { data, message, status } = response.data;\n            if (data && status === 200) {\n              setSignature(data.signature);\n              setAmount(data.amount);\n            }\n\n            if (message && status !== 200) {\n              dispatch(alertFailure(message));\n              setError(message);\n              setSignature(\"\");\n            }\n          }\n          setLoadingClaim(false);\n        } catch (err) {\n          setError(err.message);\n          setSignature(\"\");\n          setLoadingClaim(false);\n        }\n      }\n    connectedAccount && campaignId && authSignature && getUserSignature();\n  }, [connectedAccount, campaignId, authSignature]);\n\n  return {\n    signature,\n    setSignature,\n    amount,\n    error,\n    loadingClaim,\n  }\n}\n\nexport default useUserClaimSignature;\n\n"]},"metadata":{},"sourceType":"module"}