{"ast":null,"code":"var _jsxFileName = \"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ComingSoon/CountDownCounter.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport useStyles from './style';\nimport moment from \"moment\";\nimport { unixTimeNow } from \"../../utils/convertDate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst daySeconds = 86400;\nconst timerProps = {\n  isPlaying: true,\n  size: 150,\n  strokeWidth: 8,\n  // trailColor: '#FFCC00',\n  trailColor: 'white'\n};\n\nconst getTimeSeconds = time => minuteSeconds - time | 0;\n\nconst getTimeMinutes = time => time % hourSeconds / minuteSeconds | 0;\n\nconst getTimeHours = time => time % daySeconds / hourSeconds | 0;\n\nconst getTimeDays = time => time / daySeconds | 0;\n\nconst CountDownCounter = props => {\n  _s();\n\n  const styles = useStyles();\n\n  const renderTime = (dimension, time) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.styles.timeWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.styles.timeText,\n        children: time < 10 ? '0' + time : time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.styles.timeDimension,\n        children: dimension\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  };\n\n  const startTime = unixTimeNow(); // use UNIX timestamp in seconds\n\n  const countdown = moment(props.countdown || new Date());\n  let endTime = countdown.unix(); // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - startTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds; // @ts-ignore\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: this.styles.timers,\n    children: [/*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      // colors={[[\"#7E2E84\"]]}\n      // colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\n      colors: '#FFCC00',\n      duration: daysDuration,\n      initialRemainingTime: remainingTime,\n      children: ({\n        elapsedTime\n      }) => {\n        return renderTime(\"days\", getTimeDays(daysDuration - (elapsedTime || 0)));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: '#FFCC00',\n      duration: daySeconds,\n      initialRemainingTime: remainingTime % daySeconds,\n      onComplete: totalElapsedTime => {\n        return [remainingTime - totalElapsedTime > hourSeconds, 0];\n      },\n      children: ({\n        elapsedTime\n      }) => renderTime(\"hours\", getTimeHours(daySeconds - (elapsedTime || 0)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: '#FFCC00',\n      duration: hourSeconds,\n      initialRemainingTime: remainingTime % hourSeconds,\n      onComplete: totalElapsedTime => [remainingTime - totalElapsedTime > minuteSeconds, 0],\n      children: ({\n        elapsedTime\n      }) => renderTime(\"minutes\", getTimeMinutes(hourSeconds - (elapsedTime || 0)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, { ...timerProps,\n      colors: '#FFCC00',\n      duration: minuteSeconds,\n      initialRemainingTime: remainingTime % minuteSeconds,\n      onComplete: totalElapsedTime => [remainingTime - totalElapsedTime > 0, 0],\n      children: ({\n        elapsedTime\n      }) => renderTime(\"seconds\", getTimeSeconds(elapsedTime))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CountDownCounter, \"3bjLmUB54uhXRX+frDMowQzU8P8=\", false, function () {\n  return [useStyles];\n});\n\n_c = CountDownCounter;\nexport default CountDownCounter;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountDownCounter\");","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ComingSoon/CountDownCounter.tsx"],"names":["React","CountdownCircleTimer","useStyles","moment","unixTimeNow","minuteSeconds","hourSeconds","daySeconds","timerProps","isPlaying","size","strokeWidth","trailColor","getTimeSeconds","time","getTimeMinutes","getTimeHours","getTimeDays","CountDownCounter","props","styles","renderTime","dimension","timeWrapper","timeText","timeDimension","startTime","countdown","Date","endTime","unix","remainingTime","days","Math","ceil","daysDuration","timers","elapsedTime","totalElapsedTime"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport useStyles from './style';\nimport moment from \"moment\";\nimport {unixTimeNow} from \"../../utils/convertDate\";\n\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst daySeconds = 86400;\n\nconst timerProps = {\n  isPlaying: true,\n  size: 150,\n  strokeWidth: 8,\n  // trailColor: '#FFCC00',\n  trailColor: 'white',\n};\n\nconst getTimeSeconds = (time: any) => (minuteSeconds - time) | 0;\nconst getTimeMinutes = (time: any) => ((time % hourSeconds) / minuteSeconds) | 0;\nconst getTimeHours = (time: any) => ((time % daySeconds) / hourSeconds) | 0;\nconst getTimeDays = (time: any) => (time / daySeconds) | 0;\n\nconst CountDownCounter = (props: any) => {\n  const styles = useStyles();\n  const renderTime = (dimension: any, time: any) => {\n    return (\n      <div className={this.styles.timeWrapper}>\n        <div className={this.styles.timeText}>{time < 10 ? '0' + time : time}</div>\n        <div className={this.styles.timeDimension}>{dimension}</div>\n      </div>\n    );\n  };\n\n  const startTime = unixTimeNow(); // use UNIX timestamp in seconds\n  const countdown = moment(props.countdown || new Date());\n  let endTime = countdown.unix(); // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - startTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n\n  // @ts-ignore\n  return (\n    <div className={this.styles.timers}>\n      <CountdownCircleTimer\n        {...timerProps}\n        // colors={[[\"#7E2E84\"]]}\n        // colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\n        colors={'#FFCC00'}\n        duration={daysDuration}\n        initialRemainingTime={remainingTime}\n      >\n        {({ elapsedTime }) => {\n          return renderTime(\"days\", getTimeDays(daysDuration - (elapsedTime || 0)))\n        }}\n      </CountdownCircleTimer>\n\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={'#FFCC00'}\n        duration={daySeconds}\n        initialRemainingTime={remainingTime % daySeconds}\n        onComplete={(totalElapsedTime) => {\n          return [\n            remainingTime - totalElapsedTime > hourSeconds,\n            0\n          ]\n        }}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"hours\", getTimeHours(daySeconds - (elapsedTime || 0)))\n        }\n      </CountdownCircleTimer>\n\n\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={'#FFCC00'}\n        duration={hourSeconds}\n        initialRemainingTime={remainingTime % hourSeconds}\n        onComplete={(totalElapsedTime) => [\n          remainingTime - totalElapsedTime > minuteSeconds,\n          0\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"minutes\", getTimeMinutes(hourSeconds - (elapsedTime || 0)))\n        }\n      </CountdownCircleTimer>\n\n      <CountdownCircleTimer\n        {...timerProps}\n        colors={'#FFCC00'}\n        duration={minuteSeconds}\n        initialRemainingTime={remainingTime % minuteSeconds}\n        onComplete={(totalElapsedTime) => [\n          remainingTime - totalElapsedTime > 0,\n          0\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"seconds\", getTimeSeconds(elapsedTime))\n        }\n      </CountdownCircleTimer>\n    </div>\n\n  );\n};\n\nexport default CountDownCounter;\n"]},"metadata":{},"sourceType":"module"}