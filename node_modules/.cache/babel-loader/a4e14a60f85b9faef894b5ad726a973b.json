{"ast":null,"code":"import BigNumber from 'bignumber.js';\nexport let PoolStatus;\n\n(function (PoolStatus) {\n  PoolStatus[\"Upcoming\"] = \"Upcoming\";\n  PoolStatus[\"Joining\"] = \"Whitelisting\";\n  PoolStatus[\"Closed\"] = \"Ended\";\n  PoolStatus[\"Filled\"] = \"Filled\";\n  PoolStatus[\"Progress\"] = \"In-progress\";\n  PoolStatus[\"Claimable\"] = \"Claimable\";\n  PoolStatus[\"TBA\"] = \"TBA\";\n})(PoolStatus || (PoolStatus = {}));\n\nexport const getPoolStatus = (startJoinTime, endJoinTime, startBuyTime, endBuyTime, releaseTime, soldProgress, isClaimable, poolType) => {\n  const today = new Date().getTime();\n  const requiredReleaseTime = isClaimable ? !releaseTime : false;\n\n  if ((!startJoinTime || !endJoinTime) && poolType === 'whitelist') {\n    return PoolStatus.TBA;\n  }\n\n  if ((!startBuyTime || !endBuyTime) && poolType === 'fcfs') {\n    return PoolStatus.TBA;\n  }\n\n  if (startJoinTime && today < startJoinTime.getTime()) {\n    return PoolStatus.Upcoming;\n  }\n\n  if (startJoinTime && endJoinTime && today > startJoinTime.getTime() && today < endJoinTime.getTime()) {\n    return PoolStatus.Joining;\n  }\n\n  if (endJoinTime && startBuyTime && today > endJoinTime.getTime() && today < startBuyTime.getTime()) {\n    return PoolStatus.Upcoming;\n  }\n\n  if (startBuyTime && endBuyTime && today > startBuyTime.getTime() && today < endBuyTime.getTime()) {\n    return new BigNumber(soldProgress || 0).multipliedBy(100).gte(99) ? PoolStatus.Filled : PoolStatus.Progress;\n  }\n\n  if (releaseTime && today > releaseTime.getTime() && isClaimable) {\n    return PoolStatus.Claimable;\n  }\n\n  if (endBuyTime && today > (endBuyTime === null || endBuyTime === void 0 ? void 0 : endBuyTime.getTime())) {\n    return PoolStatus.Closed;\n  }\n\n  return PoolStatus.Upcoming;\n};","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/getPoolStatus.ts"],"names":["BigNumber","PoolStatus","getPoolStatus","startJoinTime","endJoinTime","startBuyTime","endBuyTime","releaseTime","soldProgress","isClaimable","poolType","today","Date","getTime","requiredReleaseTime","TBA","Upcoming","Joining","multipliedBy","gte","Filled","Progress","Claimable","Closed"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAqBZ,OAAO,MAAMC,aAAa,GAAG,CAC3BC,aAD2B,EAE3BC,WAF2B,EAG3BC,YAH2B,EAI3BC,UAJ2B,EAK3BC,WAL2B,EAO3BC,YAP2B,EAQ3BC,WAR2B,EAS3BC,QAT2B,KAUZ;AACf,QAAMC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAd;AAEA,QAAMC,mBAAmB,GAAGL,WAAW,GAAG,CAACF,WAAJ,GAAiB,KAAxD;;AAEA,MAAI,CAAC,CAACJ,aAAD,IAAkB,CAACC,WAApB,KAAoCM,QAAQ,KAAK,WAArD,EAAkE;AAChE,WAAOT,UAAU,CAACc,GAAlB;AACD;;AAED,MAAI,CAAC,CAACV,YAAD,IAAiB,CAACC,UAAnB,KAAkCI,QAAQ,KAAK,MAAnD,EAA2D;AACzD,WAAOT,UAAU,CAACc,GAAlB;AACD;;AAED,MAAIZ,aAAa,IAAIQ,KAAK,GAAGR,aAAa,CAACU,OAAd,EAA7B,EAAsD;AACpD,WAAOZ,UAAU,CAACe,QAAlB;AACD;;AAED,MAAIb,aAAa,IAAIC,WAAjB,IAAgCO,KAAK,GAAGR,aAAa,CAACU,OAAd,EAAxC,IAAmEF,KAAK,GAAGP,WAAW,CAACS,OAAZ,EAA/E,EAAsG;AACpG,WAAOZ,UAAU,CAACgB,OAAlB;AACD;;AAED,MAAIb,WAAW,IAAIC,YAAf,IAA+BM,KAAK,GAAGP,WAAW,CAACS,OAAZ,EAAvC,IAAgEF,KAAK,GAAGN,YAAY,CAACQ,OAAb,EAA5E,EAAoG;AAClG,WAAOZ,UAAU,CAACe,QAAlB;AACD;;AAED,MACEX,YAAY,IACTC,UADH,IAEGK,KAAK,GAAGN,YAAY,CAACQ,OAAb,EAFX,IAGGF,KAAK,GAAGL,UAAU,CAACO,OAAX,EAJb,EAKE;AACA,WAAO,IAAIb,SAAJ,CAAcQ,YAAY,IAAI,CAA9B,EAAiCU,YAAjC,CAA8C,GAA9C,EAAmDC,GAAnD,CAAuD,EAAvD,IAA8DlB,UAAU,CAACmB,MAAzE,GAAiFnB,UAAU,CAACoB,QAAnG;AACD;;AAED,MAAId,WAAW,IAAII,KAAK,GAAGJ,WAAW,CAACM,OAAZ,EAAvB,IAAgDJ,WAApD,EAAiE;AAC/D,WAAOR,UAAU,CAACqB,SAAlB;AACD;;AAED,MAAIhB,UAAU,IAAIK,KAAK,IAAGL,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEO,OAAZ,EAAH,CAAvB,EAAiD;AAC/C,WAAOZ,UAAU,CAACsB,MAAlB;AACD;;AAED,SAAOtB,UAAU,CAACe,QAAlB;AACD,CArDM","sourcesContent":["import BigNumber from 'bignumber.js';\n\nexport enum PoolStatus {\n  Upcoming = \"Upcoming\",\n  Joining = \"Whitelisting\",\n  Closed = \"Ended\",\n  Filled = \"Filled\",\n  Progress = \"In-progress\",\n  Claimable = \"Claimable\",\n  TBA = \"TBA\"\n}\n\nexport type poolStatus = Extract<\n  PoolStatus,\n  PoolStatus.Progress |\n  PoolStatus.Upcoming |\n  PoolStatus.Joining |\n  PoolStatus.Filled |\n  PoolStatus.Closed |\n  PoolStatus.Claimable |\n  PoolStatus.TBA\n>\n\nexport const getPoolStatus = (\n  startJoinTime: Date | undefined,\n  endJoinTime: Date | undefined,\n  startBuyTime: Date | undefined,\n  endBuyTime: Date | undefined,\n  releaseTime: Date | undefined,\n\n  soldProgress: string | undefined,\n  isClaimable: boolean | undefined,\n  poolType: string | undefined\n): poolStatus => {\n  const today = new Date().getTime();\n\n  const requiredReleaseTime = isClaimable ? !releaseTime: false;\n\n  if ((!startJoinTime || !endJoinTime) && poolType === 'whitelist') {\n    return PoolStatus.TBA;\n  }\n\n  if ((!startBuyTime || !endBuyTime) && poolType === 'fcfs') {\n    return PoolStatus.TBA;\n  }\n\n  if (startJoinTime && today < startJoinTime.getTime()) {\n    return PoolStatus.Upcoming;\n  }\n\n  if (startJoinTime && endJoinTime && today > startJoinTime.getTime() && today < endJoinTime.getTime()) {\n    return PoolStatus.Joining;\n  }\n\n  if (endJoinTime && startBuyTime && today > endJoinTime.getTime() && today < startBuyTime.getTime()) {\n    return PoolStatus.Upcoming;\n  }\n\n  if (\n    startBuyTime\n    && endBuyTime\n    && today > startBuyTime.getTime()\n    && today < endBuyTime.getTime()\n  ) {\n    return new BigNumber(soldProgress || 0).multipliedBy(100).gte(99) ?  PoolStatus.Filled: PoolStatus.Progress;\n  }\n\n  if (releaseTime && today > releaseTime.getTime() && isClaimable) {\n    return PoolStatus.Claimable;\n  }\n\n  if (endBuyTime && today > endBuyTime?.getTime()) {\n    return PoolStatus.Closed;\n  }\n\n  return PoolStatus.Upcoming;\n}\n"]},"metadata":{},"sourceType":"module"}