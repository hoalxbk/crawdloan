{"ast":null,"code":"import { ethers, Contract } from 'ethers';\n// account is not optional\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked();\n} // account is optional\n\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library;\n} // account is optional\n\nexport function getContract(address, ABI, library, account) {\n  if (!ethers.utils.isAddress(address)) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\n}","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/contract.ts"],"names":["ethers","Contract","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","address","ABI","utils","isAddress","Error"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,QAAjC;AAGA;AACA,OAAO,SAASC,SAAT,CAAmBC,OAAnB,EAA0CC,OAA1C,EAA0E;AAC/E,SAAOD,OAAO,CAACD,SAAR,CAAkBE,OAAlB,EAA2BC,gBAA3B,EAAP;AACD,C,CAED;;AACA,OAAO,SAASC,mBAAT,CAA6BH,OAA7B,EAAoDC,OAApD,EAAoG;AACzG,SAAOA,OAAO,GAAGF,SAAS,CAACC,OAAD,EAAUC,OAAV,CAAZ,GAAiCD,OAA/C;AACD,C,CAED;;AACA,OAAO,SAASI,WAAT,CAAqBC,OAArB,EAAsCC,GAAtC,EAAgDN,OAAhD,EAAuEC,OAAvE,EAAmG;AACxG,MAAI,CAACJ,MAAM,CAACU,KAAP,CAAaC,SAAb,CAAuBH,OAAvB,CAAL,EAAsC;AACpC,UAAMI,KAAK,CAAE,gCAA+BJ,OAAQ,IAAzC,CAAX;AACD;;AAED,SAAO,IAAIP,QAAJ,CAAaO,OAAb,EAAsBC,GAAtB,EAA2BH,mBAAmB,CAACH,OAAD,EAAUC,OAAV,CAA9C,CAAP;AACD","sourcesContent":["import { ethers, Contract } from 'ethers';\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!ethers.utils.isAddress(address)) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n"]},"metadata":{},"sourceType":"module"}