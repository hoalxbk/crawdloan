{"ast":null,"code":"var _jsxFileName = \"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ResetPassword/InvestorResetPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CircularProgress, TextField } from '@material-ui/core';\nimport { Link, useParams, withRouter } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport _ from 'lodash';\nimport { alertFailure, alertSuccess } from '../../store/actions/alert';\nimport { BaseRequest } from '../../request/Request';\nimport { adminRoute, apiRoute, publicRoute } from \"../../utils\";\nimport InvestorLayout from \"../InvestorLayout/InvestorLayout\";\nimport TextTitle from \"../InvestorLayout/TextTitle\";\nimport TextSubTitle from \"../InvestorLayout/TextSubTitle\";\nimport Button from \"../../components/Base/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MESSAGE_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\nconst msgParams = [{\n  type: 'string',\n  // Any valid solidity type\n  name: 'Message',\n  // Any string label you want\n  value: MESSAGE_SIGNATURE // The value to sign\n\n}];\n\nconst InvestorResetPassword = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const baseRequest = new BaseRequest();\n  const {\n    token\n  } = useParams();\n  const {\n    data: loginInvestor\n  } = useSelector(state => state.investor);\n  const {\n    data: loginUser\n  } = useSelector(state => state.user);\n  const {\n    data: ethAddress\n  } = useSelector(state => state.userConnect);\n  const [isAvailableLoading, setIsAvailableLoading] = useState(false);\n  const [isAvailable, setIsAvailable] = useState(false);\n  const [resetPasswordLoading, setResetPasswordLoading] = useState(false);\n  const {\n    register,\n    watch,\n    errors,\n    handleSubmit\n  } = useForm({\n    mode: 'onChange'\n  });\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n\n  const renderErrorRequired = (errors, prop) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  };\n\n  useEffect(() => {\n    const isInvestor = true;\n\n    const dataLoginInvestor = _.cloneDeep(loginInvestor);\n\n    if (isInvestor && !!dataLoginInvestor) {\n      props.history.push(publicRoute('/'));\n    }\n  }, [loginInvestor]);\n  useEffect(() => {\n    const isAvailableToken = async () => {\n      setIsAvailableLoading(true);\n      const response = await baseRequest.get(apiRoute(`/check-token/${token}`));\n      const resObj = await response.json();\n\n      if ((resObj === null || resObj === void 0 ? void 0 : resObj.status) !== 200 || (resObj === null || resObj === void 0 ? void 0 : resObj.data.status) !== 200) {\n        dispatch(alertFailure('Forgot password link has expired'));\n        props.history.push(publicRoute('/login'));\n        return;\n      }\n\n      setIsAvailableLoading(false);\n      setIsAvailable(true);\n    };\n\n    if (!loginInvestor) {\n      isAvailableToken();\n    }\n  }, [token]);\n\n  const handleFormSubmit = async data => {\n    try {\n      setResetPasswordLoading(true);\n      const windowObj = window;\n      const {\n        ethereum\n      } = windowObj;\n      await ethereum.sendAsync({\n        method: 'eth_signTypedData',\n        params: [msgParams, ethAddress],\n        from: ethAddress\n      }, async function (err, result) {\n        if (err || result.error) {\n          const errMsg = err.message || result.error.message;\n          dispatch(alertFailure(errMsg));\n          setResetPasswordLoading(false);\n          return;\n        }\n\n        const response = await baseRequest.post(apiRoute(`/reset-password/${token}`), {\n          password: data.password,\n          signature: result.result,\n          wallet_address: ethAddress\n        });\n        const resObj = await response.json();\n\n        if ((resObj === null || resObj === void 0 ? void 0 : resObj.status) !== 200) {\n          dispatch(alertFailure(resObj.message));\n        } else {\n          dispatch(alertSuccess('Reset password successful!'));\n        }\n\n        setResetPasswordLoading(false);\n        const isInvestor = true;\n        const redirectUrl = isInvestor ? publicRoute('/login') : adminRoute('/login');\n        props.history.push(redirectUrl);\n      });\n    } catch (err) {\n      dispatch(alertFailure(err.message));\n      setResetPasswordLoading(false);\n    }\n  };\n\n  const render = () => {\n    if (isAvailableLoading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 70\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 51\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 14\n      }, this);\n    } else if (!isAvailableLoading && isAvailable) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TextTitle, {\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(TextSubTitle, {\n          children: \"Enter your new password below to reset password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(handleFormSubmit),\n          className: \"login__form\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            name: \"password\",\n            inputRef: register({\n              required: true,\n              minLength: {\n                value: 8,\n                message: \"Password must have at least 8 characters\"\n              }\n            }),\n            inputProps: {\n              maxLength: 255,\n              type: 'password'\n            },\n            label: \"Password *\",\n            color: \"secondary\",\n            className: \"login__form-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"login__form-error-message\",\n            children: errors.password && errors.password.type !== 'required' ? errors.password.message : renderErrorRequired(errors, 'password')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            name: \"passwordConfirmation\",\n            inputRef: register({\n              required: true,\n              validate: value => value === password.current || \"The passwords do not match\"\n            }),\n            inputProps: {\n              maxLength: 255,\n              type: 'password'\n            },\n            label: \"Password Confirmation *\",\n            color: \"secondary\",\n            className: \"login__form-field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"login__form-error-message\",\n            children: errors.passwordConfirmation && errors.passwordConfirmation.type !== 'required' ? errors.passwordConfirmation.message : errors.confirmationPassword ? errors.confirmationPassword.message : renderErrorRequired(errors, 'passwordConfirmation')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            className: \"login__form-desc login__form-forgot-password\",\n            to: publicRoute('/login'),\n            children: \"Sign in ?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            className: \"login__form-desc login__form-forgot-password\",\n            to: publicRoute('/register'),\n            children: \"Sign up ?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            label: 'Submit',\n            buttonType: \"primary\",\n            className: 'login__form-cta',\n            loading: resetPasswordLoading,\n            disabled: resetPasswordLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(InvestorLayout, {\n    children: render()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InvestorResetPassword, \"+wR7sWl3AlKghDJTu/txWtOhPDY=\", false, function () {\n  return [useDispatch, useParams, useSelector, useSelector, useSelector, useForm];\n});\n\n_c = InvestorResetPassword;\nexport default _c2 = withRouter(InvestorResetPassword);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InvestorResetPassword\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ResetPassword/InvestorResetPassword.tsx"],"names":["React","useEffect","useRef","useState","useDispatch","useSelector","CircularProgress","TextField","Link","useParams","withRouter","useForm","_","alertFailure","alertSuccess","BaseRequest","adminRoute","apiRoute","publicRoute","InvestorLayout","TextTitle","TextSubTitle","Button","MESSAGE_SIGNATURE","process","env","REACT_APP_MESSAGE_INVESTOR_SIGNATURE","msgParams","type","name","value","InvestorResetPassword","props","dispatch","baseRequest","token","data","loginInvestor","state","investor","loginUser","user","ethAddress","userConnect","isAvailableLoading","setIsAvailableLoading","isAvailable","setIsAvailable","resetPasswordLoading","setResetPasswordLoading","register","watch","errors","handleSubmit","mode","password","current","renderErrorRequired","prop","isInvestor","dataLoginInvestor","cloneDeep","history","push","isAvailableToken","response","get","resObj","json","status","handleFormSubmit","windowObj","window","ethereum","sendAsync","method","params","from","err","result","error","errMsg","message","post","signature","wallet_address","redirectUrl","render","textAlign","required","minLength","maxLength","validate","passwordConfirmation","confirmationPassword"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {CircularProgress, TextField} from '@material-ui/core';\nimport {Link, useParams, withRouter} from 'react-router-dom';\nimport {useForm} from 'react-hook-form';\nimport _ from 'lodash';\nimport {alertFailure, alertSuccess} from '../../store/actions/alert';\nimport {BaseRequest} from '../../request/Request';\nimport {adminRoute, apiRoute, publicRoute} from \"../../utils\";\nimport InvestorLayout from \"../InvestorLayout/InvestorLayout\";\nimport TextTitle from \"../InvestorLayout/TextTitle\";\nimport TextSubTitle from \"../InvestorLayout/TextSubTitle\";\nimport Button from \"../../components/Base/Button\";\n\nconst MESSAGE_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst msgParams = [\n  {\n    type: 'string',      // Any valid solidity type\n    name: 'Message',     // Any string label you want\n    value: MESSAGE_SIGNATURE  // The value to sign\n },\n];\n\nconst InvestorResetPassword: React.FC<any> = (props: any) => {\n  const dispatch = useDispatch();\n  const baseRequest = new BaseRequest();\n\n  const { token } = useParams() as any;\n  const { data: loginInvestor } = useSelector((state: any) => state.investor);\n  const { data: loginUser } = useSelector((state: any) => state.user);\n  const { data: ethAddress } = useSelector((state: any) => state.userConnect);\n  const [isAvailableLoading, setIsAvailableLoading] = useState(false);\n  const [isAvailable, setIsAvailable] = useState(false);\n  const [resetPasswordLoading, setResetPasswordLoading] = useState(false);\n\n  const { register, watch, errors, handleSubmit } = useForm({\n    mode: 'onChange'\n  });\n\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n\n  const renderErrorRequired = (errors: any, prop: string) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  }\n\n  useEffect(() => {\n    const isInvestor = true;\n    const dataLoginInvestor = _.cloneDeep(loginInvestor);\n    if (isInvestor && !!dataLoginInvestor) {\n      props.history.push(publicRoute('/'));\n    }\n  }, [loginInvestor]);\n\n  useEffect(() => {\n    const isAvailableToken = async () => {\n      setIsAvailableLoading(true);\n\n      const response = await baseRequest.get(apiRoute(`/check-token/${token}`)) as any;\n      const resObj = await response.json();\n\n      if (resObj?.status !== 200 || resObj?.data.status !== 200) {\n        dispatch(alertFailure('Forgot password link has expired'));\n        props.history.push(publicRoute('/login'));\n        return ;\n      }\n      setIsAvailableLoading(false);\n      setIsAvailable(true);\n    };\n\n    if (!loginInvestor) {\n      isAvailableToken();\n    }\n  }, [token]);\n\n  const handleFormSubmit = async (data: any) =>  {\n     try {\n      setResetPasswordLoading(true);\n\n      const windowObj = window as any;\n      const { ethereum } = windowObj;\n\n      await ethereum.sendAsync({\n        method: 'eth_signTypedData',\n        params: [msgParams, ethAddress],\n        from: ethAddress,\n      }, async function(err: Error, result: any) {\n        if (err || result.error) {\n          const errMsg = err.message || result.error.message\n          dispatch(alertFailure(errMsg));\n          setResetPasswordLoading(false);\n          return;\n        }\n\n        const response = await baseRequest.post(apiRoute(`/reset-password/${token}`), {\n          password: data.password,\n          signature: result.result,\n          wallet_address: ethAddress,\n        }) as any;\n\n        const resObj = await response.json();\n\n        if (resObj?.status !== 200) {\n          dispatch(alertFailure(resObj.message));\n        } else {\n          dispatch(alertSuccess('Reset password successful!'));\n        }\n        setResetPasswordLoading(false);\n\n        const isInvestor = true;\n        const redirectUrl = isInvestor ? publicRoute('/login') : adminRoute('/login');\n        props.history.push(redirectUrl);\n      })\n    } catch (err) {\n      dispatch(alertFailure(err.message));\n      setResetPasswordLoading(false);\n    }\n  }\n\n  const render = () => {\n    if (isAvailableLoading) {\n      return <div style={{ textAlign: 'center' }}><CircularProgress size={70} /></div>\n    } else if (!isAvailableLoading && isAvailable) {\n    return (\n      <>\n        <TextTitle>\n          Reset Password\n        </TextTitle>\n        <TextSubTitle>\n          Enter your new password below to reset password\n        </TextSubTitle>\n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"login__form\">\n          <TextField name=\"password\" inputRef={register({\n            required: true ,\n            minLength: {\n              value: 8,\n              message: \"Password must have at least 8 characters\"\n            }})} inputProps={{ maxLength: 255, type: 'password' }} label=\"Password *\" color=\"secondary\" className=\"login__form-field\" />\n          <p className=\"login__form-error-message\">\n          {\n            errors.password && errors.password.type !== 'required' ? errors.password.message: renderErrorRequired(errors, 'password')\n          }\n          </p>\n          <TextField name=\"passwordConfirmation\" inputRef={register({\n            required: true,\n            validate: value => value === password.current || \"The passwords do not match\"\n          })} inputProps={{ maxLength: 255, type: 'password' }} label=\"Password Confirmation *\" color=\"secondary\" className=\"login__form-field\" />\n          <p className=\"login__form-error-message\">\n          {\n            errors.passwordConfirmation && errors.passwordConfirmation.type !== 'required' ? errors.passwordConfirmation.message: errors.confirmationPassword ? errors.confirmationPassword.message: renderErrorRequired(errors, 'passwordConfirmation')\n          }\n          </p>\n\n          <Link className=\"login__form-desc login__form-forgot-password\" to={publicRoute('/login')}>Sign in ?</Link>\n          <Link className=\"login__form-desc login__form-forgot-password\" to={publicRoute('/register')}>Sign up ?</Link>\n\n          <Button\n            label={'Submit'}\n            buttonType=\"primary\"\n            className={'login__form-cta'}\n            loading={resetPasswordLoading}\n            disabled={resetPasswordLoading}\n          />\n\n        </form>\n      </>\n      )\n    }\n  }\n\n  return (\n    <InvestorLayout>\n      {render()}\n    </InvestorLayout>\n  )\n};\n\nexport default withRouter(InvestorResetPassword);\n"]},"metadata":{},"sourceType":"module"}