{"ast":null,"code":"import { balanceActions } from '../constants/balance';\nimport { convertFromWei, getContractInstance, getWeb3Instance } from '../../services/web3';\nimport erc20ABI from '../../abi/Erc20.json';\nimport BigNumber from \"bignumber.js\";\nimport { SmartContractMethod } from '../../services/web3';\n\nconst balanceOf = async (tokenAddress, appChainID, connector, loginUser) => {\n  const tokenContract = getContractInstance(erc20ABI, tokenAddress, connector, appChainID, SmartContractMethod.Read, true);\n\n  if (tokenContract) {\n    const tokenDecimals = await tokenContract.methods.decimals().call();\n    const tokenBalance = await tokenContract.methods.balanceOf(loginUser).call();\n    const tokenBalanceConvert = new BigNumber(tokenBalance).div(new BigNumber(`1e+${tokenDecimals}`)).toString();\n    return tokenBalanceConvert;\n  }\n\n  return 0;\n};\n\nexport const getBalance = loginUser => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: balanceActions.BALANCE_LOADING\n    });\n\n    try {\n      const web3Instance = getWeb3Instance();\n      let result = {};\n\n      if (web3Instance) {\n        const ethBalance = await web3Instance.eth.getBalance(loginUser);\n        result = { ...result,\n          eth: convertFromWei(ethBalance)\n        };\n      }\n\n      const {\n        appChainID\n      } = getState().appNetwork.data;\n      const {\n        connector\n      } = getState().connector.data;\n      const pkfBalance = await balanceOf(process.env.REACT_APP_PKF, appChainID, connector, loginUser);\n      const uniBalance = await balanceOf(process.env.REACT_APP_UNI_LP, appChainID, connector, loginUser);\n      const mantraBalance = await balanceOf(process.env.REACT_APP_MANTRA_LP, appChainID, connector, loginUser);\n      result = { ...result,\n        pkf: pkfBalance,\n        uni: uniBalance,\n        mantra: mantraBalance\n      };\n      dispatch({\n        type: balanceActions.BALANCE_SUCCESS,\n        payload: result\n      });\n    } catch (error) {\n      dispatch({\n        type: balanceActions.BALANCE_FAILURE,\n        payload: error\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/balance.ts"],"names":["balanceActions","convertFromWei","getContractInstance","getWeb3Instance","erc20ABI","BigNumber","SmartContractMethod","balanceOf","tokenAddress","appChainID","connector","loginUser","tokenContract","Read","tokenDecimals","methods","decimals","call","tokenBalance","tokenBalanceConvert","div","toString","getBalance","dispatch","getState","type","BALANCE_LOADING","web3Instance","result","ethBalance","eth","appNetwork","data","pkfBalance","process","env","REACT_APP_PKF","uniBalance","REACT_APP_UNI_LP","mantraBalance","REACT_APP_MANTRA_LP","pkf","uni","mantra","BALANCE_SUCCESS","payload","error","BALANCE_FAILURE"],"mappings":"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","sourcesContent":["import { balanceActions } from '../constants/balance';\nimport { AnyAction } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { convertFromWei, getContractInstance, getWeb3Instance } from '../../services/web3';\nimport erc20ABI from '../../abi/Erc20.json';\nimport BigNumber from \"bignumber.js\";\nimport { SmartContractMethod } from '../../services/web3';\n\nconst balanceOf = async (tokenAddress: string | undefined, appChainID: any, connector: any, loginUser: string) => {\n  const tokenContract = getContractInstance(\n    erc20ABI,\n    tokenAddress as string,\n    connector,\n    appChainID,\n    SmartContractMethod.Read,\n    true\n  );\n  if (tokenContract) {\n    const tokenDecimals = await tokenContract.methods.decimals().call();\n    const tokenBalance = await tokenContract.methods.balanceOf(loginUser).call();\n    const tokenBalanceConvert = (new BigNumber(tokenBalance)).div(new BigNumber(`1e+${tokenDecimals}`)).toString();\n    return tokenBalanceConvert;\n  }\n  return 0;\n}\n\nexport const getBalance = (loginUser: string) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: balanceActions.BALANCE_LOADING });\n    try {\n      const web3Instance = getWeb3Instance();\n      let result = {};\n      if (web3Instance) {\n        const ethBalance = await web3Instance.eth.getBalance(loginUser);\n        result = {\n          ...result,\n          eth: convertFromWei(ethBalance),\n        }\n      }\n      const { appChainID } = getState().appNetwork.data;\n      const { connector } = getState().connector.data;\n\n      const pkfBalance = await balanceOf(process.env.REACT_APP_PKF, appChainID, connector, loginUser);\n      const uniBalance = await balanceOf(process.env.REACT_APP_UNI_LP, appChainID, connector, loginUser);\n      const mantraBalance = await balanceOf(process.env.REACT_APP_MANTRA_LP, appChainID, connector, loginUser);\n\n      result = {\n        ...result,\n        pkf: pkfBalance,\n        uni: uniBalance,\n        mantra: mantraBalance\n      };\n\n      dispatch({\n        type: balanceActions.BALANCE_SUCCESS,\n        payload: result,\n      });\n\n    } catch (error) {\n      dispatch({\n        type: balanceActions.BALANCE_FAILURE,\n        payload: error\n      });\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}