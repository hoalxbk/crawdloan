{"ast":null,"code":"var _jsxFileName = \"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ChangePassword/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TextField, CircularProgress } from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport { withRouter, useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { alertFailure, alertSuccess } from '../../store/actions/alert';\nimport { BaseRequest } from '../../request/Request';\nimport useStyles from './style';\nimport { adminRoute, apiRoute, publicRoute } from \"../../utils\";\nimport { logout } from \"../../store/actions/user\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst getMessageParams = (isInvestor = false) => {\n  const msgSignature = MESSAGE_INVESTOR_SIGNATURE;\n  return [{\n    type: 'string',\n    // Any valid solidity type\n    name: 'Message',\n    // Any string label you want\n    value: msgSignature // The value to sign\n\n  }];\n};\n\nconst loginLogo = '/images/login-logo.png';\n\nconst ChangePassword = props => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    data: loginInvestor\n  } = useSelector(state => state.investor);\n  const {\n    data: loginUser\n  } = useSelector(state => state.user);\n  const {\n    data: ethAddress\n  } = useSelector(state => state.userConnect);\n  const [resetPasswordLoading, setResetPasswordLoading] = useState(false);\n  const {\n    register,\n    watch,\n    errors,\n    handleSubmit\n  } = useForm({\n    mode: 'onChange'\n  });\n  const password = useRef({});\n  password.current = watch(\"newPassword\", \"\");\n  const {\n    role\n  } = useParams();\n\n  const renderErrorRequired = (errors, prop) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (role === 'investor' && !loginInvestor) {\n      props.history.push(publicRoute('/'));\n    }\n\n    if (role !== 'investor' && !loginUser) {\n      props.history.push(adminRoute('/'));\n    } // if ((role === 'investor' && !loginInvestor) || (role !== 'investor' && !loginUser)) {\n    //   props.history.push('/');\n    // }\n\n  }, [loginUser, loginInvestor, role, props.history]);\n\n  const handleFormSubmit = async data => {\n    setResetPasswordLoading(true);\n    const windowObj = window;\n    const {\n      ethereum\n    } = windowObj;\n    await ethereum.sendAsync({\n      method: 'eth_signTypedData',\n      params: [getMessageParams(role === 'investor'), ethAddress],\n      from: ethAddress\n    }, async function (err, result) {\n      if (err || result.error) {\n        const errMsg = err.message || result.error.message;\n        dispatch(alertFailure(errMsg));\n        setResetPasswordLoading(false);\n        return;\n      }\n\n      const baseRequest = new BaseRequest();\n      let url = '';\n      url = apiRoute('/change-password');\n      const response = await baseRequest.post(url, {\n        password_old: data.password,\n        password_new: data.newPassword,\n        signature: result.result,\n        wallet_address: ethAddress\n      }, role === 'investor');\n      const resObj = await response.json();\n\n      if ((resObj === null || resObj === void 0 ? void 0 : resObj.status) !== 200) {\n        dispatch(alertFailure(resObj.message));\n      } else {\n        dispatch(alertSuccess('Change password successful!'));\n        const isInvestor = role === 'investor';\n        dispatch(logout(isInvestor));\n        const redirectUrl = isInvestor ? publicRoute('/') : adminRoute('/login');\n        props.history.push(redirectUrl);\n      }\n\n      setResetPasswordLoading(false);\n    });\n  };\n\n  const render = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forgot-ps__title\",\n        children: \"Change Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(handleFormSubmit),\n        className: \"login__form\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          name: \"password\",\n          inputRef: register({\n            required: true\n          }),\n          inputProps: {\n            maxLength: 255,\n            type: \"password\"\n          },\n          label: \"Old Password *\",\n          color: \"secondary\",\n          className: \"login__form-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"login__form-error-message\",\n          children: renderErrorRequired(errors, 'password')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"newPassword\",\n          inputRef: register({\n            required: true,\n            minLength: {\n              value: 8,\n              message: \"Password must have at least 8 characters\"\n            }\n          }),\n          inputProps: {\n            maxLength: 255,\n            type: \"password\"\n          },\n          label: \"New Password *\",\n          color: \"secondary\",\n          className: \"login__form-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"login__form-error-message\",\n          children: errors.newPassword && errors.newPassword.type !== 'required' ? errors.newPassword.message : renderErrorRequired(errors, 'newPassword')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          name: \"newPasswordConfirmation\",\n          inputRef: register({\n            required: true,\n            validate: value => value === password.current || \"New passwords do not match.\"\n          }),\n          inputProps: {\n            maxLength: 255,\n            type: \"password\"\n          },\n          label: \"New Password Confirmation *\",\n          color: \"secondary\",\n          className: \"login__form-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"login__form-error-message\",\n          children: errors.newPasswordConfirmation && errors.newPasswordConfirmation.type !== 'required' ? errors.newPasswordConfirmation.message : errors.confirmationPassword ? errors.confirmationPassword.message : renderErrorRequired(errors, 'newPasswordConfirmation')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: resetPasswordLoading,\n          type: \"submit\",\n          className: \"login__form-button\",\n          children: [\"Submit\", resetPasswordLoading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 20,\n            style: {\n              marginLeft: 10\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 39\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fixed: true,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.forgotPassword,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"forgot-ps__logo\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: loginLogo,\n          alt: \"login-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"forgot-ps__brand\",\n          children: \"Red Kite\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forgot-ps__wrap\",\n        children: render()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChangePassword, \"TZgZ4fljjP8J19RMSuHqRjnaymk=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useSelector, useForm, useParams];\n});\n\n_c = ChangePassword;\nexport default _c2 = withRouter(ChangePassword);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChangePassword\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ChangePassword/index.tsx"],"names":["React","useState","useRef","useEffect","useSelector","useDispatch","TextField","CircularProgress","Container","withRouter","useParams","useForm","alertFailure","alertSuccess","BaseRequest","useStyles","adminRoute","apiRoute","publicRoute","logout","MESSAGE_INVESTOR_SIGNATURE","process","env","REACT_APP_MESSAGE_INVESTOR_SIGNATURE","getMessageParams","isInvestor","msgSignature","type","name","value","loginLogo","ChangePassword","props","classes","dispatch","data","loginInvestor","state","investor","loginUser","user","ethAddress","userConnect","resetPasswordLoading","setResetPasswordLoading","register","watch","errors","handleSubmit","mode","password","current","role","renderErrorRequired","prop","history","push","handleFormSubmit","windowObj","window","ethereum","sendAsync","method","params","from","err","result","error","errMsg","message","baseRequest","url","response","post","password_old","password_new","newPassword","signature","wallet_address","resObj","json","status","redirectUrl","render","required","maxLength","minLength","validate","newPasswordConfirmation","confirmationPassword","marginLeft","forgotPassword"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TextField, CircularProgress } from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport { withRouter, useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\n\nimport { alertFailure, alertSuccess } from '../../store/actions/alert';\nimport { BaseRequest } from '../../request/Request';\nimport useStyles from './style';\nimport {adminRoute, apiRoute, publicRoute} from \"../../utils\";\nimport {logout} from \"../../store/actions/user\";\n\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst getMessageParams = (isInvestor: boolean = false) => {\n  const msgSignature = MESSAGE_INVESTOR_SIGNATURE;\n\n  return [{\n    type: 'string',      // Any valid solidity type\n    name: 'Message',     // Any string label you want\n    value: msgSignature  // The value to sign\n  }]\n};\n\nconst loginLogo = '/images/login-logo.png';\n\nconst ChangePassword: React.FC<any> = (props: any) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const { data: loginInvestor } = useSelector((state: any) => state.investor);\n  const { data: loginUser } = useSelector((state: any) => state.user);\n  const { data: ethAddress } = useSelector((state: any) => state.userConnect);\n  const [resetPasswordLoading, setResetPasswordLoading] = useState(false);\n\n  const { register, watch, errors, handleSubmit } = useForm({\n    mode: 'onChange'\n  });\n\n  const password = useRef({});\n  password.current = watch(\"newPassword\", \"\");\n\n  const { role } = useParams() as any;\n\n  const renderErrorRequired = (errors: any, prop: string) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (role === 'investor' && !loginInvestor) {\n      props.history.push(publicRoute('/'));\n    }\n    if (role !== 'investor' && !loginUser) {\n      props.history.push(adminRoute('/'));\n    }\n    // if ((role === 'investor' && !loginInvestor) || (role !== 'investor' && !loginUser)) {\n    //   props.history.push('/');\n    // }\n  }, [loginUser, loginInvestor, role, props.history]);\n\n  const handleFormSubmit = async (data: any) =>  {\n    setResetPasswordLoading(true);\n\n    const windowObj = window as any;\n    const { ethereum } = windowObj;\n\n     await ethereum.sendAsync({\n          method: 'eth_signTypedData',\n          params: [getMessageParams(role === 'investor'), ethAddress],\n          from: ethAddress,\n      }, async function(err: Error, result: any) {\n        if (err || result.error) {\n           const errMsg = err.message || result.error.message\n           dispatch(alertFailure(errMsg));\n           setResetPasswordLoading(false);\n            return;\n        }\n        const baseRequest = new BaseRequest();\n\n        let url = '';\n\n        url = apiRoute('/change-password');\n\n        const response = await baseRequest.post(url, {\n          password_old: data.password,\n          password_new: data.newPassword,\n          signature: result.result,\n          wallet_address: ethAddress,\n        }, role === 'investor') as any;\n\n        const resObj = await response.json();\n\n       if (resObj?.status !== 200) {\n         dispatch(alertFailure(resObj.message));\n       } else {\n         dispatch(alertSuccess('Change password successful!'));\n         const isInvestor = role === 'investor';\n         dispatch(logout(isInvestor));\n         const redirectUrl = isInvestor ? publicRoute('/') : adminRoute('/login');\n         props.history.push(redirectUrl);\n       }\n\n        setResetPasswordLoading(false);\n      })\n  }\n\n  const render = () => {\n    return (\n      <>\n        <div className=\"forgot-ps__title\">\n          Change Password\n        </div>\n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"login__form\">\n          <TextField name=\"password\" inputRef={register({ required: true })} inputProps={{ maxLength: 255, type: \"password\" }} label=\"Old Password *\" color=\"secondary\" className=\"login__form-field\" />\n          <p className=\"login__form-error-message\">\n            {\n              renderErrorRequired(errors, 'password')\n            }\n          </p>\n          <TextField\n          name=\"newPassword\"\n          inputRef={register({\n            required: true,\n            minLength: {\n              value: 8,\n              message: \"Password must have at least 8 characters\"\n            }\n          })} inputProps={{ maxLength: 255, type: \"password\" }} label=\"New Password *\" color=\"secondary\" className=\"login__form-field\" />\n          <p className=\"login__form-error-message\">\n            {\n              errors.newPassword && errors.newPassword.type !== 'required' ? errors.newPassword.message: renderErrorRequired(errors, 'newPassword')\n            }\n          </p>\n          <TextField name=\"newPasswordConfirmation\" inputRef={register({\n            required: true ,\n            validate: value => value === password.current || \"New passwords do not match.\"\n          })} inputProps={{ maxLength: 255, type: \"password\"  }} label=\"New Password Confirmation *\" color=\"secondary\" className=\"login__form-field\" />\n          <p className=\"login__form-error-message\">\n            {\n              errors.newPasswordConfirmation && errors.newPasswordConfirmation.type !== 'required' ? errors.newPasswordConfirmation.message: errors.confirmationPassword ? errors.confirmationPassword.message: renderErrorRequired(errors, 'newPasswordConfirmation')\n            }\n          </p>\n          <button disabled={resetPasswordLoading} type=\"submit\" className=\"login__form-button\">\n            Submit\n            {\n              resetPasswordLoading && <CircularProgress size={20} style={{ marginLeft: 10 }}/>\n            }\n          </button>\n        </form>\n      </>\n    )\n  }\n\n  return (\n    <Container fixed>\n      <div className={classes.forgotPassword}>\n        <span className=\"forgot-ps__logo\">\n          <img src={loginLogo} alt=\"login-logo\" />\n          <h2 className=\"forgot-ps__brand\">Red Kite</h2>\n        </span>\n        <div className=\"forgot-ps__wrap\">\n          {\n            render()\n          }\n        </div>\n      </div>\n    </Container>\n  )\n};\n\nexport default withRouter(ChangePassword);\n"]},"metadata":{},"sourceType":"module"}