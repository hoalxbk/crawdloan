{"ast":null,"code":"var _jsxFileName = \"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Register/InvestorRegister.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CircularProgress, TextField } from '@material-ui/core';\nimport { Link, withRouter } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { useWeb3React } from '@web3-react/core';\nimport { alertFailure } from '../../store/actions/alert';\nimport { connectWallet, register as registerAccount, resetUserState } from '../../store/actions/user';\nimport Button from '../../components/Base/Button';\nimport { userAlreadyExists } from '../../utils/user';\nimport { publicRoute } from \"../../utils\";\nimport InvestorLayout from \"../InvestorLayout/InvestorLayout\";\nimport TextTitle from \"../InvestorLayout/TextTitle\";\nimport ConnectYourWallet from \"../InvestorLayout/ConnectYourWallet\";\nimport useStyles from './style';\nimport Logo from '../InvestorLayout/Logo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EMAIL_REGEX = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst InvestorRegister = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const styles = useStyles();\n  const [loadingUserExists, setLoadingUserExists] = useState(false);\n  const [userExists, setUserExists] = useState(false);\n  const [currentPage, setCurrentPage] = useState('walletConnect');\n  const {\n    loading: userRegisterLoading = false,\n    error: errorRegister\n  } = useSelector(state => state.userRegister);\n  const {\n    data: loginInvestor,\n    loading: investorLoginLoading,\n    error\n  } = useSelector(state => state.investor);\n  const {\n    account: connectedAccount,\n    library\n  } = useWeb3React();\n  const {\n    register,\n    watch,\n    getValues,\n    setValue,\n    errors,\n    handleSubmit\n  } = useForm({\n    mode: 'onChange'\n  });\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n\n  const renderErrorRequired = (errors, prop) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (error || errorRegister) {\n      dispatch(alertFailure(error || errorRegister));\n    }\n  }, [error, errorRegister]);\n  useEffect(() => {\n    if (connectedAccount) {\n      setCurrentPage('signIn');\n    } else {\n      setCurrentPage('walletConnect');\n    }\n  }, [connectedAccount]);\n  useEffect(() => {\n    const checkUserExists = async () => {\n      if (currentPage === 'signIn' && connectedAccount) {\n        setLoadingUserExists(true);\n        const userExists = await userAlreadyExists(connectedAccount);\n        setLoadingUserExists(false);\n        setUserExists(userExists);\n      } else setUserExists(false);\n    };\n\n    connectedAccount && checkUserExists();\n  }, [currentPage, connectedAccount, loginInvestor]);\n  useEffect(() => {\n    if (loginInvestor) {\n      props.history.push(publicRoute('/'));\n    }\n\n    return () => {\n      error && dispatch(resetUserState());\n    };\n  }, [loginInvestor, error]);\n\n  const handleFormSubmit = data => {\n    dispatch(registerAccount({ ...data,\n      address: connectedAccount,\n      library\n    }));\n  };\n\n  const render = () => {\n    if (currentPage === 'walletConnect') {\n      return /*#__PURE__*/_jsxDEV(ConnectYourWallet, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          label: 'Connect Wallet',\n          buttonType: \"primary\",\n          onClick: handleUserLogin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this);\n    } else {\n      if (loadingUserExists) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"login__user-loading\",\n          children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 75,\n            thickness: 4,\n            value: 100\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"login__user-loading-text\",\n            children: \"Loading Ethereum Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"login__logo-ether-title\",\n            children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextTitle, {\n              children: \"Create An Account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit(handleFormSubmit),\n            className: styles.loginForm,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              id: \"standard-secondary\",\n              value: connectedAccount,\n              label: \"Current Ethereum Address\",\n              color: \"secondary\",\n              className: \"login__form-field\",\n              disabled: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                label: \"Email *\",\n                name: \"email\",\n                inputProps: {\n                  maxLength: 100\n                },\n                inputRef: register({\n                  required: true,\n                  validate: {\n                    isValidEmail: value => {\n                      if (!EMAIL_REGEX.test(value)) {\n                        return 'Invalid email address';\n                      }\n\n                      return true;\n                    }\n                  }\n                }),\n                color: \"secondary\",\n                className: \"login__form-field\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"login__form-error-message\",\n                children: errors.email && errors.email.type !== 'required' ? errors.email.message : renderErrorRequired(errors, 'email')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              label: 'Sign up',\n              buttonType: \"primary\",\n              className: 'login__form-cta',\n              loading: investorLoginLoading,\n              disabled: investorLoginLoading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"signup\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Have an account ?\\xA0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                className: \"login__form-desc login__form-forgot-password\",\n                to: publicRoute('/login'),\n                children: \"Sign in ?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      }\n    }\n  };\n\n  const handleUserLogin = () => {\n    dispatch(connectWallet());\n  };\n\n  return /*#__PURE__*/_jsxDEV(InvestorLayout, {\n    children: render()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InvestorRegister, \"5jQ87VAPcrrdFUcFyWI8fQBBz7E=\", false, function () {\n  return [useDispatch, useStyles, useSelector, useSelector, useWeb3React, useForm];\n});\n\n_c = InvestorRegister;\nexport default _c2 = withRouter(InvestorRegister);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InvestorRegister\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Register/InvestorRegister.tsx"],"names":["React","useEffect","useRef","useState","useDispatch","useSelector","CircularProgress","TextField","Link","withRouter","useForm","useWeb3React","alertFailure","connectWallet","register","registerAccount","resetUserState","Button","userAlreadyExists","publicRoute","InvestorLayout","TextTitle","ConnectYourWallet","useStyles","Logo","EMAIL_REGEX","InvestorRegister","props","dispatch","styles","loadingUserExists","setLoadingUserExists","userExists","setUserExists","currentPage","setCurrentPage","loading","userRegisterLoading","error","errorRegister","state","userRegister","data","loginInvestor","investorLoginLoading","investor","account","connectedAccount","library","watch","getValues","setValue","errors","handleSubmit","mode","password","current","renderErrorRequired","prop","type","checkUserExists","history","push","handleFormSubmit","address","render","handleUserLogin","loginForm","maxLength","required","validate","isValidEmail","value","test","email","message"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {CircularProgress, TextField} from '@material-ui/core';\nimport {Link, withRouter} from 'react-router-dom';\nimport {useForm} from 'react-hook-form';\nimport { useWeb3React } from '@web3-react/core';\n\nimport {alertFailure} from '../../store/actions/alert';\nimport {connectWallet, register as registerAccount, resetUserState} from '../../store/actions/user';\nimport Button from '../../components/Base/Button';\nimport {userAlreadyExists} from '../../utils/user';\nimport {publicRoute} from \"../../utils\";\nimport InvestorLayout from \"../InvestorLayout/InvestorLayout\";\nimport TextTitle from \"../InvestorLayout/TextTitle\";\nimport ConnectYourWallet from \"../InvestorLayout/ConnectYourWallet\";\nimport useStyles from './style'\nimport Logo from '../InvestorLayout/Logo'\n\nconst EMAIL_REGEX = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst InvestorRegister: React.FC<any> = (props: any) => {\n  const dispatch = useDispatch();\n  const styles = useStyles();\n\n  const [loadingUserExists, setLoadingUserExists] = useState(false);\n  const [userExists, setUserExists] = useState(false);\n  const [currentPage, setCurrentPage] = useState('walletConnect');\n  const { loading: userRegisterLoading = false, error: errorRegister } = useSelector((state: any) => state.userRegister);\n  const { data: loginInvestor, loading: investorLoginLoading, error } = useSelector((state: any) => state.investor);\n  const { account: connectedAccount, library } = useWeb3React();\n\n  const { register, watch, getValues, setValue, errors, handleSubmit } = useForm({\n    mode: 'onChange'\n  });\n\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n\n  const renderErrorRequired = (errors: any, prop: string) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (error || errorRegister) {\n      dispatch(alertFailure(error || errorRegister));\n    }\n  }, [error, errorRegister]);\n\n  useEffect(() => {\n    if (connectedAccount) {\n      setCurrentPage('signIn');\n    } else {\n      setCurrentPage('walletConnect');\n    }\n  }, [connectedAccount]);\n\n  useEffect(() => {\n    const checkUserExists = async () => {\n      if (currentPage === 'signIn' && connectedAccount) {\n        setLoadingUserExists(true);\n\n        const userExists = await userAlreadyExists(connectedAccount);\n        setLoadingUserExists(false);\n\n        setUserExists(userExists);\n      } else setUserExists(false);\n    }\n\n    connectedAccount && checkUserExists();\n  }, [currentPage, connectedAccount, loginInvestor]);\n\n  useEffect(() => {\n    if (loginInvestor) {\n      props.history.push(publicRoute('/'));\n    }\n\n    return () => {\n      error && dispatch(resetUserState());\n    }\n  }, [loginInvestor, error]);\n\n  const handleFormSubmit = (data: any) =>  {\n    dispatch(registerAccount({\n      ...data,\n      address: connectedAccount,\n      library\n    }));\n  }\n\n  const render = () => {\n    if (currentPage === 'walletConnect') {\n      return (\n        <ConnectYourWallet>\n          <Button\n            label={'Connect Wallet'}\n            buttonType=\"primary\"\n            onClick={handleUserLogin}\n          />\n        </ConnectYourWallet>\n      )\n    } else {\n      if (loadingUserExists) {\n        return (\n          <div className=\"login__user-loading\">\n            <CircularProgress size={75} thickness={4} value={100} />\n            <p className=\"login__user-loading-text\">Loading Ethereum Wallet</p>\n          </div>\n        );\n      } else {\n        return (\n          <>\n            <div className=\"login__logo-ether-title\">\n              <Logo></Logo>\n              <TextTitle>\n                Create An Account\n              </TextTitle>\n            </div>\n            <form onSubmit={handleSubmit(handleFormSubmit)} className={styles.loginForm}>\n              <TextField id=\"standard-secondary\" value={connectedAccount} label=\"Current Ethereum Address\" color=\"secondary\" className=\"login__form-field\" disabled />\n              <div>\n                <TextField\n                  label=\"Email *\"\n                  name=\"email\"\n                  inputProps={{ maxLength: 100 }}\n                  inputRef={register({\n                    required: true,\n                    validate: {\n                      isValidEmail: value => {\n                        if (!EMAIL_REGEX.test(value)) {\n                          return 'Invalid email address';\n                        }\n\n                        return true;\n                      }\n                    }\n                  })}\n                  color=\"secondary\"\n                  className=\"login__form-field\"\n                />\n                <p className=\"login__form-error-message\">\n                  {\n                    errors.email && errors.email.type !== 'required' ? errors.email.message: renderErrorRequired(errors, 'email')\n                  }\n                </p>\n              </div>\n\n              <Button\n                label={'Sign up'}\n                buttonType=\"primary\"\n                className={'login__form-cta'}\n                loading={investorLoginLoading}\n                disabled={investorLoginLoading}\n              />\n              <div className=\"signup\">\n                <span>Have an account ?&nbsp;</span>\n                <Link className=\"login__form-desc login__form-forgot-password\" to={publicRoute('/login')}>Sign in ?</Link>\n              </div>\n            </form>\n          </>\n        )\n      }\n    }\n  }\n\n  const handleUserLogin = () => {\n    dispatch(connectWallet());\n  };\n\n  return (\n    <InvestorLayout>\n      {render()}\n    </InvestorLayout>\n  )\n};\n\nexport default withRouter(InvestorRegister);\n"]},"metadata":{},"sourceType":"module"}