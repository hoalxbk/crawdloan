{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSelector } from 'react-redux';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { getContractInstance, SmartContractMethod } from '../services/web3';\nimport ERC20_ABI from '../abi/Erc20.json';\n\nconst useTokenBalance = (token, userAddress) => {\n  _s();\n\n  const [tokenBalanceLoading, setTokenBalanceLoading] = useState(false);\n  const {\n    library\n  } = useWeb3React();\n  const {\n    appChainID\n  } = useSelector(state => state.appNetwork).data;\n  const connector = useTypedSelector(state => state.connector).data;\n  const retrieveTokenBalance = useCallback(async (token, userAddress) => {\n    if (token && userAddress && ethers.utils.isAddress(userAddress) && ethers.utils.isAddress(token.address)) {\n      setTokenBalanceLoading(true);\n      const contract = getContractInstance(ERC20_ABI, token.address, connector, appChainID, SmartContractMethod.Read);\n\n      if (contract) {\n        const balance = await contract.methods.balanceOf(userAddress).call();\n        const balanceReturn = new BigNumber(balance).div(new BigNumber(10).pow(token === null || token === void 0 ? void 0 : token.decimals)).toFixed(7);\n        return balanceReturn;\n      }\n    }\n\n    if (token && (token === null || token === void 0 ? void 0 : token.symbol) === 'ETH') {\n      const balance = await library.provider.request({\n        method: 'eth_getBalance',\n        params: [userAddress, 'latest']\n      });\n      const balanceReturn = new BigNumber(balance).div(new BigNumber(10).pow(token === null || token === void 0 ? void 0 : token.decimals)).toFixed(7);\n      return balanceReturn;\n    }\n\n    return 0;\n  }, [userAddress, token, appChainID, connector]);\n  return {\n    retrieveTokenBalance,\n    tokenBalanceLoading\n  };\n};\n\n_s(useTokenBalance, \"0SF2ZVGylercg22Gxo3Hr71BKyE=\", false, function () {\n  return [useWeb3React, useSelector, useTypedSelector];\n});\n\nexport default useTokenBalance;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useTokenBalance.ts"],"names":["useState","useCallback","useWeb3React","useSelector","ethers","BigNumber","useTypedSelector","getContractInstance","SmartContractMethod","ERC20_ABI","useTokenBalance","token","userAddress","tokenBalanceLoading","setTokenBalanceLoading","library","appChainID","state","appNetwork","data","connector","retrieveTokenBalance","utils","isAddress","address","contract","Read","balance","methods","balanceOf","call","balanceReturn","div","pow","decimals","toFixed","symbol","provider","request","method","params"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAGA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,QAAyD,kBAAzD;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAA+BC,WAA/B,KAA0E;AAAA;;AAChG,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDd,QAAQ,CAAU,KAAV,CAA9D;AAEA,QAAM;AAAEe,IAAAA;AAAF,MAAcb,YAAY,EAAhC;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAkBb,WAAW,CAAEc,KAAD,IAAgBA,KAAK,CAACC,UAAvB,CAAX,CAA8CC,IAAtE;AACA,QAAMC,SAAS,GAAId,gBAAgB,CAACW,KAAK,IAAIA,KAAK,CAACG,SAAhB,CAAhB,CAA2CD,IAA9D;AAEA,QAAME,oBAAoB,GAAGpB,WAAW,CAAC,OAAOU,KAAP,EAAqCC,WAArC,KAA6D;AACpG,QAAID,KAAK,IACNC,WADC,IAEDR,MAAM,CAACkB,KAAP,CAAaC,SAAb,CAAuBX,WAAvB,CAFC,IAGAR,MAAM,CAACkB,KAAP,CAAaC,SAAb,CAAuBZ,KAAK,CAACa,OAA7B,CAHJ,EAG4C;AAC1CV,MAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACA,YAAMW,QAAQ,GAAGlB,mBAAmB,CAACE,SAAD,EAAYE,KAAK,CAACa,OAAlB,EAA2BJ,SAA3B,EAAsCJ,UAAtC,EAAkDR,mBAAmB,CAACkB,IAAtE,CAApC;;AAEA,UAAID,QAAJ,EAAc;AACZ,cAAME,OAAO,GAAG,MAAMF,QAAQ,CAACG,OAAT,CAAiBC,SAAjB,CAA2BjB,WAA3B,EAAwCkB,IAAxC,EAAtB;AACA,cAAMC,aAAa,GAAG,IAAI1B,SAAJ,CAAcsB,OAAd,EAAuBK,GAAvB,CAA2B,IAAI3B,SAAJ,CAAc,EAAd,EAAkB4B,GAAlB,CAAsBtB,KAAtB,aAAsBA,KAAtB,uBAAsBA,KAAK,CAAEuB,QAA7B,CAA3B,EAA6EC,OAA7E,CAAqF,CAArF,CAAtB;AAEA,eAAOJ,aAAP;AACD;AACF;;AAED,QAAIpB,KAAK,IAAI,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEyB,MAAP,MAAkB,KAA/B,EAAsC;AAClC,YAAMT,OAAO,GAAG,MAAMZ,OAAO,CAACsB,QAAR,CAAiBC,OAAjB,CAAyB;AAAEC,QAAAA,MAAM,EAAE,gBAAV;AAA4BC,QAAAA,MAAM,EAAE,CAAC5B,WAAD,EAAc,QAAd;AAApC,OAAzB,CAAtB;AACA,YAAMmB,aAAa,GAAG,IAAI1B,SAAJ,CAAcsB,OAAd,EAAuBK,GAAvB,CAA2B,IAAI3B,SAAJ,CAAc,EAAd,EAAkB4B,GAAlB,CAAsBtB,KAAtB,aAAsBA,KAAtB,uBAAsBA,KAAK,CAAEuB,QAA7B,CAA3B,EAA6EC,OAA7E,CAAqF,CAArF,CAAtB;AACA,aAAOJ,aAAP;AACH;;AAED,WAAO,CAAP;AACD,GAvBuC,EAuBrC,CAACnB,WAAD,EAAcD,KAAd,EAAqBK,UAArB,EAAiCI,SAAjC,CAvBqC,CAAxC;AAyBA,SAAO;AACLC,IAAAA,oBADK;AAELR,IAAAA;AAFK,GAAP;AAID,CApCD;;GAAMH,e;UAGgBR,Y,EACIC,W,EACLG,gB;;;AAiCrB,eAAeI,eAAf","sourcesContent":["import { useState, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSelector } from 'react-redux';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\n\nimport { TokenType } from '../hooks/useTokenDetails';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { getContractInstance, SmartContractMethod } from '../services/web3';\n\nimport ERC20_ABI from '../abi/Erc20.json';\n\nconst useTokenBalance = (token: TokenType | undefined, userAddress: string | null | undefined) => {\n  const [tokenBalanceLoading, setTokenBalanceLoading] = useState<boolean>(false);\n\n  const { library } = useWeb3React();\n  const { appChainID }  = useSelector((state: any) => state.appNetwork).data;\n  const connector  = useTypedSelector(state => state.connector).data;\n\n  const retrieveTokenBalance = useCallback(async (token: TokenType | undefined, userAddress: string) => {\n    if (token \n    && userAddress \n    && ethers.utils.isAddress(userAddress) \n    && (ethers.utils.isAddress(token.address))) {\n      setTokenBalanceLoading(true);\n      const contract = getContractInstance(ERC20_ABI, token.address, connector, appChainID, SmartContractMethod.Read);\n\n      if (contract) {\n        const balance = await contract.methods.balanceOf(userAddress).call();\n        const balanceReturn = new BigNumber(balance).div(new BigNumber(10).pow(token?.decimals as number)).toFixed(7);\n\n        return balanceReturn;\n      }\n    }\n\n    if (token && token?.symbol === 'ETH') {\n        const balance = await library.provider.request({ method: 'eth_getBalance', params: [userAddress, 'latest'] });\n        const balanceReturn = new BigNumber(balance).div(new BigNumber(10).pow(token?.decimals as number)).toFixed(7);\n        return balanceReturn;\n    }\n\n    return 0;\n  }, [userAddress, token, appChainID, connector]);\n\n  return {\n    retrieveTokenBalance,\n    tokenBalanceLoading\n  }\n}\n\nexport default useTokenBalance;\n"]},"metadata":{},"sourceType":"module"}