{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport MANTRA_ABI from '../abi/mantraUnstake.json';\nimport { getContractInstance, SmartContractMethod } from '../services/web3';\nimport { BigNumber } from 'bignumber.js';\nimport useTokenDetails from './useTokenDetails';\nconst SPKF_ADDRESS = process.env.REACT_APP_MANTRA_LP || 'undefined';\n\nconst useUserTier = (address, networkAvailable) => {\n  _s();\n\n  const [currentUserTier, setCurrentUserTier] = useState(0);\n  const {\n    data: userInfo,\n    loading: userInfoLoading\n  } = useSelector(state => state.userInfo);\n  const {\n    appChainID\n  } = useSelector(state => state.appNetwork).data;\n  const connector = useTypedSelector(state => state.connector).data;\n  const [loading, setLoading] = useState(true);\n  const {\n    data: tiers,\n    loading: tiersLoading\n  } = useSelector(state => state.tiers);\n  const {\n    tokenDetails,\n    loading: tokenDetailsLoading\n  } = useTokenDetails(SPKF_ADDRESS, 'eth');\n  const [totalUnstaked, setTotalUnstaked] = useState('0');\n  const [total, setTotal] = useState('0');\n\n  const calculateUserTier = totalStaked => {\n    let currentTier = 0;\n\n    for (let i = 0; i < tiers.length; i++) {\n      const tier = new BigNumber(tiers[i]);\n\n      if (tier.lte(totalStaked)) {\n        currentTier = i + 1;\n      }\n    }\n\n    setCurrentUserTier(currentTier);\n  };\n\n  useEffect(() => {\n    !userInfoLoading && !tiersLoading && userInfo.totalStaked && tokenDetails ? setLoading(false) : setLoading(true);\n  }, [userInfoLoading, userInfo, tokenDetailsLoading, tokenDetails]);\n  useEffect(() => {\n    const getTotalUnstaked = async () => {\n      if (SPKF_ADDRESS && address) {\n        try {\n          const contract = getContractInstance(MANTRA_ABI, SPKF_ADDRESS, connector, appChainID, SmartContractMethod.Read, networkAvailable === 'eth');\n          const totalUnstakedResult = await (contract === null || contract === void 0 ? void 0 : contract.methods.getUnstake(address).call());\n          const totalUnstaked = 0; // (new BigNumber(totalUnstakedResult.amount)).div(new BigNumber(10**(tokenDetails?.decimals || 0)))\n\n          const totalStaked = new BigNumber(userInfo.totalStaked);\n          let balance = new BigNumber(0); // await contract?.methods.balanceOf(address).call();\n\n          balance = new BigNumber(balance).div(Math.pow(10, 18));\n          console.log('getTotalUnstaked balance', totalUnstakedResult, totalUnstaked, balance);\n          const total = totalStaked.plus(totalUnstaked).plus(balance);\n          console.log('getTotalUnstaked total', total);\n          setTotalUnstaked(totalUnstaked.toString());\n          setTotal(total.toString());\n          calculateUserTier(total);\n        } catch (e) {\n          console.log('error', e);\n        }\n      }\n    };\n\n    !loading && getTotalUnstaked();\n  }, [loading, userInfo]);\n  useEffect(() => {\n    setTotalUnstaked('0');\n    setTotal('0');\n    setCurrentUserTier(0);\n  }, [address, appChainID]);\n  return {\n    currentTier: currentUserTier,\n    totalStaked: userInfo.totalStaked,\n    totalUnstaked,\n    total\n  };\n};\n\n_s(useUserTier, \"NAQdaNHfzA8E75V/+lHNbubckfo=\", false, function () {\n  return [useSelector, useSelector, useTypedSelector, useSelector, useTokenDetails];\n});\n\nexport default useUserTier;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useUserTier.ts"],"names":["useEffect","useState","useSelector","useTypedSelector","MANTRA_ABI","getContractInstance","SmartContractMethod","BigNumber","useTokenDetails","SPKF_ADDRESS","process","env","REACT_APP_MANTRA_LP","useUserTier","address","networkAvailable","currentUserTier","setCurrentUserTier","data","userInfo","loading","userInfoLoading","state","appChainID","appNetwork","connector","setLoading","tiers","tiersLoading","tokenDetails","tokenDetailsLoading","totalUnstaked","setTotalUnstaked","total","setTotal","calculateUserTier","totalStaked","currentTier","i","length","tier","lte","getTotalUnstaked","contract","Read","totalUnstakedResult","methods","getUnstake","call","balance","div","Math","pow","console","log","plus","toString","e"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport MANTRA_ABI from '../abi/mantraUnstake.json';\nimport { getContractInstance, SmartContractMethod } from '../services/web3';\nimport _ from 'lodash';\nimport { BigNumber } from 'bignumber.js';\nimport useTokenDetails from './useTokenDetails';\n\nconst SPKF_ADDRESS = process.env.REACT_APP_MANTRA_LP || 'undefined';\n\nexport type UserTier = {\n  currentTier: number;\n  totalStaked: string;\n  totalUnstaked: string;\n  total: string\n}\n\nconst useUserTier = (address: string, networkAvailable: string): UserTier => {\n  const [ currentUserTier, setCurrentUserTier ] = useState<number>(0);\n  const { data: userInfo, loading: userInfoLoading } = useSelector((state: any) => state.userInfo);\n  const { appChainID } = useSelector((state: any) => state.appNetwork).data;\n  const connector  = useTypedSelector(state => state.connector).data;\n  const [ loading, setLoading] = useState<boolean>(true);\n  const { data: tiers, loading: tiersLoading } = useSelector((state: any) => state.tiers);\n  const { tokenDetails, loading: tokenDetailsLoading } = useTokenDetails(SPKF_ADDRESS, 'eth');\n  const [ totalUnstaked, setTotalUnstaked ] = useState<string>('0');\n  const [ total, setTotal ] = useState<string>('0');\n\n\n  const calculateUserTier = (totalStaked: BigNumber) => {\n    let currentTier = 0;\n    for(let i = 0; i < tiers.length; i++) {\n      const tier = new BigNumber(tiers[i])\n      if(tier.lte(totalStaked)) {\n        currentTier = i + 1\n      }\n    }\n    setCurrentUserTier(currentTier);\n  }\n\n  useEffect(() => {\n    (!userInfoLoading && !tiersLoading && userInfo.totalStaked && tokenDetails) ? setLoading(false) : setLoading(true);\n  }, [userInfoLoading, userInfo, tokenDetailsLoading, tokenDetails]);\n\n  useEffect(() => {\n    const getTotalUnstaked = async () => {\n      if(SPKF_ADDRESS && address) {\n        try {\n          const contract = getContractInstance(\n            MANTRA_ABI,\n            SPKF_ADDRESS,\n            connector,\n            appChainID,\n            SmartContractMethod.Read,\n            networkAvailable === 'eth'\n          );\n          const totalUnstakedResult = await contract?.methods.getUnstake(address).call();\n          const totalUnstaked = 0;// (new BigNumber(totalUnstakedResult.amount)).div(new BigNumber(10**(tokenDetails?.decimals || 0)))\n          const totalStaked = new BigNumber(userInfo.totalStaked);\n          let balance = new BigNumber(0); // await contract?.methods.balanceOf(address).call();\n          balance = (new BigNumber(balance).div(Math.pow(10, 18)))\n          console.log('getTotalUnstaked balance', totalUnstakedResult, totalUnstaked, balance);\n\n          const total = totalStaked.plus(totalUnstaked).plus(balance);\n          console.log('getTotalUnstaked total', total);\n          setTotalUnstaked(totalUnstaked.toString());\n          setTotal(total.toString());\n          calculateUserTier(total);\n        }catch(e) {\n          console.log('error', e)\n        }\n      }\n    }\n\n    !loading && getTotalUnstaked();\n  }, [loading, userInfo]);\n\n  useEffect(() => {\n    setTotalUnstaked('0')\n    setTotal('0')\n    setCurrentUserTier(0)\n  }, [address, appChainID])\n\n  return  {\n    currentTier: currentUserTier,\n    totalStaked: userInfo.totalStaked,\n    totalUnstaked,\n    total\n  }\n}\n\nexport default useUserTier;\n"]},"metadata":{},"sourceType":"module"}