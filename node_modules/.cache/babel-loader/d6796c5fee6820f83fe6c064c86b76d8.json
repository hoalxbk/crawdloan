{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport useFetch from './useFetch';\nimport BigNumber from 'bignumber.js';\nimport moment from \"moment\";\nimport { convertUnixTimeToDateTime } from \"../utils/convertDate\";\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL;\nconst ETH_ICON = '/images/eth.svg';\nconst BSC_ICON = '/images/bsc.svg';\n\nconst usePoolDetails = poolId => {\n  _s();\n\n  const [poolDetailDone, setPoolDetailDone] = useState(false);\n  const {\n    loading: fetchPoolLoading,\n    error,\n    data\n  } = useFetch(`/pool/${poolId}`);\n  const {\n    data: connectedAccountTier\n  } = useTypedSelector(state => state.userTier);\n  const poolDetails = useMemo(() => {\n    if (data && data.tiers && !fetchPoolLoading && !error && poolDetailDone) {\n      const buyLimit = [];\n      const minimumBuy = [];\n      const tiersWithDetails = [];\n      const tokenDetails = data.token == 'TBD' ? {\n        symbol: 'TBA',\n        name: 'TBA',\n        decimals: 18,\n        address: 'Token contract not available yet.'\n      } : {\n        symbol: data.symbol,\n        name: data.name,\n        decimals: data.decimals,\n        address: data.token\n      };\n      data.tiers.length > 0 && data.tiers.map(tier => {\n        buyLimit.push(tier.max_buy);\n        minimumBuy.push(tier.min_buy);\n        tiersWithDetails.push({\n          allocation: tier.ticket_allow_percent,\n          ticket_allow: tier.ticket_allow,\n          name: tier.name,\n          // maxBuy: `${tier.max_buy} ${data.accept_currency.toUpperCase()}`,\n          startTime: tier.start_time,\n          endTime: tier.end_time,\n          level: tier.level\n        });\n      });\n      let campaignClaimConfig = data.campaignClaimConfig || [];\n      campaignClaimConfig = campaignClaimConfig.map((claimConfig, index) => {\n        return { ...claimConfig,\n          start_time_formated: convertUnixTimeToDateTime(claimConfig.start_time),\n          start_time_moment: moment(claimConfig.start_time)\n        };\n      });\n      console.log('data.campaignClaimConfig', data.campaignClaimConfig, campaignClaimConfig);\n      return {\n        method: data.buy_type,\n        startTime: data.start_join_pool_time,\n        token: data.token,\n        ethRate: data.purchasableCurrency === 'eth' ? data.ether_conversion_rate : data.token_conversion_rate,\n        type: data.pool_type,\n        amount: data.total_sold_coin,\n        website: data.website,\n        tokenDetails,\n        title: data.title,\n        buyLimit,\n        minimumBuy,\n        poolAddress: data.campaign_hash,\n        joinTime: data.start_join_pool_time,\n        endJoinTime: data.end_join_pool_time,\n        startBuyTime: data.start_time,\n        endBuyTime: data.finish_time,\n        purchasableCurrency: data.accept_currency,\n        id: data.id,\n        // banner: `${BASE_URL}/image/${data.token_images}`,\n        banner: data.token_images,\n        releaseTime: data.release_time,\n        networkAvailable: data.network_available,\n        networkIcon: data.network_available === 'eth' ? ETH_ICON : BSC_ICON,\n        minTier: data.min_tier,\n        isDeployed: data.is_deploy === 1,\n        isDisplay: data.is_display === 1,\n        addressReceiver: data.address_receiver,\n        description: data.description,\n        tiersWithDetails,\n        displayPriceRate: !!data.display_price_rate,\n        priceUsdt: new BigNumber(data.price_usdt).toFixed(),\n        campaignClaimConfig,\n        whitelistBannerSetting: data.whitelistBannerSetting,\n        isPrivate: data.is_private\n      };\n    }\n\n    return;\n  }, [data, fetchPoolLoading, error, poolDetailDone, connectedAccountTier]);\n  useEffect(() => {\n    data && setPoolDetailDone(true);\n  }, [data]);\n  return {\n    poolDetails,\n    loading: fetchPoolLoading || !poolDetailDone\n  };\n};\n\n_s(usePoolDetails, \"/yENL2OQvGyJapqCkPe4Tm4itIQ=\", false, function () {\n  return [useFetch, useTypedSelector];\n});\n\nexport default usePoolDetails;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/usePoolDetails.ts"],"names":["useEffect","useMemo","useState","useTypedSelector","useFetch","BigNumber","moment","convertUnixTimeToDateTime","BASE_URL","process","env","REACT_APP_API_BASE_URL","ETH_ICON","BSC_ICON","usePoolDetails","poolId","poolDetailDone","setPoolDetailDone","loading","fetchPoolLoading","error","data","connectedAccountTier","state","userTier","poolDetails","tiers","buyLimit","minimumBuy","tiersWithDetails","tokenDetails","token","symbol","name","decimals","address","length","map","tier","push","max_buy","min_buy","allocation","ticket_allow_percent","ticket_allow","startTime","start_time","endTime","end_time","level","campaignClaimConfig","claimConfig","index","start_time_formated","start_time_moment","console","log","method","buy_type","start_join_pool_time","ethRate","purchasableCurrency","ether_conversion_rate","token_conversion_rate","type","pool_type","amount","total_sold_coin","website","title","poolAddress","campaign_hash","joinTime","endJoinTime","end_join_pool_time","startBuyTime","endBuyTime","finish_time","accept_currency","id","banner","token_images","releaseTime","release_time","networkAvailable","network_available","networkIcon","minTier","min_tier","isDeployed","is_deploy","isDisplay","is_display","addressReceiver","address_receiver","description","displayPriceRate","display_price_rate","priceUsdt","price_usdt","toFixed","whitelistBannerSetting","isPrivate","is_private"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport useFetch from './useFetch';\nimport useTokenDetails, { TokenType } from './useTokenDetails';\nimport BigNumber from 'bignumber.js';\nimport moment from \"moment\";\nimport {convertMomentObjectToDateTimeString, convertUnixTimeToDateTime} from \"../utils/convertDate\";\n\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nexport type Tier = {\n  allocation: string,\n  ticket_allow: string,\n  name: string,\n  // maxBuy: string,s\n  startTime: string,\n  endTime: string,\n  level: string | number,\n}\n\nexport type PoolDetails = {\n  id: number;\n  website: string;\n  amount: number;\n  ethRate: number;\n  method: string;\n  type: string;\n  tokenDetails: TokenType;\n  title: string;\n  buyLimit: number[],\n  poolAddress: string;\n  joinTime: string;\n  endJoinTime: string;\n  startBuyTime: string;\n  endBuyTime: string;\n  releaseTime: string;\n  purchasableCurrency: string;\n  banner: string;\n  networkAvailable: string;\n  networkIcon: string;\n  minTier: number;\n  isDeployed: boolean;\n  isDisplay: boolean;\n  addressReceiver: string;\n  minimumBuy: number[];\n  description: string;\n  tiersWithDetails: Tier[];\n  displayPriceRate: any;\n  priceUsdt: string;\n  isPrivate: string;\n  campaignClaimConfig: any;\n}\n\nexport type PoolDetailsReturnType ={\n  poolDetails: PoolDetails | undefined,\n  loading: boolean\n}\n\nconst ETH_ICON = '/images/eth.svg';\nconst BSC_ICON = '/images/bsc.svg';\n\n\nconst usePoolDetails = (poolId : number): PoolDetailsReturnType => {\n  const [poolDetailDone, setPoolDetailDone] = useState<boolean>(false);\n  const { loading: fetchPoolLoading, error, data }  = useFetch<any>(`/pool/${poolId}`);\n  const { data: connectedAccountTier } = useTypedSelector(state => state.userTier);\n\n  const poolDetails = useMemo(() => {\n    if (data && data.tiers && !fetchPoolLoading && !error && poolDetailDone)  {\n      const buyLimit: number[] = [];\n      const minimumBuy: number[] = [];\n      const tiersWithDetails: Tier[] = [];\n\n      const tokenDetails = (data.token == 'TBD') ? {\n        symbol: 'TBA',\n        name: 'TBA',\n        decimals: 18,\n        address: 'Token contract not available yet.'\n      } : {\n        symbol: data.symbol,\n        name: data.name,\n        decimals: data.decimals,\n        address: data.token\n      }\n\n      data.tiers.length > 0 && data.tiers.map((tier: any) => {\n        buyLimit.push(tier.max_buy);\n        minimumBuy.push(tier.min_buy);\n        tiersWithDetails.push({\n          allocation: tier.ticket_allow_percent,\n          ticket_allow: tier.ticket_allow,\n          name: tier.name,\n          // maxBuy: `${tier.max_buy} ${data.accept_currency.toUpperCase()}`,\n          startTime: tier.start_time,\n          endTime: tier.end_time,\n          level: tier.level,\n        })\n      })\n\n      let campaignClaimConfig = data.campaignClaimConfig || [];\n      campaignClaimConfig = campaignClaimConfig.map((claimConfig: any, index: number) => {\n        return {\n          ...claimConfig,\n          start_time_formated: convertUnixTimeToDateTime(claimConfig.start_time),\n          start_time_moment: moment(claimConfig.start_time),\n        }\n      });\n\n      console.log('data.campaignClaimConfig', data.campaignClaimConfig, campaignClaimConfig);\n\n      return {\n        method: data.buy_type,\n        startTime: data.start_join_pool_time,\n        token: data.token,\n        ethRate: data.purchasableCurrency === 'eth' ? data.ether_conversion_rate: data.token_conversion_rate,\n        type: data.pool_type,\n        amount: data.total_sold_coin,\n        website: data.website,\n        tokenDetails,\n        title: data.title,\n        buyLimit,\n        minimumBuy,\n        poolAddress: data.campaign_hash,\n        joinTime: data.start_join_pool_time,\n        endJoinTime: data.end_join_pool_time,\n        startBuyTime: data.start_time,\n        endBuyTime: data.finish_time,\n        purchasableCurrency: data.accept_currency,\n        id: data.id,\n        // banner: `${BASE_URL}/image/${data.token_images}`,\n        banner: data.token_images,\n        releaseTime: data.release_time,\n        networkAvailable: data.network_available,\n        networkIcon: data.network_available === 'eth' ? ETH_ICON: BSC_ICON,\n        minTier: data.min_tier,\n        isDeployed: data.is_deploy === 1,\n        isDisplay: data.is_display === 1,\n        addressReceiver: data.address_receiver,\n        description: data.description,\n        tiersWithDetails,\n        displayPriceRate: !!data.display_price_rate,\n        priceUsdt: new BigNumber(data.price_usdt).toFixed(),\n        campaignClaimConfig,\n        whitelistBannerSetting: data.whitelistBannerSetting,\n        isPrivate: data.is_private,\n      }\n    }\n\n    return;\n  }, [data, fetchPoolLoading, error, poolDetailDone, connectedAccountTier]);\n\n  useEffect(() => {\n    data && setPoolDetailDone(true);\n  }, [data]);\n\n  return  {\n    poolDetails,\n    loading: fetchPoolLoading || !poolDetailDone\n  }\n}\n\nexport default usePoolDetails;\n"]},"metadata":{},"sourceType":"module"}