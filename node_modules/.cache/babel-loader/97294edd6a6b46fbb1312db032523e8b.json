{"ast":null,"code":"// Copyright 2017-2021 @polkadot/ui-shared authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isU8a, stringToU8a } from '@polkadot/util';\nconst DIVISOR = 256 * 256;\nexport function seeder(_seed = new Uint8Array(32)) {\n  const seed = isU8a(_seed) ? _seed : stringToU8a(_seed);\n  let index = seed[Math.floor(seed.length / 2)] % seed.length - 1;\n\n  const next = () => {\n    index += 1;\n\n    if (index === seed.length) {\n      index = 0;\n    }\n\n    return seed[index];\n  };\n\n  return () => {\n    return (next() * 256 + next()) / DIVISOR;\n  };\n}","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/node_modules/@polkadot/ui-shared/icons/beachball/seeder.js"],"names":["isU8a","stringToU8a","DIVISOR","seeder","_seed","Uint8Array","seed","index","Math","floor","length","next"],"mappings":"AAAA;AACA;AACA,SAASA,KAAT,EAAgBC,WAAhB,QAAmC,gBAAnC;AACA,MAAMC,OAAO,GAAG,MAAM,GAAtB;AACA,OAAO,SAASC,MAAT,CAAgBC,KAAK,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAxB,EAA4C;AACjD,QAAMC,IAAI,GAAGN,KAAK,CAACI,KAAD,CAAL,GAAeA,KAAf,GAAuBH,WAAW,CAACG,KAAD,CAA/C;AACA,MAAIG,KAAK,GAAGD,IAAI,CAACE,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,MAAL,GAAc,CAAzB,CAAD,CAAJ,GAAoCJ,IAAI,CAACI,MAAzC,GAAkD,CAA9D;;AAEA,QAAMC,IAAI,GAAG,MAAM;AACjBJ,IAAAA,KAAK,IAAI,CAAT;;AAEA,QAAIA,KAAK,KAAKD,IAAI,CAACI,MAAnB,EAA2B;AACzBH,MAAAA,KAAK,GAAG,CAAR;AACD;;AAED,WAAOD,IAAI,CAACC,KAAD,CAAX;AACD,GARD;;AAUA,SAAO,MAAM;AACX,WAAO,CAACI,IAAI,KAAK,GAAT,GAAeA,IAAI,EAApB,IAA0BT,OAAjC;AACD,GAFD;AAGD","sourcesContent":["// Copyright 2017-2021 @polkadot/ui-shared authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isU8a, stringToU8a } from '@polkadot/util';\nconst DIVISOR = 256 * 256;\nexport function seeder(_seed = new Uint8Array(32)) {\n  const seed = isU8a(_seed) ? _seed : stringToU8a(_seed);\n  let index = seed[Math.floor(seed.length / 2)] % seed.length - 1;\n\n  const next = () => {\n    index += 1;\n\n    if (index === seed.length) {\n      index = 0;\n    }\n\n    return seed[index];\n  };\n\n  return () => {\n    return (next() * 256 + next()) / DIVISOR;\n  };\n}"]},"metadata":{},"sourceType":"module"}