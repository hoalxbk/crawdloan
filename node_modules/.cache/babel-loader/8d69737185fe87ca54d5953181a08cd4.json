{"ast":null,"code":"import configureStore from '../store/configureStore';\nimport { logout } from '../store/actions/user';\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\"; // const version = 9;\n// console.log('Version: ', version);\n\nexport class BaseRequest {\n  static getInstance() {\n    return new this();\n  }\n\n  getSignatureMessage(isInvestor = false) {\n    const msgSignature = MESSAGE_INVESTOR_SIGNATURE;\n    return msgSignature;\n  }\n\n  getHeader(isInvestor = false) {\n    const token = !isInvestor ? localStorage.getItem('access_token') : localStorage.getItem('investor_access_token');\n    return {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      Authorization: 'Bearer ' + token,\n      msgSignature: this.getSignatureMessage(isInvestor)\n    };\n  }\n\n  buildUrl(url) {\n    // remove both leading and trailing a slash\n    url = url.replace(/^\\/+|\\/+$/g, '');\n    return `${this.getUrlPrefix()}/${url}`;\n  }\n\n  getUrlPrefix() {\n    const BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://06a6fd781d2a.ngrok.io\";\n    return BASE_URL;\n  }\n\n  async post(url, data, isInvestor = false) {\n    let resObj;\n\n    try {\n      return fetch(this.buildUrl(url), {\n        method: \"POST\",\n        headers: this.getHeader(isInvestor),\n        body: JSON.stringify(data)\n      }).then(response => {\n        resObj = response.clone();\n        return response.json();\n      }).then(data => {\n        if (data.status && data.status === 401) {\n          if (data.message === 'Token Expired') {\n            configureStore().store.dispatch(logout(isInvestor));\n          }\n        }\n\n        return resObj;\n      });\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async postImage(url, data) {\n    try {\n      return fetch(this.buildUrl(url), {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        },\n        body: data\n      });\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async put(url, data) {\n    try {\n      return this._responseHandler(fetch(this.buildUrl(url), {\n        method: \"PUT\",\n        headers: this.getHeader(),\n        body: JSON.stringify(data)\n      }));\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async patch(url, data) {\n    try {\n      return this._responseHandler(fetch(this.buildUrl(url), {\n        method: \"PATH\",\n        headers: this.getHeader(),\n        body: JSON.stringify(data)\n      })).catch(e => console.log(e.message));\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async get(url, isInvestor = false) {\n    let resObj;\n\n    try {\n      return fetch(this.buildUrl(url), {\n        method: \"GET\",\n        headers: this.getHeader()\n      }).then(response => {\n        resObj = response.clone();\n        return response.json();\n      }).then(data => {\n        if (data.status && data.status === 401 && data.message === 'Token Expired') {\n          configureStore().store.dispatch(logout(isInvestor));\n        }\n\n        return resObj;\n      });\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async delete(url, data) {\n    try {\n      return this._responseHandler(fetch(this.buildUrl(url), {\n        method: \"DELETE\",\n        headers: this.getHeader(),\n        body: JSON.stringify(data)\n      }));\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async _responseHandler(response = {}) {\n    return response;\n  }\n\n}","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/request/Request.ts"],"names":["configureStore","logout","MESSAGE_INVESTOR_SIGNATURE","process","env","REACT_APP_MESSAGE_INVESTOR_SIGNATURE","BaseRequest","getInstance","getSignatureMessage","isInvestor","msgSignature","getHeader","token","localStorage","getItem","Accept","Authorization","buildUrl","url","replace","getUrlPrefix","BASE_URL","REACT_APP_API_BASE_URL","post","data","resObj","fetch","method","headers","body","JSON","stringify","then","response","clone","json","status","message","store","dispatch","e","postImage","put","_responseHandler","patch","catch","console","log","get","delete"],"mappings":"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","sourcesContent":["import configureStore from '../store/configureStore';\nimport { logout } from '../store/actions/user';\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\n// const version = 9;\n// console.log('Version: ', version);\n\nexport class BaseRequest {\n  static getInstance() {\n    return new this\n  }\n\n  getSignatureMessage(isInvestor: boolean = false) {\n    const msgSignature = MESSAGE_INVESTOR_SIGNATURE;\n    return msgSignature;\n  }\n\n  getHeader(isInvestor: boolean = false) {\n    const token = !isInvestor ? localStorage.getItem('access_token'): localStorage.getItem('investor_access_token');\n\n    return {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      Authorization: 'Bearer ' + token,\n      msgSignature: this.getSignatureMessage(isInvestor),\n    }\n  }\n\n  buildUrl(url: string) {\n    // remove both leading and trailing a slash\n    url = url.replace(/^\\/+|\\/+$/g, '')\n    return `${this.getUrlPrefix()}/${url}`\n  }\n\n  getUrlPrefix() {\n    const BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://06a6fd781d2a.ngrok.io\";\n    return BASE_URL;\n  }\n\n  async post(url: string, data: object, isInvestor: boolean = false) {\n    let resObj: Response;\n\n    try {\n      return fetch(this.buildUrl(url), {\n        method: \"POST\",\n        headers: this.getHeader(isInvestor),\n        body: JSON.stringify(data)\n      })\n      .then(response => {\n        resObj = response.clone();\n        return response.json();\n      })\n      .then(data => {\n        if (data.status && data.status === 401) {\n          if (data.message === 'Token Expired') {\n            configureStore().store.dispatch(logout(isInvestor));\n          }\n        }\n\n        return resObj;\n      });\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async postImage(url: string, data: FormData ) {\n    try {\n      return (fetch(this.buildUrl(url), {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n        },\n        body: data\n      }));\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async put(url: string, data: object) {\n    try {\n      return this._responseHandler(fetch(this.buildUrl(url), {\n        method: \"PUT\",\n        headers: this.getHeader(),\n        body: JSON.stringify(data)\n      }));\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async patch(url: string, data: object) {\n    try {\n      return this._responseHandler(fetch(this.buildUrl(url), {\n        method: \"PATH\",\n        headers: this.getHeader(),\n        body: JSON.stringify(data)\n      })).catch((e: any) => console.log(e.message));\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async get(url: string, isInvestor: boolean = false) {\n    let resObj: Response;\n\n    try {\n      return fetch(this.buildUrl(url), {\n        method: \"GET\",\n        headers: this.getHeader(),\n      })\n      .then(response => {\n        resObj = response.clone();\n        return response.json();\n      })\n      .then(data => {\n        if (data.status && data.status === 401 && data.message === 'Token Expired') {\n          configureStore().store.dispatch(logout(isInvestor));\n        }\n\n        return resObj;\n      });\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async delete(url: string,  data: object) {\n    try {\n      return this._responseHandler(fetch(this.buildUrl(url), {\n        method: \"DELETE\",\n        headers: this.getHeader(),\n        body: JSON.stringify(data)\n      }));\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async _responseHandler(response = {}) {\n    return response;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}