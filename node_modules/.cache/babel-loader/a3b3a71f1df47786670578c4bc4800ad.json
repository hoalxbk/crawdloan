{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createFilter } from 'redux-persist-transform-filter';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nconst initialState = {\n  user: {\n    data: '',\n    loading: false,\n    error: ''\n  }\n};\nconst middlewares = [thunk];\nconst userStateFilter = createFilter('user', ['data']);\nconst investorStateFilter = createFilter('investor', ['data']);\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: [],\n  whitelist: ['wallet', 'connector', 'appNetwork'],\n  transforms: [userStateFilter, investorStateFilter]\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nlet store = createStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware(...middlewares)));\nlet persistor = persistStore(store);\nexport default (() => {\n  return {\n    store,\n    persistor\n  };\n});","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/store/configureStore.ts"],"names":["createStore","applyMiddleware","persistStore","persistReducer","storage","composeWithDevTools","createFilter","thunk","rootReducer","initialState","user","data","loading","error","middlewares","userStateFilter","investorStateFilter","persistConfig","key","blacklist","whitelist","transforms","persistedReducer","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAAwD,eAAxD;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,WAAP,MAAuC,YAAvC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAE,EADF;AAEJC,IAAAA,OAAO,EAAE,KAFL;AAGJC,IAAAA,KAAK,EAAE;AAHH;AADa,CAArB;AAQA,MAAMC,WAAW,GAAG,CAACP,KAAD,CAApB;AAEA,MAAMQ,eAAe,GAAGT,YAAY,CAAC,MAAD,EAAS,CAAC,MAAD,CAAT,CAApC;AACA,MAAMU,mBAAmB,GAAGV,YAAY,CAAC,UAAD,EAAa,CAAC,MAAD,CAAb,CAAxC;AAEA,MAAMW,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBd,EAAAA,OAFoB;AAGpBe,EAAAA,SAAS,EAAE,EAHS;AAIpBC,EAAAA,SAAS,EAAE,CAAC,QAAD,EAAW,WAAX,EAAwB,YAAxB,CAJS;AAKpBC,EAAAA,UAAU,EAAE,CAACN,eAAD,EAAkBC,mBAAlB;AALQ,CAAtB;AAQA,MAAMM,gBAAgB,GAAGnB,cAAc,CAAYc,aAAZ,EAA2BT,WAA3B,CAAvC;AAEA,IAAIe,KAAK,GAAGvB,WAAW,CAACsB,gBAAD,EAAmBb,YAAnB,EAAiCJ,mBAAmB,CAACJ,eAAe,CAAC,GAAGa,WAAJ,CAAhB,CAApD,CAAvB;AACA,IAAIU,SAAS,GAAGtB,YAAY,CAACqB,KAAD,CAA5B;AAEA,gBAAe,MAAM;AACnB,SAAO;AAAEA,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD,CAFD","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer, Transform } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createFilter } from 'redux-persist-transform-filter';\nimport thunk from 'redux-thunk';\n\nimport rootReducer, { RootState } from './reducers';\n\nconst initialState = {\n  user: {\n    data: '',\n    loading: false,\n    error: '',\n  },\n};\n\nconst middlewares = [thunk];\n\nconst userStateFilter = createFilter('user', ['data']);\nconst investorStateFilter = createFilter('investor', ['data']);\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: [],\n  whitelist: ['wallet', 'connector', 'appNetwork'],\n  transforms: [userStateFilter, investorStateFilter]\n};\n\nconst persistedReducer = persistReducer<RootState>(persistConfig, rootReducer);\n\nlet store = createStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware(...middlewares)));\nlet persistor = persistStore(store);\n\nexport default () => {\n  return { store, persistor }\n}\n"]},"metadata":{},"sourceType":"module"}