{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useDispatch } from 'react-redux';\nimport { ethers } from 'ethers';\nimport { TRANSACTION_ERROR_MESSAGE } from '../constants/alert';\nimport { alertFailure } from '../store/actions/alert';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { ConnectorNames } from '../constants/connectors';\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\nconst rawMessage = MESSAGE_INVESTOR_SIGNATURE;\nconst rawMessageLength = new Blob([rawMessage]).size;\nconst message = ethers.utils.toUtf8Bytes(\"\\x19Ethereum Signed Message:\\n\" + rawMessageLength + rawMessage);\nconst messageHash = ethers.utils.keccak256(message);\nexport const getParamsWithConnector = connectedAccount => ({\n  [ConnectorNames.BSC]: {\n    method: 'eth_sign',\n    params: [connectedAccount, MESSAGE_INVESTOR_SIGNATURE]\n  },\n  [ConnectorNames.WalletConnect]: {\n    method: 'eth_sign',\n    params: [connectedAccount, MESSAGE_INVESTOR_SIGNATURE]\n  },\n  [ConnectorNames.WalletLinkConnect]: {\n    method: 'eth_sign',\n    params: [connectedAccount, MESSAGE_INVESTOR_SIGNATURE]\n  },\n  [ConnectorNames.Fortmatic]: {\n    method: 'personal_sign',\n    params: [MESSAGE_INVESTOR_SIGNATURE, connectedAccount]\n  },\n  [ConnectorNames.MetaMask]: {\n    method: 'personal_sign',\n    params: [MESSAGE_INVESTOR_SIGNATURE, connectedAccount]\n  }\n});\n\nconst useWalletSignature = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const connector = useTypedSelector(state => state.connector).data;\n  const {\n    library,\n    account: connectedAccount\n  } = useWeb3React();\n  const [error, setError] = useState(\"\");\n  const [signature, setSignature] = useState(\"\");\n  const signMessage = useCallback(async () => {\n    try {\n      if (connectedAccount && library && connector) {\n        const paramsWithConnector = getParamsWithConnector(connectedAccount)[connector];\n        const provider = library.provider;\n        setError(\"\");\n\n        if (connector === ConnectorNames.WalletConnect) {\n          const params = [connectedAccount, messageHash];\n          await library.provider.enable();\n          var signature = await library.provider.wc.signMessage(params);\n          signature && setSignature(signature);\n          console.log(signature);\n        } else if (connector === ConnectorNames.WalletLinkConnect) {\n          console.log('WalletLinkConnect Provider===========>', provider, ConnectorNames);\n          const params = [MESSAGE_INVESTOR_SIGNATURE, connectedAccount];\n          await library.provider.enable();\n          const wlProvider = library.provider;\n          console.log('wlProvider', wlProvider);\n          const signature = await wlProvider._personal_sign(params);\n          console.log('signature', signature);\n          signature && signature.result && setSignature(signature.result);\n        } else {\n          await provider.sendAsync({\n            method: paramsWithConnector.method,\n            params: paramsWithConnector.params\n          }, async function (err, result) {\n            if (err || result.error) {\n              const errMsg = err.message || err.error || result.error.message;\n              console.log('Error when signing message: ', errMsg);\n              dispatch(alertFailure(TRANSACTION_ERROR_MESSAGE));\n              setError(errMsg);\n            } else {\n              console.log(result.result);\n              result.result && setSignature(result.result);\n            }\n          });\n        }\n      }\n    } catch (err) {\n      console.log('[ERROR] - signMessage:', err);\n      dispatch(alertFailure(TRANSACTION_ERROR_MESSAGE));\n      setError(err.message);\n    }\n  }, [library, connector, connectedAccount]);\n  return {\n    signMessage,\n    signature,\n    setSignature,\n    error\n  };\n};\n\n_s(useWalletSignature, \"hc8miNVjhWitxdtDFg/uy00X7bk=\", false, function () {\n  return [useDispatch, useTypedSelector, useWeb3React];\n});\n\nexport default useWalletSignature;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useWalletSignature.ts"],"names":["useState","useCallback","useWeb3React","useDispatch","ethers","TRANSACTION_ERROR_MESSAGE","alertFailure","useTypedSelector","ConnectorNames","MESSAGE_INVESTOR_SIGNATURE","process","env","REACT_APP_MESSAGE_INVESTOR_SIGNATURE","rawMessage","rawMessageLength","Blob","size","message","utils","toUtf8Bytes","messageHash","keccak256","getParamsWithConnector","connectedAccount","BSC","method","params","WalletConnect","WalletLinkConnect","Fortmatic","MetaMask","useWalletSignature","dispatch","connector","state","data","library","account","error","setError","signature","setSignature","signMessage","paramsWithConnector","provider","enable","wc","console","log","wlProvider","_personal_sign","result","sendAsync","err","errMsg"],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useDispatch } from 'react-redux';\nimport { ethers } from 'ethers';\n\nimport { TRANSACTION_ERROR_MESSAGE } from '../constants/alert';\nimport { alertFailure } from '../store/actions/alert';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { ConnectorNames, connectorNames } from '../constants/connectors';\n\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst rawMessage = MESSAGE_INVESTOR_SIGNATURE;\nconst rawMessageLength = new Blob([rawMessage]).size\nconst message = ethers.utils.toUtf8Bytes(\"\\x19Ethereum Signed Message:\\n\" + rawMessageLength + rawMessage)\nconst messageHash = ethers.utils.keccak256(message);\n\nexport const getParamsWithConnector = (connectedAccount: string) => ({\n  [ConnectorNames.BSC]: {\n    method: 'eth_sign',\n    params: [connectedAccount, MESSAGE_INVESTOR_SIGNATURE]\n  },\n  [ConnectorNames.WalletConnect]: {\n    method: 'eth_sign',\n    params: [connectedAccount, MESSAGE_INVESTOR_SIGNATURE]\n  },\n  [ConnectorNames.WalletLinkConnect]: {\n    method: 'eth_sign',\n    params: [connectedAccount, MESSAGE_INVESTOR_SIGNATURE]\n  },\n  [ConnectorNames.Fortmatic]: {\n    method: 'personal_sign',\n    params: [MESSAGE_INVESTOR_SIGNATURE, connectedAccount]\n  },\n  [ConnectorNames.MetaMask]: {\n    method: 'personal_sign',\n    params: [MESSAGE_INVESTOR_SIGNATURE, connectedAccount]\n  },\n})\n\nconst useWalletSignature = () => {\n  const dispatch = useDispatch();\n  const connector = useTypedSelector(state => state.connector).data;\n  const { library, account: connectedAccount } = useWeb3React();\n  const [error, setError] = useState(\"\");\n  const [signature, setSignature] = useState(\"\");\n\n  const signMessage = useCallback(async () => {\n    try {\n      if (connectedAccount && library && connector) {\n        const paramsWithConnector = getParamsWithConnector(connectedAccount)[connector as connectorNames];\n        const provider = library.provider;\n\n        setError(\"\");\n\n        if (connector === ConnectorNames.WalletConnect) {\n          const params = [\n            connectedAccount,\n            messageHash\n          ]\n          await (library as any).provider.enable();\n\n          var signature = await (library as any).provider.wc.signMessage(params);\n          signature && setSignature(signature);\n          console.log(signature);\n        } else if (connector === ConnectorNames.WalletLinkConnect) {\n          console.log('WalletLinkConnect Provider===========>', provider, ConnectorNames);\n          const params = [\n            MESSAGE_INVESTOR_SIGNATURE,\n            connectedAccount,\n          ]\n          await (library as any).provider.enable();\n          const wlProvider = (library as any).provider;\n          console.log('wlProvider', wlProvider);\n\n          const signature = await wlProvider._personal_sign(params);\n          console.log('signature', signature);\n          signature && signature.result && setSignature(signature.result);\n        } else {\n          await (provider as any).sendAsync({\n            method: paramsWithConnector.method,\n            params: paramsWithConnector.params\n          }, async function(err: Error, result: any) {\n            if (err || result.error) {\n              const errMsg = (err.message || (err as any).error) || result.error.message\n              console.log('Error when signing message: ', errMsg);\n              dispatch(alertFailure(TRANSACTION_ERROR_MESSAGE));\n              setError(errMsg);\n            } else {\n              console.log(result.result);\n              result.result && setSignature(result.result);\n            }\n          })\n        }\n      }\n    } catch(err) {\n      console.log('[ERROR] - signMessage:', err);\n      dispatch(alertFailure(TRANSACTION_ERROR_MESSAGE));\n      setError(err.message);\n    }\n  }, [library, connector, connectedAccount]);\n\n  return {\n    signMessage,\n    signature,\n    setSignature,\n    error\n  }\n}\n\nexport default useWalletSignature;\n"]},"metadata":{},"sourceType":"module"}