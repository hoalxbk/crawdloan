{"ast":null,"code":"import { appNetworkActions } from '../constants/appNetwork';\nexport let NetworkUpdateType;\n\n(function (NetworkUpdateType) {\n  NetworkUpdateType[\"Wallet\"] = \"Wallet\";\n  NetworkUpdateType[\"App\"] = \"App\";\n  NetworkUpdateType[\"Connector\"] = \"Connector\";\n})(NetworkUpdateType || (NetworkUpdateType = {}));\n\nexport const settingAppNetwork = (networkType, updatedVal) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: appNetworkActions.APP_NETWORKS_SETTING_LOADING\n    });\n\n    try {\n      const {\n        appChainID,\n        walletChainID\n      } = getState().appNetwork.data;\n\n      if (networkType in NetworkUpdateType) {\n        const updatedNetworkData = {\n          appChainID: networkType === NetworkUpdateType.App ? updatedVal : appChainID,\n          walletChainID: networkType === NetworkUpdateType.Wallet ? updatedVal : walletChainID\n        };\n        dispatch({\n          type: appNetworkActions.APP_NETWORKS_SETTING_SUCCESS,\n          payload: updatedNetworkData\n        });\n      } else {\n        throw new Error(\"Wrong update network type!\");\n      }\n    } catch (error) {\n      dispatch({\n        type: appNetworkActions.APP_NETWORKS_SETTING_ERROR,\n        payload: error\n      });\n    }\n  };\n};\nexport const settingCurrentConnector = connectorName => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: appNetworkActions.CONNECTOR_SETTING_SUCCESS,\n        payload: connectorName\n      });\n    } catch (error) {\n      dispatch({\n        type: appNetworkActions.CONNECTOR_SETTING_ERROR,\n        payload: error\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/appNetwork.ts"],"names":["appNetworkActions","NetworkUpdateType","settingAppNetwork","networkType","updatedVal","dispatch","getState","type","APP_NETWORKS_SETTING_LOADING","appChainID","walletChainID","appNetwork","data","updatedNetworkData","App","Wallet","APP_NETWORKS_SETTING_SUCCESS","payload","Error","error","APP_NETWORKS_SETTING_ERROR","settingCurrentConnector","connectorName","CONNECTOR_SETTING_SUCCESS","CONNECTOR_SETTING_ERROR"],"mappings":"AACA,SAASA,iBAAT,QAAkC,yBAAlC;AAIA,WAAYC,iBAAZ;;WAAYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAMZ,OAAO,MAAMC,iBAAiB,GAAG,CAACC,WAAD,EAAsBC,UAAtB,KAAyD;AACxF,SAAO,OAAOC,QAAP,EAAmDC,QAAnD,KAA2E;AAChFD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEP,iBAAiB,CAACQ;AAA1B,KAAD,CAAR;;AAEA,QAAI;AACF,YAAM;AAAEC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAAgCJ,QAAQ,GAAGK,UAAX,CAAsBC,IAA5D;;AAEA,UAAIT,WAAW,IAAIF,iBAAnB,EAAsC;AACpC,cAAMY,kBAAkB,GAAG;AACzBJ,UAAAA,UAAU,EAAEN,WAAW,KAAKF,iBAAiB,CAACa,GAAlC,GAAwCV,UAAxC,GAAoDK,UADvC;AAEzBC,UAAAA,aAAa,EAAEP,WAAW,KAAKF,iBAAiB,CAACc,MAAlC,GAA2CX,UAA3C,GAAuDM;AAF7C,SAA3B;AAKAL,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAEP,iBAAiB,CAACgB,4BADjB;AAEPC,UAAAA,OAAO,EAAEJ;AAFF,SAAD,CAAR;AAID,OAVD,MAUO;AACL,cAAM,IAAIK,KAAJ,CAAU,4BAAV,CAAN;AACD;AAEF,KAjBD,CAiBE,OAAOC,KAAP,EAAc;AACdd,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEP,iBAAiB,CAACoB,0BADjB;AAEPH,QAAAA,OAAO,EAAEE;AAFF,OAAD,CAAR;AAID;AACF,GA1BD;AA2BD,CA5BM;AA8BP,OAAO,MAAME,uBAAuB,GAAIC,aAAD,IAAuC;AAC5E,SAAO,MAAOjB,QAAP,IAAsD;AAC3D,QAAI;AACFA,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEP,iBAAiB,CAACuB,yBADjB;AAEPN,QAAAA,OAAO,EAAEK;AAFF,OAAD,CAAR;AAID,KALD,CAKE,OAAOH,KAAP,EAAc;AACdd,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEP,iBAAiB,CAACwB,uBADjB;AAEPP,QAAAA,OAAO,EAAEE;AAFF,OAAD,CAAR;AAID;AACF,GAZD;AAaD,CAdM","sourcesContent":["import { ConnectorNames } from '../../constants/connectors';\nimport { appNetworkActions } from '../constants/appNetwork';\nimport { AnyAction } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nexport enum NetworkUpdateType {\n  Wallet = \"Wallet\",\n  App = \"App\",\n  Connector = \"Connector\"\n} \n\nexport const settingAppNetwork = (networkType: string, updatedVal: string | undefined) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: appNetworkActions.APP_NETWORKS_SETTING_LOADING });\n\n    try {\n      const { appChainID, walletChainID } = getState().appNetwork.data;\n\n      if (networkType in NetworkUpdateType) {\n        const updatedNetworkData = {\n          appChainID: networkType === NetworkUpdateType.App ? updatedVal: appChainID,\n          walletChainID: networkType === NetworkUpdateType.Wallet ? updatedVal: walletChainID,\n        }\n\n        dispatch({\n          type: appNetworkActions.APP_NETWORKS_SETTING_SUCCESS,\n          payload: updatedNetworkData\n        })\n      } else {\n        throw new Error(\"Wrong update network type!\");\n      }\n\n    } catch (error) {\n      dispatch({\n        type: appNetworkActions.APP_NETWORKS_SETTING_ERROR,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const settingCurrentConnector = (connectorName: string | undefined) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n    try {\n      dispatch({ \n        type: appNetworkActions.CONNECTOR_SETTING_SUCCESS,\n        payload: connectorName \n      })\n    } catch (error) {\n      dispatch({\n        type: appNetworkActions.CONNECTOR_SETTING_ERROR,\n        payload: error\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}