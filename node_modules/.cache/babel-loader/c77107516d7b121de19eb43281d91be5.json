{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { PoolStatus } from \"./getPoolStatus\";\nimport { BUY_TYPE, POOL_TYPE } from \"../constants\";\nexport const getPoolStatusByPoolDetail = async (poolDetails, tokenSold) => {\n  const startBuyTimeField = () => {\n    return (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.startBuyTime) || (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.start_time);\n  };\n\n  const endBuyTimeField = () => {\n    return (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.endBuyTime) || (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.finish_time);\n  };\n\n  const startJoinTimeField = () => {\n    return (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.joinTime) || (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.start_join_pool_time);\n  };\n\n  const endJoinTimeField = () => {\n    return (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.endJoinTime) || (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.end_join_pool_time);\n  };\n\n  const releaseTimeField = () => {\n    return (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.releaseTime) || (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.release_time);\n  };\n\n  const amountField = () => {\n    return (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.amount) || (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.total_sold_coin);\n  };\n\n  const poolTypeField = () => {\n    return (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.type) || (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.pool_type);\n  };\n\n  const buyTypeField = () => {\n    return (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.method) || (poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.buy_type);\n  };\n\n  const startBuyTime = startBuyTimeField() ? new Date(Number(startBuyTimeField()) * 1000) : undefined;\n  const endBuyTime = endBuyTimeField() ? new Date(Number(endBuyTimeField()) * 1000) : undefined;\n  const startJoinTime = startJoinTimeField() ? new Date(Number(startJoinTimeField()) * 1000) : undefined;\n  const endJoinTime = endJoinTimeField() ? new Date(Number(endJoinTimeField()) * 1000) : undefined;\n  const releaseTime = releaseTimeField() ? new Date(Number(releaseTimeField()) * 1000) : undefined;\n  const isClaimable = poolTypeField() !== POOL_TYPE.SWAP;\n  const buyType = buyTypeField();\n  const soldProgress = new BigNumber(tokenSold).div(amountField() || 1).toFixed();\n  const today = new Date().getTime();\n  const requiredReleaseTime = isClaimable ? !releaseTime : false;\n\n  if ((!startJoinTime || !endJoinTime) && buyType === BUY_TYPE.WHITELIST_LOTTERY) {\n    return PoolStatus.TBA;\n  }\n\n  if ((!startBuyTime || !endBuyTime) && buyType === BUY_TYPE.FCFS) {\n    return PoolStatus.TBA;\n  }\n\n  if (startJoinTime && today < startJoinTime.getTime()) {\n    return PoolStatus.Upcoming;\n  }\n\n  if (startJoinTime && endJoinTime && today > startJoinTime.getTime() && today < endJoinTime.getTime()) {\n    return PoolStatus.Joining;\n  }\n\n  if (endJoinTime && startBuyTime && today > endJoinTime.getTime() && today < startBuyTime.getTime()) {\n    return PoolStatus.Upcoming;\n  }\n\n  if (startBuyTime && endBuyTime && today > startBuyTime.getTime() && today < endBuyTime.getTime()) {\n    return new BigNumber(soldProgress || 0).multipliedBy(100).gte(99) ? PoolStatus.Filled : PoolStatus.Progress;\n  }\n\n  if (releaseTime && today > releaseTime.getTime() && isClaimable) {\n    return PoolStatus.Claimable;\n  }\n\n  if (endBuyTime && today > (endBuyTime === null || endBuyTime === void 0 ? void 0 : endBuyTime.getTime())) {\n    return PoolStatus.Closed;\n  }\n\n  return PoolStatus.Upcoming;\n};","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/getPoolStatusByPoolDetail.ts"],"names":["BigNumber","PoolStatus","BUY_TYPE","POOL_TYPE","getPoolStatusByPoolDetail","poolDetails","tokenSold","startBuyTimeField","startBuyTime","start_time","endBuyTimeField","endBuyTime","finish_time","startJoinTimeField","joinTime","start_join_pool_time","endJoinTimeField","endJoinTime","end_join_pool_time","releaseTimeField","releaseTime","release_time","amountField","amount","total_sold_coin","poolTypeField","type","pool_type","buyTypeField","method","buy_type","Date","Number","undefined","startJoinTime","isClaimable","SWAP","buyType","soldProgress","div","toFixed","today","getTime","requiredReleaseTime","WHITELIST_LOTTERY","TBA","FCFS","Upcoming","Joining","multipliedBy","gte","Filled","Progress","Claimable","Closed"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\nimport {PoolStatus} from \"./getPoolStatus\";\nimport {BUY_TYPE, POOL_TYPE} from \"../constants\";\n\nexport const getPoolStatusByPoolDetail = async (\n  // startJoinTime: Date | undefined,\n  // endJoinTime: Date | undefined,\n  // startBuyTime: Date | undefined,\n  // endBuyTime: Date | undefined,\n  // releaseTime: Date | undefined,\n  // soldProgress: string | undefined,\n  // isClaimable: boolean | undefined,\n  // poolType: string | undefined\n  poolDetails: any,\n  tokenSold: any,\n) => {\n  const startBuyTimeField = () => {\n    return poolDetails?.startBuyTime || poolDetails?.start_time;\n  };\n  const endBuyTimeField = () => {\n    return poolDetails?.endBuyTime || poolDetails?.finish_time;\n  };\n  const startJoinTimeField = () => {\n    return poolDetails?.joinTime || poolDetails?.start_join_pool_time;\n  };\n  const endJoinTimeField = () => {\n    return poolDetails?.endJoinTime || poolDetails?.end_join_pool_time;\n  };\n  const releaseTimeField = () => {\n    return poolDetails?.releaseTime || poolDetails?.release_time;\n  };\n  const amountField = () => {\n    return poolDetails?.amount || poolDetails?.total_sold_coin;\n  };\n  const poolTypeField = () => {\n    return poolDetails?.type || poolDetails?.pool_type;\n  };\n  const buyTypeField = () => {\n    return poolDetails?.method || poolDetails?.buy_type;\n  };\n\n  const startBuyTime = startBuyTimeField() ? new Date(Number(startBuyTimeField()) * 1000): undefined;\n  const endBuyTime = endBuyTimeField() ? new Date(Number(endBuyTimeField()) * 1000): undefined;\n  const startJoinTime = startJoinTimeField() ? new Date(Number(startJoinTimeField()) * 1000): undefined;\n  const endJoinTime = endJoinTimeField() ? new Date(Number(endJoinTimeField()) * 1000): undefined;\n  const releaseTime = releaseTimeField() ? new Date(Number(releaseTimeField()) * 1000): undefined;\n  const isClaimable = poolTypeField() !== POOL_TYPE.SWAP;\n  const buyType = buyTypeField();\n\n  const soldProgress = new BigNumber(tokenSold).div(amountField() || 1).toFixed();\n  const today = new Date().getTime();\n  const requiredReleaseTime = isClaimable ? !releaseTime: false;\n\n  if ((!startJoinTime || !endJoinTime) && buyType === BUY_TYPE.WHITELIST_LOTTERY) {\n    return PoolStatus.TBA;\n  }\n\n  if ((!startBuyTime || !endBuyTime) && buyType === BUY_TYPE.FCFS) {\n    return PoolStatus.TBA;\n  }\n\n  if (startJoinTime && today < startJoinTime.getTime()) {\n    return PoolStatus.Upcoming;\n  }\n\n  if (startJoinTime && endJoinTime && today > startJoinTime.getTime() && today < endJoinTime.getTime()) {\n    return PoolStatus.Joining;\n  }\n\n  if (endJoinTime && startBuyTime && today > endJoinTime.getTime() && today < startBuyTime.getTime()) {\n    return PoolStatus.Upcoming;\n  }\n\n  if (\n    startBuyTime\n    && endBuyTime\n    && today > startBuyTime.getTime()\n    && today < endBuyTime.getTime()\n  ) {\n    return new BigNumber(soldProgress || 0).multipliedBy(100).gte(99) ?  PoolStatus.Filled: PoolStatus.Progress;\n  }\n\n  if (releaseTime && today > releaseTime.getTime() && isClaimable) {\n    return PoolStatus.Claimable;\n  }\n\n  if (endBuyTime && today > endBuyTime?.getTime()) {\n    return PoolStatus.Closed;\n  }\n\n  return PoolStatus.Upcoming;\n}\n"]},"metadata":{},"sourceType":"module"}