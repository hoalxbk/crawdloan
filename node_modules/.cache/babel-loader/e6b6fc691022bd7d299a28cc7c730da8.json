{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { UnsupportedChainIdError, useWeb3React } from '@web3-react/core';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport BigNumber from 'bignumber.js';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { useTypedSelector } from '../../../../hooks/useTypedSelector';\nimport { ConnectorNames } from '../../../../constants/connectors';\nimport { APP_NETWORKS_ID, ETH_CHAIN_ID, BSC_CHAIN_ID, ChainIdNameMapping, NETWORK_NAME_MAPPINGS } from '../../../../constants/network';\nimport { requestSupportNetwork } from '../../../../utils/setupNetwork';\nimport { getAppNetworkName } from '../../../../utils/network/getAppNetworkName';\nimport { connectWalletSuccess, disconnectWallet } from '../../../../store/actions/wallet';\nimport getAccountBalance from '../../../../utils/getAccountBalance';\nimport { settingAppNetwork, NetworkUpdateType, settingCurrentConnector } from '../../../../store/actions/appNetwork';\nimport { alertFailure } from \"../../../../store/actions/alert\";\n\nconst useProviderConnect = (setOpenConnectDialog, openConnectDialog, binanceAvailable) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    appChainID,\n    walletChainID\n  } = useTypedSelector(state => state.appNetwork).data;\n  const [account, setAccount] = useState(undefined);\n  const [appNetworkLoading, setAppNetworkLoading] = useState(false);\n  const [walletNameSuccess, setWalletNameSuccess] = useState(undefined);\n  const [walletName, setWalletName] = useState([]);\n  const [currentConnector, setCurrentConnector] = useState(undefined);\n  const [connectWalletLoading, setConnectWalletLoading] = useState(false);\n  const [loginError, setLoginError] = useState('');\n  const {\n    activate,\n    active,\n    connector,\n    chainId,\n    error,\n    account: connectedAccount,\n    deactivate\n  } = useWeb3React();\n  const previousAccount = usePrevious(account);\n  const activePrevious = usePrevious(active);\n  const previousConnector = usePrevious(connector);\n  useEffect(() => {\n    if (connectWalletLoading && (active && !activePrevious || connector && connector !== previousConnector && !error)) {\n      setConnectWalletLoading(false);\n      setOpenConnectDialog && setOpenConnectDialog(false);\n    }\n  }, [active, connector, error, previousAccount, previousConnector, activePrevious, connectWalletLoading, setOpenConnectDialog, setConnectWalletLoading]);\n  useEffect(() => {\n    const handleWeb3ReactUpdate = updated => {\n      if (updated.account) {\n        if (updated.account) {\n          setAccount(updated.account);\n        } else setAccount(undefined);\n      }\n\n      if (updated.chainId) {\n        const chainId = Number(updated.chainId).toString();\n\n        if (APP_NETWORKS_ID.indexOf(chainId.toString()) >= 0) {// dispatch(\n          //   settingAppNetwork(\n          //   NetworkUpdateType.App,\n          //   APP_NETWORKS_ID[APP_NETWORKS_ID.indexOf(chainId.toString())] as string\n          // ));\n        }\n\n        chainId && dispatch(settingAppNetwork(NetworkUpdateType.Wallet, chainId.toString()));\n      }\n    };\n\n    const handleWeb3ReactError = err => {\n      if (err === 'NaN ChainId') {\n        dispatch(settingAppNetwork(NetworkUpdateType.Wallet, undefined));\n        setLoginError(`App network (${appChainID}) doesn't mach to network selected in wallet: NaN. Learn how to change network in wallet or`);\n      }\n    };\n\n    if (currentConnector && !active && !error) {\n      currentConnector.on('Web3ReactUpdate', handleWeb3ReactUpdate);\n      currentConnector.on('Web3ReactError', handleWeb3ReactError);\n      currentConnector.on('Web3ReactDeactivate', handleConnectorDisconnect);\n    }\n\n    return () => {\n      if (currentConnector && currentConnector.removeListener) {\n        currentConnector.removeListener('Web3ReactUpdate', handleWeb3ReactUpdate);\n        currentConnector.removeListener('Web3ReactError', handleWeb3ReactError);\n        currentConnector.removeListener('Web3ReactDeactivate', handleConnectorDisconnect);\n      }\n    };\n  }, [currentConnector, connectedAccount]);\n  useEffect(() => {\n    currentConnector && setAppNetworkLoading(true);\n  }, [appChainID]); // UseEffect for watching change app network loading\n\n  useEffect(() => {\n    if (!appNetworkLoading) {\n      setOpenConnectDialog && setOpenConnectDialog(false);\n      setConnectWalletLoading(false);\n    }\n  }, [appNetworkLoading]); // UseEffect for trying login after fullfilled app chain id and connector\n\n  useEffect(() => {\n    const tryLoginAfterSwitch = async () => {\n      currentConnector && appChainID && (appChainID === BSC_CHAIN_ID && binanceAvailable || appChainID === ETH_CHAIN_ID) && (await tryActivate(currentConnector, appChainID, walletName[walletName.length - 1]));\n    };\n\n    currentConnector && appChainID && walletName.length > 0 && tryLoginAfterSwitch();\n  }, [currentConnector, appChainID, walletName, binanceAvailable]);\n  useEffect(() => {\n    walletChainID && !openConnectDialog && !appNetworkLoading && switchNetwork(appChainID, walletChainID);\n  }, [walletChainID, appNetworkLoading, appChainID, openConnectDialog]); // UseEffect for setting wallet id after login success\n\n  useEffect(() => {\n    if (!connectWalletLoading) {\n      chainId && dispatch(settingAppNetwork(NetworkUpdateType.Wallet, chainId.toString()));\n      connectedAccount && setAccount(connectedAccount);\n    }\n  }, [connectWalletLoading, connectedAccount, chainId]); // Handle Provider choose\n\n  const handleProviderChosen = (name, connector) => {\n    console.log('Wallet Connected: ', name);\n    setCurrentConnector(connector);\n    walletName.indexOf(name) < 0 && setWalletName([...walletName, name]);\n  };\n\n  const switchNetwork = (appChainID, walletChainID) => {\n    if (appChainID && walletChainID) {\n      Number(appChainID) !== Number(walletChainID) ? setLoginError(`App network (${getAppNetworkName(appChainID)}) doesn't mach to network selected in wallet: ${ChainIdNameMapping[Number(walletChainID)]}.`) : setLoginError('');\n      currentConnector && activate(currentConnector, undefined, true).catch(err => console.log('Fail when switch between network:', err.message));\n    }\n\n    return;\n  };\n\n  const tryActivate = useCallback(async (connector, appChainID, wallet) => {\n    try {\n      if (!connectWalletLoading) {\n        var _connector$walletConn, _connector$walletConn2;\n\n        setConnectWalletLoading(true);\n\n        if (wallet === ConnectorNames.MetaMask || wallet === ConnectorNames.BSC) {\n          await requestSupportNetwork(appChainID, wallet);\n        }\n\n        if (connector instanceof WalletConnectConnector && ((_connector$walletConn = connector.walletConnectProvider) === null || _connector$walletConn === void 0 ? void 0 : (_connector$walletConn2 = _connector$walletConn.wc) === null || _connector$walletConn2 === void 0 ? void 0 : _connector$walletConn2.uri)) {\n          connector.walletConnectProvider = undefined;\n        }\n\n        if (connector && walletName) {\n          if (wallet === ConnectorNames.Fortmatic) {\n            connector.on(\"OVERLAY_READY\", () => {\n              setOpenConnectDialog && setOpenConnectDialog(false);\n            });\n          }\n\n          await activate(connector, undefined, true).then(() => {\n            dispatch(settingCurrentConnector(wallet));\n            setWalletNameSuccess(wallet);\n          }).catch(async error => {\n            if (error instanceof UnsupportedChainIdError) {\n              console.debug('Error when activate: ', error.message);\n              dispatch(disconnectWallet());\n              setCurrentConnector(undefined);\n              setConnectWalletLoading(false);\n              setWalletName([]);\n              localStorage.removeItem('walletconnect'); // await activate(connector);\n\n              const currentChainId = await (connector === null || connector === void 0 ? void 0 : connector.getChainId()); // const b = connector?.supportedChainIds;\n\n              dispatch(alertFailure(`App network (${NETWORK_NAME_MAPPINGS[appChainID]}) doesn\\'t mach to network selected in wallet: ${NETWORK_NAME_MAPPINGS[currentChainId]}. Please change network in wallet  or  change app network.`));\n              return;\n            } else {\n              dispatch(disconnectWallet());\n              setConnectWalletLoading(false);\n              setWalletName(walletName.filter(name => wallet !== name));\n              console.debug('Error when try to activate: ', error.message);\n              return;\n            }\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error.message);\n      setLoginError(error.message);\n      setCurrentConnector(undefined);\n    }\n\n    setAppNetworkLoading(false);\n  }, [connector, appChainID, walletName]);\n  useEffect(() => {\n    const getAccountDetails = async () => {\n      if (appChainID && connectedAccount && walletNameSuccess) {\n        const accountBalance = await getAccountBalance(appChainID, walletChainID, connectedAccount, walletNameSuccess);\n        dispatch(connectWalletSuccess(walletNameSuccess, [connectedAccount], {\n          [connectedAccount]: new BigNumber(accountBalance._hex).div(new BigNumber(10).pow(18)).toFixed(5)\n        }));\n        setConnectWalletLoading(false);\n      }\n    };\n\n    getAccountDetails();\n  }, [walletNameSuccess, connectedAccount, appChainID, walletChainID]);\n  const handleConnectorDisconnect = useCallback(() => {\n    dispatch(disconnectWallet());\n    dispatch(settingCurrentConnector(undefined));\n    dispatch(settingAppNetwork(NetworkUpdateType.Wallet, undefined));\n    localStorage.removeItem(\"walletconnect\");\n    deactivate();\n    setAccount(undefined);\n    setWalletName([]);\n    setWalletNameSuccess(undefined);\n    setCurrentConnector(undefined);\n    setConnectWalletLoading(false);\n    setLoginError('');\n  }, []);\n  return {\n    handleProviderChosen,\n    setWalletName,\n    walletName,\n    connectWalletLoading,\n    walletNameSuccess,\n    loginError,\n    currentConnector,\n    appNetworkLoading,\n    handleConnectorDisconnect\n  };\n};\n\n_s(useProviderConnect, \"wVnAAf591813hFiPjAuwUpmAMrk=\", false, function () {\n  return [useDispatch, useTypedSelector, useWeb3React, usePrevious, usePrevious, usePrevious];\n});\n\nexport default useProviderConnect;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/hooks/useProviderConnect.ts"],"names":["useState","useEffect","useCallback","useDispatch","UnsupportedChainIdError","useWeb3React","WalletConnectConnector","BigNumber","usePrevious","useTypedSelector","ConnectorNames","APP_NETWORKS_ID","ETH_CHAIN_ID","BSC_CHAIN_ID","ChainIdNameMapping","NETWORK_NAME_MAPPINGS","requestSupportNetwork","getAppNetworkName","connectWalletSuccess","disconnectWallet","getAccountBalance","settingAppNetwork","NetworkUpdateType","settingCurrentConnector","alertFailure","useProviderConnect","setOpenConnectDialog","openConnectDialog","binanceAvailable","dispatch","appChainID","walletChainID","state","appNetwork","data","account","setAccount","undefined","appNetworkLoading","setAppNetworkLoading","walletNameSuccess","setWalletNameSuccess","walletName","setWalletName","currentConnector","setCurrentConnector","connectWalletLoading","setConnectWalletLoading","loginError","setLoginError","activate","active","connector","chainId","error","connectedAccount","deactivate","previousAccount","activePrevious","previousConnector","handleWeb3ReactUpdate","updated","Number","toString","indexOf","Wallet","handleWeb3ReactError","err","on","handleConnectorDisconnect","removeListener","tryLoginAfterSwitch","tryActivate","length","switchNetwork","handleProviderChosen","name","console","log","catch","message","wallet","MetaMask","BSC","walletConnectProvider","wc","uri","Fortmatic","then","debug","localStorage","removeItem","currentChainId","getChainId","filter","getAccountDetails","accountBalance","_hex","div","pow","toFixed"],"mappings":"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","sourcesContent":["import {useState, useEffect, SetStateAction, Dispatch, useCallback, useContext} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { UnsupportedChainIdError, useWeb3React } from '@web3-react/core';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport BigNumber from 'bignumber.js';\n\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { useTypedSelector } from '../../../../hooks/useTypedSelector';\nimport { ConnectorNames } from '../../../../constants/connectors';\nimport {\n  APP_NETWORKS_ID,\n  ETH_CHAIN_ID,\n  BSC_CHAIN_ID,\n  ChainIdNameMapping,\n  chainId,\n  NETWORK_NAME_MAPPINGS\n} from '../../../../constants/network';\nimport { requestSupportNetwork } from '../../../../utils/setupNetwork';\nimport { getAppNetworkName } from '../../../../utils/network/getAppNetworkName';\nimport { connectWalletSuccess, disconnectWallet } from '../../../../store/actions/wallet';\nimport getAccountBalance from '../../../../utils/getAccountBalance';\n\nimport { settingAppNetwork, NetworkUpdateType, settingCurrentConnector } from '../../../../store/actions/appNetwork';\nimport {alertFailure} from \"../../../../store/actions/alert\";\n\nconst useProviderConnect = (\n  setOpenConnectDialog?: Dispatch<SetStateAction<boolean>>,\n  openConnectDialog?: boolean,\n  binanceAvailable?: boolean\n) => {\n  const dispatch = useDispatch();\n\n  const { appChainID, walletChainID } = useTypedSelector(state => state.appNetwork).data;\n\n  const [account, setAccount] = useState<string | undefined>(undefined);\n\n  const [appNetworkLoading, setAppNetworkLoading] = useState(false);\n  const [walletNameSuccess, setWalletNameSuccess] = useState<string | undefined>(undefined);\n  const [walletName, setWalletName] = useState<(undefined | string)[]>([]);\n  const [currentConnector, setCurrentConnector] = useState<undefined | AbstractConnector>(undefined);\n  const [connectWalletLoading, setConnectWalletLoading] = useState(false);\n  const [loginError, setLoginError] = useState('');\n\n  const {activate, active, connector, chainId, error, account: connectedAccount, deactivate } = useWeb3React();\n\n  const previousAccount = usePrevious(account);\n  const activePrevious = usePrevious(active);\n  const previousConnector = usePrevious(connector);\n\n  useEffect(() => {\n      if (connectWalletLoading && ((active && !activePrevious) || (connector && connector !== previousConnector && !error))) {\n        setConnectWalletLoading(false);\n        setOpenConnectDialog && setOpenConnectDialog(false);\n      }\n    }, [\n      active,\n      connector,\n      error,\n      previousAccount,\n      previousConnector,\n      activePrevious,\n      connectWalletLoading,\n      setOpenConnectDialog,\n      setConnectWalletLoading\n  ]);\n\n   useEffect(() => {\n    const handleWeb3ReactUpdate = (updated: any) => {\n      if (updated.account) {\n        if (updated.account) {\n          setAccount(updated.account);\n        } else setAccount(undefined);\n      }\n\n      if (updated.chainId) {\n        const chainId = Number(updated.chainId).toString();\n\n        if (APP_NETWORKS_ID.indexOf(chainId.toString()) >= 0) {\n          // dispatch(\n          //   settingAppNetwork(\n          //   NetworkUpdateType.App,\n          //   APP_NETWORKS_ID[APP_NETWORKS_ID.indexOf(chainId.toString())] as string\n          // ));\n        }\n\n        chainId && dispatch(settingAppNetwork(NetworkUpdateType.Wallet, chainId.toString()))\n      }\n    }\n\n    const handleWeb3ReactError = (err: any) => {\n      if (err === 'NaN ChainId') {\n        dispatch(settingAppNetwork(NetworkUpdateType.Wallet, undefined));\n        setLoginError(`App network (${appChainID}) doesn't mach to network selected in wallet: NaN. Learn how to change network in wallet or`);\n      }\n    }\n\n    if (currentConnector && !active && !error) {\n      currentConnector.on('Web3ReactUpdate', handleWeb3ReactUpdate)\n      currentConnector.on('Web3ReactError', handleWeb3ReactError);\n      currentConnector.on('Web3ReactDeactivate', handleConnectorDisconnect);\n    }\n\n    return () => {\n      if (currentConnector && currentConnector.removeListener) {\n        currentConnector.removeListener('Web3ReactUpdate', handleWeb3ReactUpdate);\n        currentConnector.removeListener('Web3ReactError', handleWeb3ReactError);\n        currentConnector.removeListener('Web3ReactDeactivate', handleConnectorDisconnect);\n      }\n    }\n  }, [currentConnector, connectedAccount]);\n\n  useEffect(() => {\n    currentConnector && setAppNetworkLoading(true);\n  }, [appChainID]);\n\n  // UseEffect for watching change app network loading\n  useEffect(() => {\n    if (!appNetworkLoading) {\n      setOpenConnectDialog && setOpenConnectDialog(false);\n      setConnectWalletLoading(false);\n    }\n  }, [appNetworkLoading]);\n\n  // UseEffect for trying login after fullfilled app chain id and connector\n   useEffect(() => {\n      const tryLoginAfterSwitch = async () => {\n        currentConnector\n        && appChainID\n        && ((appChainID === BSC_CHAIN_ID && binanceAvailable) || appChainID === ETH_CHAIN_ID)\n        && await tryActivate(currentConnector, appChainID, walletName[walletName.length - 1] as string);\n      }\n\n      currentConnector && appChainID && walletName.length > 0 && tryLoginAfterSwitch();\n    }, [currentConnector, appChainID, walletName, binanceAvailable]);\n\n    useEffect(() => {\n      walletChainID && !openConnectDialog && !appNetworkLoading && switchNetwork(appChainID, walletChainID);\n    }, [walletChainID, appNetworkLoading, appChainID, openConnectDialog]);\n\n    // UseEffect for setting wallet id after login success\n    useEffect(() => {\n      if (!connectWalletLoading) {\n        chainId && dispatch(settingAppNetwork(NetworkUpdateType.Wallet, chainId.toString()));\n        connectedAccount && setAccount(connectedAccount);\n      }\n    }, [connectWalletLoading, connectedAccount, chainId])\n\n    // Handle Provider choose\n    const handleProviderChosen = (name: string, connector: AbstractConnector) => {\n      console.log('Wallet Connected: ', name);\n      setCurrentConnector(connector);\n      walletName.indexOf(name) < 0 && setWalletName([...walletName, name]);\n    }\n\n  const switchNetwork = (appChainID: string, walletChainID: string) => {\n    if (appChainID && walletChainID) {\n      Number(appChainID) !== Number(walletChainID) ?\n        setLoginError(`App network (${getAppNetworkName(appChainID)}) doesn't mach to network selected in wallet: ${ChainIdNameMapping[Number(walletChainID) as chainId]}.`) : setLoginError('');\n      currentConnector && activate(currentConnector, undefined, true).catch(err =>\n        console.log('Fail when switch between network:', err.message)\n      );\n    }\n\n    return;\n  }\n\n\n\n\n\n  const tryActivate = useCallback(async (connector: AbstractConnector, appChainID: string, wallet: string) => {\n      try {\n        if (!connectWalletLoading) {\n          setConnectWalletLoading(true);\n\n          if (wallet === ConnectorNames.MetaMask || wallet === ConnectorNames.BSC) {\n            await requestSupportNetwork(appChainID, wallet);\n          }\n\n          if (connector instanceof WalletConnectConnector && connector.walletConnectProvider?.wc?.uri) {\n            connector.walletConnectProvider = undefined;\n          }\n\n          if (connector && walletName) {\n            if (wallet === ConnectorNames.Fortmatic) {\n              connector.on(\"OVERLAY_READY\", () => {\n                setOpenConnectDialog && setOpenConnectDialog(false);\n              });\n            }\n\n            await activate(connector, undefined, true)\n            .then(() => {\n              dispatch(settingCurrentConnector(wallet));\n              setWalletNameSuccess(wallet);\n            })\n            .catch(async error => {\n\n              if (error instanceof UnsupportedChainIdError) {\n                console.debug('Error when activate: ', error.message);\n                dispatch(disconnectWallet());\n                setCurrentConnector(undefined);\n                setConnectWalletLoading(false);\n                setWalletName([]);\n                localStorage.removeItem('walletconnect');\n\n                // await activate(connector);\n                const currentChainId = await connector?.getChainId();\n                // const b = connector?.supportedChainIds;\n\n                dispatch(alertFailure(`App network (${NETWORK_NAME_MAPPINGS[appChainID]}) doesn\\'t mach to network selected in wallet: ${NETWORK_NAME_MAPPINGS[currentChainId]}. Please change network in wallet  or  change app network.`));\n\n                return;\n              } else {\n                dispatch(disconnectWallet());\n                setConnectWalletLoading(false);\n                setWalletName(walletName.filter(name => wallet !== name));\n                console.debug('Error when try to activate: ', error.message);\n                return;\n              }\n            })\n          }\n        }\n      } catch (error) {\n        console.log(error.message);\n        setLoginError(error.message);\n        setCurrentConnector(undefined);\n      }\n\n      setAppNetworkLoading(false);\n  }, [connector, appChainID, walletName]);\n\n  useEffect(() => {\n    const getAccountDetails = async () => {\n      if (appChainID && connectedAccount && walletNameSuccess) {\n        const accountBalance = await getAccountBalance(appChainID, walletChainID, connectedAccount as string, walletNameSuccess);\n\n        dispatch(\n          connectWalletSuccess(\n            walletNameSuccess,\n            [connectedAccount],\n            {\n              [connectedAccount]: new BigNumber(accountBalance._hex).div(new BigNumber(10).pow(18)).toFixed(5)\n            }\n          )\n        );\n\n        setConnectWalletLoading(false);\n      }\n    }\n    getAccountDetails();\n  }, [walletNameSuccess, connectedAccount, appChainID, walletChainID]);\n\n  const handleConnectorDisconnect = useCallback(() => {\n    dispatch(disconnectWallet());\n    dispatch(settingCurrentConnector(undefined));\n    dispatch(settingAppNetwork(NetworkUpdateType.Wallet, undefined));\n\n    localStorage.removeItem(\"walletconnect\");\n\n    deactivate();\n    setAccount(undefined);\n    setWalletName([]);\n    setWalletNameSuccess(undefined);\n    setCurrentConnector(undefined);\n    setConnectWalletLoading(false);\n    setLoginError('');\n  }, []);\n\n  return {\n    handleProviderChosen,\n    setWalletName,\n    walletName,\n    connectWalletLoading,\n    walletNameSuccess,\n    loginError,\n    currentConnector,\n    appNetworkLoading,\n    handleConnectorDisconnect\n  }\n}\n\nexport default useProviderConnect;\n"]},"metadata":{},"sourceType":"module"}