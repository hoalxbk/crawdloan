{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\nimport { getPoolContract } from '../../../services/web3';\nimport { getProgressWithPools } from \"../../../utils/campaign\";\nconst DECIMAL_PLACES = 8;\n\nconst useTokenSoldProgress = (poolAddress, totalTokens, networkAvailable, poolDetails = {}) => {\n  _s();\n\n  const [soldProgress, setSoldProgress] = useState(\"0\");\n  const [tokenSold, setTokenSold] = useState(\"0\");\n  const {\n    appChainID\n  } = useTypedSelector(state => state.appNetwork).data;\n  const connector = useTypedSelector(state => state.connector).data;\n  let soldProgressInterval = undefined;\n  useEffect(() => {\n    const calSoldProgress = async () => {\n      if (poolAddress && networkAvailable && totalTokens && ethers.utils.isAddress(poolAddress)) {\n        // const poolContract = getContractInstance(\n        //   Pool_ABI,\n        //   poolAddress,\n        //   connector,\n        //   appChainID,\n        //   SmartContractMethod.Read,\n        //   networkAvailable === 'eth'\n        // );\n        const poolContract = getPoolContract({\n          networkAvailable,\n          poolHash: poolAddress\n        });\n\n        if (poolContract) {\n          const tokensSold = await poolContract.methods.tokenSold().call();\n          let tokensSoldCal = new BigNumber(tokensSold).div(new BigNumber(10).pow(18)).toFixed();\n          let {\n            progress,\n            tokenSold,\n            totalSoldCoin\n          } = getProgressWithPools({\n            token_sold: tokensSoldCal,\n            total_sold_coin: totalTokens,\n            finish_time: poolDetails.finish_time || poolDetails.endBuyTime\n          });\n          setTokenSold(new BigNumber(tokenSold).toFixed(DECIMAL_PLACES));\n          setSoldProgress(new BigNumber(progress).toFixed(DECIMAL_PLACES));\n        }\n      }\n    };\n\n    if (poolAddress && networkAvailable) {\n      calSoldProgress();\n      soldProgressInterval = setInterval(() => calSoldProgress(), 20000);\n    }\n\n    return () => {\n      soldProgressInterval && clearInterval(soldProgressInterval);\n    };\n  }, [poolAddress, appChainID, connector, networkAvailable, totalTokens]);\n  return {\n    tokenSold,\n    soldProgress\n  };\n};\n\n_s(useTokenSoldProgress, \"enfDshi2QTJ4U0GLZe9BbJUzT/8=\", false, function () {\n  return [useTypedSelector, useTypedSelector];\n});\n\nexport default useTokenSoldProgress;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useTokenSoldProgress.ts"],"names":["useState","useEffect","ethers","BigNumber","useTypedSelector","getPoolContract","getProgressWithPools","DECIMAL_PLACES","useTokenSoldProgress","poolAddress","totalTokens","networkAvailable","poolDetails","soldProgress","setSoldProgress","tokenSold","setTokenSold","appChainID","state","appNetwork","data","connector","soldProgressInterval","undefined","calSoldProgress","utils","isAddress","poolContract","poolHash","tokensSold","methods","call","tokensSoldCal","div","pow","toFixed","progress","totalSoldCoin","token_sold","total_sold_coin","finish_time","endBuyTime","setInterval","clearInterval"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,SAASC,gBAAT,QAAiC,iCAAjC;AAEA,SAA6BC,eAA7B,QAAwE,wBAAxE;AAEA,SAAQC,oBAAR,QAAmC,yBAAnC;AAEA,MAAMC,cAAc,GAAG,CAAvB;;AAEA,MAAMC,oBAAoB,GAAG,CAACC,WAAD,EAAkCC,WAAlC,EAAmEC,gBAAnE,EAAyGC,WAAgB,GAAG,EAA5H,KAAmI;AAAA;;AAC9J,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAS,GAAT,CAAhD;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAS,GAAT,CAA1C;AAEA,QAAM;AAAEiB,IAAAA;AAAF,MAAkBb,gBAAgB,CAACc,KAAK,IAAKA,KAAK,CAACC,UAAjB,CAAhB,CAA6CC,IAArE;AACA,QAAMC,SAAS,GAAIjB,gBAAgB,CAACc,KAAK,IAAIA,KAAK,CAACG,SAAhB,CAAhB,CAA2CD,IAA9D;AACA,MAAIE,oBAAoB,GAAGC,SAA3B;AAEAtB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,eAAe,GAAG,YAAY;AAClC,UAAIf,WAAW,IAAIE,gBAAf,IAAmCD,WAAnC,IAAkDR,MAAM,CAACuB,KAAP,CAAaC,SAAb,CAAuBjB,WAAvB,CAAtD,EAA2F;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,cAAMkB,YAAY,GAAGtB,eAAe,CAAC;AAAEM,UAAAA,gBAAF;AAAoBiB,UAAAA,QAAQ,EAAEnB;AAA9B,SAAD,CAApC;;AAEA,YAAIkB,YAAJ,EAAkB;AAChB,gBAAME,UAAU,GAAG,MAAMF,YAAY,CAACG,OAAb,CAAqBf,SAArB,GAAiCgB,IAAjC,EAAzB;AACA,cAAIC,aAAa,GAAG,IAAI7B,SAAJ,CAAc0B,UAAd,EAA0BI,GAA1B,CAA8B,IAAI9B,SAAJ,CAAc,EAAd,EAAkB+B,GAAlB,CAAsB,EAAtB,CAA9B,EAAyDC,OAAzD,EAApB;AACA,cAAI;AAAEC,YAAAA,QAAF;AAAYrB,YAAAA,SAAZ;AAAuBsB,YAAAA;AAAvB,cAAyC/B,oBAAoB,CAAC;AAChEgC,YAAAA,UAAU,EAAEN,aADoD;AAEhEO,YAAAA,eAAe,EAAE7B,WAF+C;AAGhE8B,YAAAA,WAAW,EAAE5B,WAAW,CAAC4B,WAAZ,IAA2B5B,WAAW,CAAC6B;AAHY,WAAD,CAAjE;AAMAzB,UAAAA,YAAY,CAAC,IAAIb,SAAJ,CAAcY,SAAd,EAAyBoB,OAAzB,CAAiC5B,cAAjC,CAAD,CAAZ;AACAO,UAAAA,eAAe,CAAC,IAAIX,SAAJ,CAAciC,QAAd,EAAwBD,OAAxB,CAAgC5B,cAAhC,CAAD,CAAf;AACD;AACF;AACF,KA1BD;;AA4BA,QAAIE,WAAW,IAAIE,gBAAnB,EAAqC;AACnCa,MAAAA,eAAe;AACfF,MAAAA,oBAAoB,GAAGoB,WAAW,CAAC,MAAMlB,eAAe,EAAtB,EAA0B,KAA1B,CAAlC;AACD;;AAED,WAAO,MAAM;AACXF,MAAAA,oBAAoB,IAAIqB,aAAa,CAACrB,oBAAD,CAArC;AACD,KAFD;AAGD,GArCQ,EAqCN,CAACb,WAAD,EAAcQ,UAAd,EAA0BI,SAA1B,EAAqCV,gBAArC,EAAuDD,WAAvD,CArCM,CAAT;AAuCA,SAAO;AACLK,IAAAA,SADK;AAELF,IAAAA;AAFK,GAAP;AAID,CAnDD;;GAAML,oB;UAIoBJ,gB,EACLA,gB;;;AAiDrB,eAAeI,oBAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\n\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\nimport Pool_ABI from '../../../abi/Pool.json';\nimport {getContractInstance, getPoolContract, SmartContractMethod} from '../../../services/web3';\nimport {NFT_PLUS_AMOUNT_PRODUCTION} from \"../../../constants\";\nimport {getProgressWithPools} from \"../../../utils/campaign\";\n\nconst DECIMAL_PLACES = 8;\n\nconst useTokenSoldProgress = (poolAddress: string | undefined, totalTokens: number | undefined, networkAvailable: string | undefined, poolDetails: any = {}) => {\n  const [soldProgress, setSoldProgress] = useState<string>(\"0\");\n  const [tokenSold, setTokenSold] = useState<string>(\"0\");\n\n  const { appChainID }  = useTypedSelector(state  => state.appNetwork).data;\n  const connector  = useTypedSelector(state => state.connector).data;\n  let soldProgressInterval = undefined as any;\n\n  useEffect(() => {\n    const calSoldProgress = async () => {\n      if (poolAddress && networkAvailable && totalTokens && ethers.utils.isAddress(poolAddress)) {\n        // const poolContract = getContractInstance(\n        //   Pool_ABI,\n        //   poolAddress,\n        //   connector,\n        //   appChainID,\n        //   SmartContractMethod.Read,\n        //   networkAvailable === 'eth'\n        // );\n\n        const poolContract = getPoolContract({ networkAvailable, poolHash: poolAddress });\n\n        if (poolContract) {\n          const tokensSold = await poolContract.methods.tokenSold().call();\n          let tokensSoldCal = new BigNumber(tokensSold).div(new BigNumber(10).pow(18)).toFixed();\n          let { progress, tokenSold, totalSoldCoin } = getProgressWithPools({\n            token_sold: tokensSoldCal,\n            total_sold_coin: totalTokens,\n            finish_time: poolDetails.finish_time || poolDetails.endBuyTime,\n          });\n\n          setTokenSold(new BigNumber(tokenSold).toFixed(DECIMAL_PLACES));\n          setSoldProgress(new BigNumber(progress).toFixed(DECIMAL_PLACES));\n        }\n      }\n    }\n\n    if (poolAddress && networkAvailable) {\n      calSoldProgress();\n      soldProgressInterval = setInterval(() => calSoldProgress(), 20000);\n    }\n\n    return () => {\n      soldProgressInterval && clearInterval(soldProgressInterval);\n    }\n  }, [poolAddress, appChainID, connector, networkAvailable, totalTokens]);\n\n  return {\n    tokenSold,\n    soldProgress\n  }\n}\n\n\nexport default useTokenSoldProgress;\n"]},"metadata":{},"sourceType":"module"}