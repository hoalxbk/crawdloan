{"ast":null,"code":"import { ConnectorNames } from '../../constants/connectors';\nimport { walletActions } from '../constants/wallet';\nexport let WalletConnectionState;\n\n(function (WalletConnectionState) {\n  WalletConnectionState[\"READY\"] = \"readyForConnection\";\n  WalletConnectionState[\"CONNECTED\"] = \"connected\";\n})(WalletConnectionState || (WalletConnectionState = {}));\n\nexport let TwoFactors;\n\n(function (TwoFactors) {\n  TwoFactors[\"Layer1\"] = \"Layer1\";\n  TwoFactors[\"Layer2\"] = \"Layer2\";\n})(TwoFactors || (TwoFactors = {}));\n\nconst wallets = {\n  [ConnectorNames.WalletConnect]: {\n    title: \"WalletConnect\",\n    typeId: \"WalletConnect\"\n  },\n  [ConnectorNames.WalletLinkConnect]: {\n    title: \"WalletLinkConnect\",\n    typeId: \"wallet-coinbase-icon\"\n  },\n  [ConnectorNames.BSC]: {\n    title: \"Binance Chain Wallet\",\n    typeId: \"injected-binance\"\n  },\n  [ConnectorNames.MetaMask]: {\n    title: \"Web3\",\n    typeId: \"metamask\"\n  },\n  [ConnectorNames.Fortmatic]: {\n    title: \"Fortmatic\",\n    typeId: \"fortmatic\"\n  }\n};\nconst walletInitialState = Object.keys(wallets).reduce((acc, key) => {\n  const wallet = wallets[key];\n  const walletsInfo = { ...acc,\n    [key]: { ...wallet,\n      balances: {},\n      connectionState: WalletConnectionState.READY,\n      addresses: []\n    }\n  };\n  return walletsInfo;\n}, {});\nconst initialState = {\n  entities: walletInitialState,\n  loading: false,\n  error: '',\n  twoFactor: undefined,\n  walletConnect: false\n};\nexport const walletReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case walletActions.ALL_WALLETS_INIT_LOADING:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case walletActions.ALL_WALLETS_INIT_SUCCESS:\n      {\n        return { ...state,\n          loading: false,\n          data: walletInitialState\n        };\n      }\n\n    case walletActions.ALL_WALLETS_INIT_ERROR:\n      {\n        return { ...state,\n          error: action.payload\n        };\n      }\n\n    case walletActions.WALLET_CONNECT_SUCCESS:\n      {\n        const {\n          balances,\n          addresses,\n          entity\n        } = action.payload;\n        return { ...state,\n          entities: Object.assign({ ...state.entities\n          }, {\n            [entity]: { ...state.entities[entity],\n              balances,\n              addresses,\n              connectionState: WalletConnectionState.CONNECTED\n            }\n          }),\n          twoFactor: TwoFactors.Layer1,\n          walletConnect: true\n        };\n      }\n\n    case walletActions.WALLET_UPDATE_BALANCE:\n      {\n        const {\n          balances,\n          addresses,\n          entity\n        } = action.payload;\n        return { ...state,\n          entities: Object.assign({ ...state.entities\n          }, {\n            [entity]: { ...state.entities[entity],\n              balances,\n              addresses,\n              connectionState: WalletConnectionState.CONNECTED\n            }\n          })\n        };\n      }\n\n    case walletActions.WALLET_CONNECT_SUCCESS_WITHOUT_LAYER2:\n      {\n        return { ...state,\n          walletConnect: false,\n          twoFactor: TwoFactors.Layer1\n        };\n      }\n\n    case walletActions.WALLET_CONNECT_LAYER2_SUCCESS:\n      {\n        return { ...state,\n          twoFactor: TwoFactors.Layer2,\n          walletConnect: false\n        };\n      }\n\n    case walletActions.WALLET_DISCONNECT_SUCCESS:\n      {\n        return initialState;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/store/reducers/wallet.ts"],"names":["ConnectorNames","walletActions","WalletConnectionState","TwoFactors","wallets","WalletConnect","title","typeId","WalletLinkConnect","BSC","MetaMask","Fortmatic","walletInitialState","Object","keys","reduce","acc","key","wallet","walletsInfo","balances","connectionState","READY","addresses","initialState","entities","loading","error","twoFactor","undefined","walletConnect","walletReducer","state","action","type","ALL_WALLETS_INIT_LOADING","ALL_WALLETS_INIT_SUCCESS","data","ALL_WALLETS_INIT_ERROR","payload","WALLET_CONNECT_SUCCESS","entity","assign","CONNECTED","Layer1","WALLET_UPDATE_BALANCE","WALLET_CONNECT_SUCCESS_WITHOUT_LAYER2","WALLET_CONNECT_LAYER2_SUCCESS","Layer2","WALLET_DISCONNECT_SUCCESS"],"mappings":"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","sourcesContent":["import { ConnectorNames } from '../../constants/connectors';\nimport { walletActions } from '../constants/wallet';\nimport { AnyAction } from 'redux';\n\nexport enum WalletConnectionState {\n  READY = \"readyForConnection\",\n  CONNECTED = \"connected\"\n}\n\nexport enum TwoFactors {\n  Layer1 = \"Layer1\",\n  Layer2 = \"Layer2\"\n}\n\ntype connectorNames = Extract<ConnectorNames, ConnectorNames.WalletConnect | ConnectorNames.BSC | ConnectorNames.MetaMask | ConnectorNames.Fortmatic>\n\ntype WalletState =  {\n  entities: { [key: string]: WalletType },\n  loading: boolean,\n  error: string,\n  twoFactor: TwoFactors | undefined,\n  walletConnect: boolean\n}\n\nconst wallets = {\n  [ConnectorNames.WalletConnect]: {\n    title: \"WalletConnect\",\n    typeId: \"WalletConnect\"\n  },\n  [ConnectorNames.WalletLinkConnect]: {\n    title: \"WalletLinkConnect\",\n    typeId: \"wallet-coinbase-icon\"\n  },\n  [ConnectorNames.BSC]: {\n    title: \"Binance Chain Wallet\",\n    typeId: \"injected-binance\"\n  },\n  [ConnectorNames.MetaMask]: {\n    title: \"Web3\",\n    typeId: \"metamask\"\n  },\n  [ConnectorNames.Fortmatic]: {\n    title: \"Fortmatic\",\n    typeId: \"fortmatic\"\n  }\n}\n\nexport type WalletType = {\n  addresses: string[];\n  balances: {};\n  connectionState: WalletConnectionState;\n  title: string;\n  typeId: string;\n}\n\nconst walletInitialState = Object.keys(wallets).reduce<Record<string, WalletType>>((acc, key) => {\n  const wallet = wallets[key as connectorNames];\n\n  const walletsInfo = { \n    ...acc,\n    [key]: {\n      ...wallet,\n      balances: {},\n      connectionState: WalletConnectionState.READY,\n      addresses: []\n    }\n  } \n\n  return walletsInfo;\n}, {});\n\nconst initialState = {\n  entities: walletInitialState,\n  loading: false,\n  error: '',\n  twoFactor: undefined,\n  walletConnect: false\n}\n\n\nexport const walletReducer = (state: WalletState = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case walletActions.ALL_WALLETS_INIT_LOADING: {\n      return {\n        ...state,\n        loading: true\n      }\n    }\n\n    case walletActions.ALL_WALLETS_INIT_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        data: walletInitialState \n      }\n    }\n\n    case walletActions.ALL_WALLETS_INIT_ERROR: {\n      return {\n        ...state,\n        error: action.payload\n      }\n    }\n\n    case walletActions.WALLET_CONNECT_SUCCESS: {\n      const { balances, addresses, entity } = action.payload;\n      return {\n        ...state,\n        entities: Object.assign({...state.entities}, {[entity]: {\n          ...state.entities[entity],\n          balances,\n          addresses,\n          connectionState: WalletConnectionState.CONNECTED\n        }}),\n        twoFactor: TwoFactors.Layer1,\n        walletConnect: true\n      }\n    }\n\n    case walletActions.WALLET_UPDATE_BALANCE: {\n      const { balances, addresses, entity } = action.payload;\n\n      return {\n        ...state,\n        entities: Object.assign({...state.entities}, {[entity]: {\n          ...state.entities[entity],\n          balances,\n          addresses,\n          connectionState: WalletConnectionState.CONNECTED\n        }}),\n      }\n    }\n\n    case walletActions.WALLET_CONNECT_SUCCESS_WITHOUT_LAYER2: {\n      return {\n        ...state,\n        walletConnect: false,\n        twoFactor: TwoFactors.Layer1\n      } \n    }\n\n    case walletActions.WALLET_CONNECT_LAYER2_SUCCESS: {\n      return {\n        ...state,\n        twoFactor: TwoFactors.Layer2,\n        walletConnect: false\n      }\n    }\n\n    case walletActions.WALLET_DISCONNECT_SUCCESS: {\n      return initialState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}