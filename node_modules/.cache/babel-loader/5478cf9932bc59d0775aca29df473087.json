{"ast":null,"code":"import { BscConnector } from '@binance-chain/bsc-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { FortmaticConnector } from '../connectors/Fortmatic';\nimport { BSC_CHAIN_ID, ETH_CHAIN_ID } from './network';\nimport { FORMATIC_KEY, NETWORK_URL, APP_NETWORKS_NAME } from './network';\nconst METAMASK_DEEPLINK = process.env.REACT_APP_METAMASK_DEEPLINK;\nconsole.log('METAMASK_DEEPLINK', METAMASK_DEEPLINK);\nconsole.log('FORMATIC_KEY, NETWORK_URL, APP_NETWORKS_NAME', FORMATIC_KEY, NETWORK_URL, APP_NETWORKS_NAME);\nexport const bscConnector = new BscConnector({});\nexport const injected = new InjectedConnector({});\nconst originalChainIdChangeHandler = bscConnector.handleChainChanged; //@ts-ignore\n\nbscConnector.handleChainChanged = chainId => {\n  const chainIdNum = Number(chainId);\n  console.debug(\"Handling 'chainChanged' event with payload\", chainId, isNaN(chainIdNum));\n\n  if (isNaN(chainIdNum)) {\n    bscConnector.emitError('NaN ChainId');\n    return;\n  } //@ts-ignore\n\n\n  originalChainIdChangeHandler(chainId);\n}; // mainnet only\n\n\nexport const walletLinkConnect = new WalletLinkConnector({\n  url: process.env.REACT_APP_NETWORK_URL || '',\n  appName: 'Red Kite',\n  appLogoUrl: 'https://redkite.polkafoundry.com/images/logo-red-kite.svg',\n  darkMode: true // supportedChainIds: [1,4,5],\n\n}); // mainnet only\n\nexport const walletConnect = new WalletConnectConnector({\n  rpc: {\n    [Number(ETH_CHAIN_ID)]: NETWORK_URL\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 10000\n});\nexport const walletConnectBsc = new WalletConnectConnector({\n  // rpc: { 56: 'https://bsc-dataseed.binance.org/' },\n  rpc: {\n    [Number(BSC_CHAIN_ID)]: 'https://bsc-dataseed.binance.org/'\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 10000\n}); // mainnet only\n\nexport const fortmatic = new FortmaticConnector({\n  apiKey: FORMATIC_KEY !== null && FORMATIC_KEY !== void 0 ? FORMATIC_KEY : '',\n  chainId: 1\n});\nexport let ConnectorNames;\n\n(function (ConnectorNames) {\n  ConnectorNames[\"MetaMask\"] = \"MetaMask\";\n  ConnectorNames[\"BSC\"] = \"BSC Wallet\";\n  ConnectorNames[\"WalletConnect\"] = \"WalletConnect\";\n  ConnectorNames[\"WalletConnectBsc\"] = \"WalletConnect\";\n  ConnectorNames[\"WalletLinkConnect\"] = \"Coinbase Wallet\";\n  ConnectorNames[\"Fortmatic\"] = \"Fortmatic\";\n})(ConnectorNames || (ConnectorNames = {}));\n\nexport const SUPPORTED_WALLETS = {\n  METAMASK: {\n    connector: injected,\n    name: ConnectorNames.MetaMask,\n    icon: '/images/metamask.svg',\n    disableIcon: '/images/metamask-disabled.svg',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    mobile: true,\n    deepLink: METAMASK_DEEPLINK\n  },\n  WALLET_CONNECT: {\n    connector: walletConnect,\n    name: ConnectorNames.WalletConnect,\n    icon: '/images/WalletConnect.svg',\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n    disableIcon: '/images/wallet-connect-disabled.svg',\n    href: null,\n    mobile: true\n  },\n  BSC_WALLET: {\n    connector: bscConnector,\n    name: ConnectorNames.BSC,\n    icon: '/images/injected-binance.svg',\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n    disableIcon: '/images/injected-binance-disabled.svg',\n    href: null\n  },\n  WALLET_LINK: {\n    connector: walletLinkConnect,\n    name: ConnectorNames.WalletLinkConnect,\n    icon: '/images/wallet-link/wallet-link.svg',\n    description: 'Connect to Coinbase Wallet and more...',\n    disableIcon: '/images/wallet-link/wallet-link-disabled.svg',\n    href: null,\n    mobile: true\n  } // FORTMATIC: {\n  //   connector: fortmatic,\n  //   name: ConnectorNames.Fortmatic,\n  //   icon: '/images/fortmatic.svg',\n  //   description: 'Login using Fortmatic hosted wallet',\n  //   disableIcon: '/images/fortmatic-disabled.svg',\n  //   href: null,\n  //   mobile: true\n  // },\n\n};\nexport const SUPPORTED_WALLETS_BSC = {\n  METAMASK: SUPPORTED_WALLETS.METAMASK,\n  BSC_WALLET: SUPPORTED_WALLETS.BSC_WALLET,\n  WALLET_CONNECT: {\n    connector: walletConnectBsc,\n    name: ConnectorNames.WalletConnect,\n    icon: '/images/WalletConnect.svg',\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n    disableIcon: '/images/wallet-connect-disabled.svg',\n    href: null\n  }\n};\nexport const connectorsByName = {\n  [ConnectorNames.MetaMask]: injected,\n  [ConnectorNames.BSC]: bscConnector,\n  [ConnectorNames.Fortmatic]: fortmatic,\n  [ConnectorNames.WalletConnect]: walletConnect,\n  [ConnectorNames.WalletConnectBsc]: walletConnectBsc,\n  [ConnectorNames.WalletLinkConnect]: walletLinkConnect\n};\nexport const connectorsSupportByNetwork = {\n  [APP_NETWORKS_NAME.METAMASK]: SUPPORTED_WALLETS,\n  [APP_NETWORKS_NAME.BSC]: SUPPORTED_WALLETS_BSC\n};","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/constants/connectors.ts"],"names":["BscConnector","WalletConnectConnector","WalletLinkConnector","InjectedConnector","FortmaticConnector","BSC_CHAIN_ID","ETH_CHAIN_ID","FORMATIC_KEY","NETWORK_URL","APP_NETWORKS_NAME","METAMASK_DEEPLINK","process","env","REACT_APP_METAMASK_DEEPLINK","console","log","bscConnector","injected","originalChainIdChangeHandler","handleChainChanged","chainId","chainIdNum","Number","debug","isNaN","emitError","walletLinkConnect","url","REACT_APP_NETWORK_URL","appName","appLogoUrl","darkMode","walletConnect","rpc","bridge","qrcode","pollingInterval","walletConnectBsc","fortmatic","apiKey","ConnectorNames","SUPPORTED_WALLETS","METAMASK","connector","name","MetaMask","icon","disableIcon","description","href","mobile","deepLink","WALLET_CONNECT","WalletConnect","BSC_WALLET","BSC","WALLET_LINK","WalletLinkConnect","SUPPORTED_WALLETS_BSC","connectorsByName","Fortmatic","WalletConnectBsc","connectorsSupportByNetwork"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,8BAA3B;AACA,SAAuBC,sBAAvB,QAAoD,qCAApD;AACA,SAAQC,mBAAR,QAAkC,kCAAlC;AACA,SAAQC,iBAAR,QAAgC,gCAAhC;AAEA,SAAQC,kBAAR,QAAiC,yBAAjC;AACA,SAAQC,YAAR,EAAsBC,YAAtB,QAA0D,WAA1D;AAEA,SAAQC,YAAR,EAAsBC,WAAtB,EAAmCC,iBAAnC,QAA4D,WAA5D;AAEA,MAAMC,iBAAiB,GAAGC,OAAO,CAACC,GAAR,CAAYC,2BAAtC;AACAC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCL,iBAAjC;AACAI,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA4DR,YAA5D,EAA0EC,WAA1E,EAAuFC,iBAAvF;AAEA,OAAO,MAAMO,YAAY,GAAG,IAAIhB,YAAJ,CAAiB,EAAjB,CAArB;AACP,OAAO,MAAMiB,QAAQ,GAAG,IAAId,iBAAJ,CAAsB,EAAtB,CAAjB;AAEP,MAAMe,4BAA4B,GAAGF,YAAY,CAACG,kBAAlD,C,CAEA;;AACAH,YAAY,CAACG,kBAAb,GAAmCC,OAAD,IAAqB;AACrD,QAAMC,UAAU,GAAGC,MAAM,CAACF,OAAD,CAAzB;AACAN,EAAAA,OAAO,CAACS,KAAR,CAAc,4CAAd,EAA4DH,OAA5D,EAAqEI,KAAK,CAACH,UAAD,CAA1E;;AACA,MAAIG,KAAK,CAACH,UAAD,CAAT,EAAuB;AACrBL,IAAAA,YAAY,CAACS,SAAb,CAAuB,aAAvB;AACA;AACD,GANoD,CAOrD;;;AACAP,EAAAA,4BAA4B,CAACE,OAAD,CAA5B;AACD,CATD,C,CAWA;;;AACA,OAAO,MAAMM,iBAAiB,GAAG,IAAIxB,mBAAJ,CAAwB;AACvDyB,EAAAA,GAAG,EAAEhB,OAAO,CAACC,GAAR,CAAYgB,qBAAZ,IAAqC,EADa;AAEvDC,EAAAA,OAAO,EAAE,UAF8C;AAGvDC,EAAAA,UAAU,EAAE,2DAH2C;AAIvDC,EAAAA,QAAQ,EAAE,IAJ6C,CAKvD;;AALuD,CAAxB,CAA1B,C,CAQP;;AACA,OAAO,MAAMC,aAAa,GAAG,IAAI/B,sBAAJ,CAA2B;AACtDgC,EAAAA,GAAG,EAAE;AAAC,KAACX,MAAM,CAAChB,YAAD,CAAP,GAAwBE;AAAzB,GADiD;AAEtD0B,EAAAA,MAAM,EAAE,kCAF8C;AAGtDC,EAAAA,MAAM,EAAE,IAH8C;AAItDC,EAAAA,eAAe,EAAE;AAJqC,CAA3B,CAAtB;AAOP,OAAO,MAAMC,gBAAgB,GAAG,IAAIpC,sBAAJ,CAA2B;AACzD;AACAgC,EAAAA,GAAG,EAAE;AAAE,KAACX,MAAM,CAACjB,YAAD,CAAP,GAAwB;AAA1B,GAFoD;AAGzD6B,EAAAA,MAAM,EAAE,kCAHiD;AAIzDC,EAAAA,MAAM,EAAE,IAJiD;AAKzDC,EAAAA,eAAe,EAAE;AALwC,CAA3B,CAAzB,C,CASP;;AACA,OAAO,MAAME,SAAS,GAAG,IAAIlC,kBAAJ,CAAuB;AAC9CmC,EAAAA,MAAM,EAAEhC,YAAF,aAAEA,YAAF,cAAEA,YAAF,GAAkB,EADsB;AAE9Ca,EAAAA,OAAO,EAAE;AAFqC,CAAvB,CAAlB;AAoBP,WAAYoB,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAWZ,OAAO,MAAMC,iBAAgD,GAAG;AAC9DC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE1B,QADH;AAER2B,IAAAA,IAAI,EAAEJ,cAAc,CAACK,QAFb;AAGRC,IAAAA,IAAI,EAAE,sBAHE;AAIRC,IAAAA,WAAW,EAAE,+BAJL;AAKRC,IAAAA,WAAW,EAAE,gCALL;AAMRC,IAAAA,IAAI,EAAE,IANE;AAORC,IAAAA,MAAM,EAAE,IAPA;AAQRC,IAAAA,QAAQ,EAAEzC;AARF,GADoD;AAW9D0C,EAAAA,cAAc,EAAE;AACdT,IAAAA,SAAS,EAAEX,aADG;AAEdY,IAAAA,IAAI,EAAEJ,cAAc,CAACa,aAFP;AAGdP,IAAAA,IAAI,EAAE,2BAHQ;AAIdE,IAAAA,WAAW,EAAE,qDAJC;AAKdD,IAAAA,WAAW,EAAE,qCALC;AAMdE,IAAAA,IAAI,EAAE,IANQ;AAOdC,IAAAA,MAAM,EAAE;AAPM,GAX8C;AAoB9DI,EAAAA,UAAU,EAAE;AACVX,IAAAA,SAAS,EAAE3B,YADD;AAEV4B,IAAAA,IAAI,EAAEJ,cAAc,CAACe,GAFX;AAGVT,IAAAA,IAAI,EAAE,8BAHI;AAIVE,IAAAA,WAAW,EAAE,qDAJH;AAKVD,IAAAA,WAAW,EAAE,uCALH;AAMVE,IAAAA,IAAI,EAAE;AANI,GApBkD;AA4B9DO,EAAAA,WAAW,EAAE;AACXb,IAAAA,SAAS,EAAEjB,iBADA;AAEXkB,IAAAA,IAAI,EAAEJ,cAAc,CAACiB,iBAFV;AAGXX,IAAAA,IAAI,EAAE,qCAHK;AAIXE,IAAAA,WAAW,EAAE,wCAJF;AAKXD,IAAAA,WAAW,EAAE,8CALF;AAMXE,IAAAA,IAAI,EAAE,IANK;AAOXC,IAAAA,MAAM,EAAE;AAPG,GA5BiD,CAqC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA7C8D,CAAzD;AAgDP,OAAO,MAAMQ,qBAAoD,GAAG;AAClEhB,EAAAA,QAAQ,EAAED,iBAAiB,CAACC,QADsC;AAElEY,EAAAA,UAAU,EAAEb,iBAAiB,CAACa,UAFoC;AAGlEF,EAAAA,cAAc,EAAE;AACdT,IAAAA,SAAS,EAAEN,gBADG;AAEdO,IAAAA,IAAI,EAAEJ,cAAc,CAACa,aAFP;AAGdP,IAAAA,IAAI,EAAE,2BAHQ;AAIdE,IAAAA,WAAW,EAAE,qDAJC;AAKdD,IAAAA,WAAW,EAAE,qCALC;AAMdE,IAAAA,IAAI,EAAE;AANQ;AAHkD,CAA7D;AAcP,OAAO,MAAMU,gBAAgE,GAAG;AAC9E,GAACnB,cAAc,CAACK,QAAhB,GAA2B5B,QADmD;AAE9E,GAACuB,cAAc,CAACe,GAAhB,GAAsBvC,YAFwD;AAG9E,GAACwB,cAAc,CAACoB,SAAhB,GAA4BtB,SAHkD;AAI9E,GAACE,cAAc,CAACa,aAAhB,GAAgCrB,aAJ8C;AAK9E,GAACQ,cAAc,CAACqB,gBAAhB,GAAmCxB,gBAL2C;AAM9E,GAACG,cAAc,CAACiB,iBAAhB,GAAoC/B;AAN0C,CAAzE;AASP,OAAO,MAAMoC,0BAA2E,GAAG;AACzF,GAACrD,iBAAiB,CAACiC,QAAnB,GAA8BD,iBAD2D;AAEzF,GAAChC,iBAAiB,CAAC8C,GAAnB,GAAyBG;AAFgE,CAApF","sourcesContent":["import {BscConnector} from '@binance-chain/bsc-connector'\nimport {URI_AVAILABLE, WalletConnectConnector} from '@web3-react/walletconnect-connector'\nimport {WalletLinkConnector} from '@web3-react/walletlink-connector'\nimport {InjectedConnector} from '@web3-react/injected-connector'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport {FortmaticConnector} from '../connectors/Fortmatic';\nimport {BSC_CHAIN_ID, ETH_CHAIN_ID, NETWORK_BSC_URL} from './network';\n\nimport {FORMATIC_KEY, NETWORK_URL, APP_NETWORKS_NAME } from './network';\n\nconst METAMASK_DEEPLINK = process.env.REACT_APP_METAMASK_DEEPLINK;\nconsole.log('METAMASK_DEEPLINK', METAMASK_DEEPLINK);\nconsole.log('FORMATIC_KEY, NETWORK_URL, APP_NETWORKS_NAME', FORMATIC_KEY, NETWORK_URL, APP_NETWORKS_NAME);\n\nexport const bscConnector = new BscConnector({}) as any;\nexport const injected = new InjectedConnector({});\n\nconst originalChainIdChangeHandler = bscConnector.handleChainChanged;\n\n//@ts-ignore\nbscConnector.handleChainChanged = (chainId: string) => {\n  const chainIdNum = Number(chainId);\n  console.debug(\"Handling 'chainChanged' event with payload\", chainId, isNaN(chainIdNum));\n  if (isNaN(chainIdNum)) {\n    bscConnector.emitError('NaN ChainId');\n    return;\n  }\n  //@ts-ignore\n  originalChainIdChangeHandler(chainId)\n};\n\n// mainnet only\nexport const walletLinkConnect = new WalletLinkConnector({\n  url: process.env.REACT_APP_NETWORK_URL || '',\n  appName: 'Red Kite',\n  appLogoUrl: 'https://redkite.polkafoundry.com/images/logo-red-kite.svg',\n  darkMode: true,\n  // supportedChainIds: [1,4,5],\n});\n\n// mainnet only\nexport const walletConnect = new WalletConnectConnector({\n  rpc: {[Number(ETH_CHAIN_ID)]: NETWORK_URL as string},\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 10000\n});\n\nexport const walletConnectBsc = new WalletConnectConnector({\n  // rpc: { 56: 'https://bsc-dataseed.binance.org/' },\n  rpc: { [Number(BSC_CHAIN_ID)]: 'https://bsc-dataseed.binance.org/' },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 10000\n});\n\n\n// mainnet only\nexport const fortmatic = new FortmaticConnector({\n  apiKey: FORMATIC_KEY ?? '',\n  chainId: 1\n})\n\nexport interface WalletInfo {\n  connector?: AbstractConnector\n  name: string\n  // iconName: string\n  description: string\n  href: string | null\n  // color: string\n  primary?: true\n  mobile?: true\n  mobileOnly?: true,\n  disableIcon: string;\n  icon: string ;\n  deepLink?: string;\n}\n\nexport enum ConnectorNames {\n  MetaMask = \"MetaMask\",\n  BSC = \"BSC Wallet\",\n  WalletConnect = \"WalletConnect\",\n  WalletConnectBsc = \"WalletConnect\",\n  WalletLinkConnect = \"Coinbase Wallet\",\n  Fortmatic = 'Fortmatic'\n}\n\nexport type connectorNames = Extract<ConnectorNames, ConnectorNames.MetaMask | ConnectorNames.BSC | ConnectorNames.WalletConnect | ConnectorNames.WalletLinkConnect | ConnectorNames.Fortmatic>;\n\nexport const SUPPORTED_WALLETS: { [key: string]: WalletInfo } = {\n  METAMASK: {\n    connector: injected,\n    name: ConnectorNames.MetaMask,\n    icon: '/images/metamask.svg',\n    disableIcon: '/images/metamask-disabled.svg',\n    description: 'Easy-to-use browser extension.',\n    href: null,\n    mobile: true,\n    deepLink: METAMASK_DEEPLINK\n  },\n  WALLET_CONNECT: {\n    connector: walletConnect,\n    name: ConnectorNames.WalletConnect,\n    icon: '/images/WalletConnect.svg',\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n    disableIcon: '/images/wallet-connect-disabled.svg',\n    href: null,\n    mobile: true\n  },\n  BSC_WALLET: {\n    connector: bscConnector,\n    name: ConnectorNames.BSC,\n    icon: '/images/injected-binance.svg',\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n    disableIcon: '/images/injected-binance-disabled.svg',\n    href: null,\n  },\n  WALLET_LINK: {\n    connector: walletLinkConnect,\n    name: ConnectorNames.WalletLinkConnect,\n    icon: '/images/wallet-link/wallet-link.svg',\n    description: 'Connect to Coinbase Wallet and more...',\n    disableIcon: '/images/wallet-link/wallet-link-disabled.svg',\n    href: null,\n    mobile: true,\n  },\n  // FORTMATIC: {\n  //   connector: fortmatic,\n  //   name: ConnectorNames.Fortmatic,\n  //   icon: '/images/fortmatic.svg',\n  //   description: 'Login using Fortmatic hosted wallet',\n  //   disableIcon: '/images/fortmatic-disabled.svg',\n  //   href: null,\n  //   mobile: true\n  // },\n};\n\nexport const SUPPORTED_WALLETS_BSC: { [key: string]: WalletInfo } = {\n  METAMASK: SUPPORTED_WALLETS.METAMASK,\n  BSC_WALLET: SUPPORTED_WALLETS.BSC_WALLET,\n  WALLET_CONNECT: {\n    connector: walletConnectBsc,\n    name: ConnectorNames.WalletConnect,\n    icon: '/images/WalletConnect.svg',\n    description: 'Connect to Trust Wallet, Rainbow Wallet and more...',\n    disableIcon: '/images/wallet-connect-disabled.svg',\n    href: null,\n  },\n}\n\n\nexport const connectorsByName: { [key in ConnectorNames]: AbstractConnector } = {\n  [ConnectorNames.MetaMask]: injected,\n  [ConnectorNames.BSC]: bscConnector,\n  [ConnectorNames.Fortmatic]: fortmatic,\n  [ConnectorNames.WalletConnect]: walletConnect,\n  [ConnectorNames.WalletConnectBsc]: walletConnectBsc,\n  [ConnectorNames.WalletLinkConnect]: walletLinkConnect,\n}\n\nexport const connectorsSupportByNetwork: {[key: string]: { [key:string]: WalletInfo }  } = {\n  [APP_NETWORKS_NAME.METAMASK]: SUPPORTED_WALLETS,\n  [APP_NETWORKS_NAME.BSC]: SUPPORTED_WALLETS_BSC,\n};\n\n"]},"metadata":{},"sourceType":"module"}