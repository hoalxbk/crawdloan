{"ast":null,"code":"import { sotaTiersActions } from '../constants/sota-tiers';\nimport { getContractInstance, convertFromWei, convertToWei, SmartContractMethod } from '../../services/web3';\nimport { getContract } from '../../utils/contract';\nimport RedKite from '../../abi/RedKiteTiers.json';\nimport { getBalance } from './balance';\nimport { alertFailure, alertSuccess } from '../../store/actions/alert';\nimport BigNumber from 'bignumber.js';\nimport { getAllowance } from './sota-token';\nexport const resetTiers = () => {\n  return {\n    type: sotaTiersActions.USER_TIER_RESET\n  };\n};\nexport const getTiers = (forceUsingEther = 'eth') => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: sotaTiersActions.TIERS_LOADING\n    });\n\n    try {\n      const {\n        appChainID\n      } = getState().appNetwork.data;\n      const connector = getState().connector.data;\n      const contract = getContractInstance(RedKite.abi, process.env.REACT_APP_TIERS, connector, appChainID, SmartContractMethod.Read, forceUsingEther === 'eth');\n      let result = await (contract === null || contract === void 0 ? void 0 : contract.methods.getTiers().call());\n      result = result.filter(e => e != '0');\n      result = result.map(e => {\n        return parseFloat(convertFromWei(e));\n      });\n      dispatch({\n        type: sotaTiersActions.TIERS_SUCCESS,\n        payload: result\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: sotaTiersActions.TIERS_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const getUserTier = (address, forceUsingEther = 'eth') => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: sotaTiersActions.USER_TIER_LOADING\n    });\n\n    try {\n      const {\n        appChainID\n      } = getState().appNetwork.data;\n      const connector = getState().connector.data;\n      let result = {};\n      const contract = getContractInstance(RedKite.abi, process.env.REACT_APP_TIERS, connector, appChainID, SmartContractMethod.Read, forceUsingEther === 'eth');\n      result = await (contract === null || contract === void 0 ? void 0 : contract.methods.getUserTier(address).call());\n      dispatch({\n        type: sotaTiersActions.USER_TIER_SUCCESS,\n        payload: result\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: sotaTiersActions.USER_TIER_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const getUserInfo = (address, forceUsingEther = 'eth', tokenAddress = '') => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: sotaTiersActions.USER_INFO_LOADING\n    });\n\n    try {\n      const {\n        appChainID\n      } = getState().appNetwork.data;\n      const connector = undefined;\n      const contract = getContractInstance(RedKite.abi, process.env.REACT_APP_TIERS, connector, appChainID, SmartContractMethod.Read, forceUsingEther === 'eth');\n      let result = {};\n      const resultPkf = await (contract === null || contract === void 0 ? void 0 : contract.methods.userInfo(address, process.env.REACT_APP_PKF).call());\n      const stakedPkf = convertFromWei(resultPkf.staked);\n      const resultUni = await (contract === null || contract === void 0 ? void 0 : contract.methods.userInfo(address, process.env.REACT_APP_UNI_LP).call());\n      const stakedUni = convertFromWei(resultUni.staked);\n      const resultMantra = await (contract === null || contract === void 0 ? void 0 : contract.methods.userInfo(address, process.env.REACT_APP_MANTRA_LP).call());\n      const stakedMantra = convertFromWei(resultMantra.staked);\n      result = { ...result,\n        resultPkf: resultPkf,\n        pkfStaked: stakedPkf,\n        resultUni: resultUni,\n        uniStaked: stakedUni,\n        resultMantra: resultMantra,\n        mantraStaked: stakedMantra\n      };\n      const resultStaked = await (contract === null || contract === void 0 ? void 0 : contract.methods.userTotalStaked(address).call());\n      const totalStaked = convertFromWei(resultStaked); // const totalStaked = parseFloat(stakedPkf) + parseFloat(stakedUni) * 150 + parseFloat(stakedMantra as string)\n\n      result = { ...result,\n        totalStaked: totalStaked\n      };\n      dispatch({\n        type: sotaTiersActions.USER_INFO_SUCCESS,\n        payload: result\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: sotaTiersActions.USER_INFO_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const deposit = (address, amount, library, tokenAddress) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: sotaTiersActions.DEPOSIT_LOADING\n    });\n\n    try {\n      let result = {};\n      const contract = getContract(process.env.REACT_APP_TIERS, RedKite.abi, library, address || ''); // Fake Gas Limit for Wallet Link\n      // let overrides = fixGasLimitWithProvider(library, 'deposit');\n      // result = await contract?.depositERC20(tokenAddress, convertToWei(amount), overrides);\n\n      result = await (contract === null || contract === void 0 ? void 0 : contract.depositERC20(tokenAddress, convertToWei(amount)));\n      dispatch({\n        type: sotaTiersActions.DEPOSIT_SUCCESS,\n        payload: result\n      });\n      await result.wait(1);\n\n      if (result) {\n        dispatch(getBalance(address || ''));\n        dispatch(getAllowance(address || ''));\n        dispatch(getUserTier(address || ''));\n        dispatch(getUserInfo(address || ''));\n      }\n\n      dispatch(alertSuccess('You have successfully staked.'));\n    } catch (error) {\n      console.log(error);\n      dispatch(alertFailure(\"Transaction submited failure\"));\n      dispatch({\n        type: sotaTiersActions.DEPOSIT_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const withdraw = (address, amount, library, tokenAddress) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: sotaTiersActions.WITHDRAW_LOADING\n    });\n\n    try {\n      let result = {};\n      const contract = getContract(process.env.REACT_APP_TIERS, RedKite.abi, library, address || '');\n      result = await (contract === null || contract === void 0 ? void 0 : contract.withdrawERC20(tokenAddress, convertToWei(amount)));\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_SUCCESS,\n        payload: result\n      });\n      await result.wait(1);\n\n      if (result) {\n        dispatch(getBalance(address || ''));\n        dispatch(getAllowance(address || ''));\n        dispatch(getUserTier(address || ''));\n        dispatch(getUserInfo(address || ''));\n      }\n\n      dispatch(alertSuccess('You have successfully unstaked.'));\n    } catch (error) {\n      console.log(error);\n      dispatch(alertFailure(\"Transaction submit failure\"));\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const getWithdrawFee = (address, amount) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: sotaTiersActions.WITHDRAW_FEE_LOADING\n    });\n\n    try {\n      const {\n        appChainID\n      } = getState().appNetwork.data;\n      const connector = getState().connector.data;\n      let data = {};\n      const contract = getContractInstance(RedKite.abi, process.env.REACT_APP_TIERS, connector, appChainID);\n      data = await (contract === null || contract === void 0 ? void 0 : contract.methods.calculateWithdrawFee(address, process.env.REACT_APP_PKF, convertToWei(amount)).call());\n      const fee = convertFromWei(data);\n      const feePercent = parseFloat(fee || '0') * 100 / parseFloat(amount || '0');\n      const result = {\n        fee: fee,\n        feePercent: feePercent\n      };\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_FEE_SUCCESS,\n        payload: result\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_FEE_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const getWithdrawPercent = () => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: sotaTiersActions.WITHDRAW_PERCENT_LOADING\n    });\n\n    try {\n      const {\n        appChainID\n      } = getState().appNetwork.data;\n      const {\n        connector\n      } = getState().connector.data || \"Metamask\";\n      let result = {};\n      let data = [];\n      const contract = getContractInstance(RedKite.abi, process.env.REACT_APP_TIERS, connector, appChainID);\n      result = await (contract === null || contract === void 0 ? void 0 : contract.methods.withdrawFeePercent(0).call());\n      data.push(result);\n      result = await (contract === null || contract === void 0 ? void 0 : contract.methods.withdrawFeePercent(1).call());\n      data.push(result);\n      result = await (contract === null || contract === void 0 ? void 0 : contract.methods.withdrawFeePercent(2).call());\n      data.push(result);\n      result = await (contract === null || contract === void 0 ? void 0 : contract.methods.withdrawFeePercent(3).call());\n      data.push(result);\n      result = await (contract === null || contract === void 0 ? void 0 : contract.methods.withdrawFeePercent(4).call());\n      data.push(result);\n      result = await (contract === null || contract === void 0 ? void 0 : contract.methods.withdrawFeePercent(5).call());\n      data.push(result);\n      result = { ...result,\n        penaltiesPercent: data\n      };\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_PERCENT_SUCCESS,\n        payload: result\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_PERCENT_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const getRates = tokens => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: sotaTiersActions.RATES_LOADING\n    });\n\n    try {\n      const {\n        appChainID\n      } = getState().appNetwork.data;\n      const {\n        connector\n      } = getState().connector.data || \"Metamask\";\n      const contract = getContractInstance(RedKite.abi, process.env.REACT_APP_TIERS, connector, appChainID, SmartContractMethod.Read, true);\n      let data = [];\n\n      for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n        const result = await (contract === null || contract === void 0 ? void 0 : contract.methods.externalToken(token.address).call());\n        const rate = new BigNumber(result.rate).div(new BigNumber(10 ** result.decimals)).toString();\n        data.push({\n          rate,\n          symbol: token.symbol,\n          name: token.name\n        });\n      }\n\n      const result = {\n        data: data\n      };\n      dispatch({\n        type: sotaTiersActions.RATES_SUCCESS,\n        payload: result\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: sotaTiersActions.RATES_FAILURE,\n        payload: error\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/sota-tiers.ts"],"names":["sotaTiersActions","getContractInstance","convertFromWei","convertToWei","SmartContractMethod","getContract","RedKite","getBalance","alertFailure","alertSuccess","BigNumber","getAllowance","resetTiers","type","USER_TIER_RESET","getTiers","forceUsingEther","dispatch","getState","TIERS_LOADING","appChainID","appNetwork","data","connector","contract","abi","process","env","REACT_APP_TIERS","Read","result","methods","call","filter","e","map","parseFloat","TIERS_SUCCESS","payload","error","console","log","TIERS_FAILURE","getUserTier","address","USER_TIER_LOADING","USER_TIER_SUCCESS","USER_TIER_FAILURE","getUserInfo","tokenAddress","USER_INFO_LOADING","undefined","resultPkf","userInfo","REACT_APP_PKF","stakedPkf","staked","resultUni","REACT_APP_UNI_LP","stakedUni","resultMantra","REACT_APP_MANTRA_LP","stakedMantra","pkfStaked","uniStaked","mantraStaked","resultStaked","userTotalStaked","totalStaked","USER_INFO_SUCCESS","USER_INFO_FAILURE","deposit","amount","library","DEPOSIT_LOADING","depositERC20","DEPOSIT_SUCCESS","wait","DEPOSIT_FAILURE","withdraw","WITHDRAW_LOADING","withdrawERC20","WITHDRAW_SUCCESS","WITHDRAW_FAILURE","getWithdrawFee","WITHDRAW_FEE_LOADING","calculateWithdrawFee","fee","feePercent","WITHDRAW_FEE_SUCCESS","WITHDRAW_FEE_FAILURE","getWithdrawPercent","WITHDRAW_PERCENT_LOADING","withdrawFeePercent","push","penaltiesPercent","WITHDRAW_PERCENT_SUCCESS","WITHDRAW_PERCENT_FAILURE","getRates","tokens","RATES_LOADING","i","length","token","externalToken","rate","div","decimals","toString","symbol","name","RATES_SUCCESS","RATES_FAILURE"],"mappings":"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","sourcesContent":["import { sotaTiersActions } from '../constants/sota-tiers';\nimport { AnyAction } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { getContractInstance, convertFromWei, convertToWei, SmartContractMethod } from '../../services/web3';\nimport { getContract } from '../../utils/contract';\nimport RedKite from '../../abi/RedKiteTiers.json';\nimport { getBalance } from './balance';\nimport { Web3Provider } from '@ethersproject/providers'\nimport { alertFailure, alertSuccess } from '../../store/actions/alert';\nimport BigNumber from 'bignumber.js';\n\nimport {getAllowance} from './sota-token';\nimport {fixGasLimit, fixGasLimitWithProvider} from \"../../utils\";\n\nexport const resetTiers = () => {\n  return {\n    type: sotaTiersActions.USER_TIER_RESET\n  }\n}\n\nexport const getTiers = (forceUsingEther: string = 'eth') => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.TIERS_LOADING });\n    try {\n      const { appChainID } = getState().appNetwork.data;\n      const connector  = getState().connector.data;\n\n      const contract = getContractInstance(\n        RedKite.abi,\n        process.env.REACT_APP_TIERS as string,\n        connector,\n        appChainID,\n        SmartContractMethod.Read,\n        forceUsingEther === 'eth'\n      );\n\n      let result = await contract?.methods.getTiers().call();\n\n      result = result.filter((e: any) => e != '0')\n      result = result.map((e: any) => {\n        return parseFloat(convertFromWei(e))\n      })\n\n      dispatch({\n        type: sotaTiersActions.TIERS_SUCCESS,\n        payload: result,\n      });\n\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTiersActions.TIERS_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const getUserTier = (address: string, forceUsingEther: string = 'eth') => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.USER_TIER_LOADING });\n    try {\n      const { appChainID } = getState().appNetwork.data;\n      const connector = getState().connector.data;\n      let result = {};\n\n      const contract = getContractInstance(\n        RedKite.abi,\n        process.env.REACT_APP_TIERS as string,\n        connector,\n        appChainID,\n        SmartContractMethod.Read,\n        forceUsingEther === 'eth'\n      );\n\n      result = await contract?.methods.getUserTier(address).call();\n\n      dispatch({\n        type: sotaTiersActions.USER_TIER_SUCCESS,\n        payload: result,\n      });\n\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTiersActions.USER_TIER_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const getUserInfo = (address: string, forceUsingEther: string = 'eth', tokenAddress: string = '') => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.USER_INFO_LOADING });\n    try {\n      const { appChainID } = getState().appNetwork.data;\n      const connector = undefined;\n      const contract = getContractInstance(\n        RedKite.abi,\n        process.env.REACT_APP_TIERS as string,\n        connector,\n        appChainID,\n        SmartContractMethod.Read,\n        forceUsingEther === 'eth'\n      );\n\n      let result = {};\n\n      const resultPkf = await contract?.methods.userInfo(address, process.env.REACT_APP_PKF).call();\n      const stakedPkf = convertFromWei(resultPkf.staked)\n\n      const resultUni = await contract?.methods.userInfo(address, process.env.REACT_APP_UNI_LP).call();\n      const stakedUni = convertFromWei(resultUni.staked)\n\n      const resultMantra = await contract?.methods.userInfo(address, process.env.REACT_APP_MANTRA_LP).call();\n      const stakedMantra = convertFromWei(resultMantra.staked)\n\n      result = {\n        ...result,\n        resultPkf: resultPkf,\n        pkfStaked: stakedPkf,\n        resultUni: resultUni,\n        uniStaked: stakedUni,\n        resultMantra: resultMantra,\n        mantraStaked: stakedMantra,\n      }\n\n      const resultStaked = await contract?.methods.userTotalStaked(address).call();\n      const totalStaked = convertFromWei(resultStaked)\n      // const totalStaked = parseFloat(stakedPkf) + parseFloat(stakedUni) * 150 + parseFloat(stakedMantra as string)\n\n      result = {\n        ...result,\n        totalStaked: totalStaked\n      }\n\n      dispatch({\n        type: sotaTiersActions.USER_INFO_SUCCESS,\n        payload: result,\n      });\n\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTiersActions.USER_INFO_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const deposit = (address: string | null | undefined, amount: string, library: Web3Provider, tokenAddress: string) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.DEPOSIT_LOADING });\n    try {\n      let result = {} as any;\n      const contract = getContract(process.env.REACT_APP_TIERS as string, RedKite.abi, library, address || '');\n\n      // Fake Gas Limit for Wallet Link\n      // let overrides = fixGasLimitWithProvider(library, 'deposit');\n      // result = await contract?.depositERC20(tokenAddress, convertToWei(amount), overrides);\n      result = await contract?.depositERC20(tokenAddress, convertToWei(amount));\n\n      dispatch({\n        type: sotaTiersActions.DEPOSIT_SUCCESS,\n        payload: result,\n      });\n      await result.wait(1);\n      if(result) {\n        dispatch(getBalance(address || ''));\n        dispatch(getAllowance(address || ''));\n        dispatch(getUserTier(address || ''));\n        dispatch(getUserInfo(address || ''));\n      }\n      dispatch(alertSuccess('You have successfully staked.'));\n    } catch (error) {\n      console.log(error)\n      dispatch(alertFailure(\"Transaction submited failure\"))\n\n      dispatch({\n        type: sotaTiersActions.DEPOSIT_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const withdraw = (address: string | null | undefined, amount: string, library: Web3Provider, tokenAddress: string) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.WITHDRAW_LOADING });\n    try {\n      let result = {} as any;\n\n      const contract = getContract(process.env.REACT_APP_TIERS as string, RedKite.abi, library, address || '');\n      result = await contract?.withdrawERC20(tokenAddress, convertToWei(amount));\n\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_SUCCESS,\n        payload: result,\n      });\n\n      await result.wait(1);\n      if(result) {\n        dispatch(getBalance(address || ''));\n        dispatch(getAllowance(address || ''));\n        dispatch(getUserTier(address || ''));\n        dispatch(getUserInfo(address || ''));\n      }\n      dispatch(alertSuccess('You have successfully unstaked.'));\n\n    } catch (error) {\n      console.log(error)\n      dispatch(alertFailure(\"Transaction submit failure\"))\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const getWithdrawFee = (address: string | null | undefined, amount: string) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.WITHDRAW_FEE_LOADING });\n    try {\n      const { appChainID } = getState().appNetwork.data;\n      const connector = getState().connector.data;\n      let data = {};\n      const contract = getContractInstance(RedKite.abi, process.env.REACT_APP_TIERS as string, connector, appChainID);\n\n      data = await contract?.methods.calculateWithdrawFee(address, process.env.REACT_APP_PKF, convertToWei(amount)).call();\n\n      const fee = convertFromWei(data);\n      const feePercent = parseFloat(fee || '0')*100/parseFloat(amount || '0')\n\n      const result = {\n        fee: fee,\n        feePercent: feePercent\n      }\n\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_FEE_SUCCESS,\n        payload: result,\n      });\n\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_FEE_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\n\nexport const getWithdrawPercent = () => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.WITHDRAW_PERCENT_LOADING });\n    try {\n      const { appChainID } = getState().appNetwork.data;\n      const { connector } = getState().connector.data || \"Metamask\";\n      let result = {};\n      let data = [];\n      const contract = getContractInstance(RedKite.abi, process.env.REACT_APP_TIERS as string, connector, appChainID);\n\n     result = await contract?.methods.withdrawFeePercent(0).call();\n      data.push(result)\n      result = await contract?.methods.withdrawFeePercent(1).call();\n      data.push(result)\n      result = await contract?.methods.withdrawFeePercent(2).call();\n      data.push(result)\n      result = await contract?.methods.withdrawFeePercent(3).call();\n      data.push(result)\n      result = await contract?.methods.withdrawFeePercent(4).call();\n      data.push(result)\n      result = await contract?.methods.withdrawFeePercent(5).call();\n      data.push(result)\n\n      result = {\n        ...result,\n        penaltiesPercent: data\n      }\n\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_PERCENT_SUCCESS,\n        payload: result,\n      });\n\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTiersActions.WITHDRAW_PERCENT_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const getRates = (tokens: any) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>, getState: () => any) => {\n    dispatch({ type: sotaTiersActions.RATES_LOADING });\n    try {\n      const { appChainID } = getState().appNetwork.data;\n      const { connector } = getState().connector.data || \"Metamask\";\n      const contract = getContractInstance(\n        RedKite.abi,\n        process.env.REACT_APP_TIERS as string,\n        connector,\n        appChainID,\n        SmartContractMethod.Read,\n        true);\n\n      let data = [] as any;\n      for(let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n        const result = await contract?.methods.externalToken(token.address).call();\n        const rate = (new BigNumber(result.rate)).div(new BigNumber(10**result.decimals)).toString();\n        data.push({rate, symbol: token.symbol, name: token.name})\n      }\n      const result = {\n        data: data\n      }\n\n      dispatch({\n        type: sotaTiersActions.RATES_SUCCESS,\n        payload: result,\n      });\n\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTiersActions.RATES_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\n\n"]},"metadata":{},"sourceType":"module"}