{"ast":null,"code":"var _jsxFileName = \"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Dashboard/Card/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport useStyles from './style';\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport { Link } from 'react-router-dom';\nimport { ACCEPT_CURRENCY, BUY_TYPE, NETWORK } from '../../../constants';\nimport useFetch from '../../../hooks/useFetch';\nimport { getIconCurrencyUsdt } from \"../../../utils/usdt\";\nimport { PoolStatus } from \"../../../utils/getPoolStatus\";\nimport { getAccessPoolText, getProgressWithPools, getTokenSold } from \"../../../utils/campaign\";\nimport BigNumber from 'bignumber.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst dotIcon = '/images/icons/dot.svg';\nconst EthereumIcon = \"/images/ethereum.svg\";\nconst BSCIcon = \"/images/bsc.svg\";\n\nconst Card = props => {\n  _s();\n\n  const styles = useStyles();\n  const {\n    pool,\n    autoFetch\n  } = props;\n  const {\n    data: participants\n  } = useFetch(`/user/counting/${pool.id}`);\n  const [progress, setProgress] = useState('0');\n  const [tokenSold, setTokenSold] = useState('0');\n  const [totalSoldCoin, setTotalSoldCoin] = useState('0');\n  useEffect(() => {\n    const getTokenProgressInfoByPool = async () => {\n      console.log('Run getTokenProgressInfoByPool========>');\n\n      if (autoFetch) {\n        pool.tokenSold = await getTokenSold(pool);\n      }\n\n      let {\n        progress: progressPercent,\n        tokenSold: totalTokenSold,\n        totalSoldCoin: totalToken\n      } = getProgressWithPools(pool);\n      setProgress(progressPercent);\n      setTokenSold(totalTokenSold);\n      setTotalSoldCoin(totalToken);\n    };\n\n    getTokenProgressInfoByPool();\n\n    if (autoFetch) {\n      const intervalProgress = setInterval(() => {\n        getTokenProgressInfoByPool();\n      }, 10000);\n      return () => {\n        intervalProgress && clearInterval(intervalProgress);\n      };\n    }\n  }, [pool]); // useEffect(() => {\n  //   const currentTime = moment().unix()\n  //   let diffTime = 0;\n  //   if(pool.start_join_pool_time > currentTime) {\n  //     diffTime = parseInt(pool.start_join_pool_time) - currentTime;\n  //   } else if(pool.start_time > currentTime) {\n  //     diffTime = parseInt(pool.start_time) - currentTime;\n  //   }\n  //   let intervalCount: any;\n  //   if (diffTime > 0) {\n  //     let timeLeftToStart = diffTime * 1000\n  //   const interval = 1000;\n  //     intervalCount = setInterval(() => {\n  //       timeLeftToStart -= interval;\n  //       const timeLeftDuration = moment.duration(timeLeftToStart, 'milliseconds');\n  //       let timeLeftString = '';\n  //       if (timeLeftToStart >= 86400000) {\n  //         timeLeftString = 'In ' + timeLeftDuration.days() + \" days\"\n  //       } else {\n  //         timeLeftString = 'In ' + timeLeftDuration.hours() + \":\" + timeLeftDuration.minutes() + \":\" + timeLeftDuration.seconds()\n  //       }\n  //       setTimeLeft(timeLeftString)\n  //     }, interval);\n  //   }\n  //   return () => clearInterval(intervalCount);\n  // }, [])\n\n  const {\n    currencyIcon,\n    currencyName\n  } = getIconCurrencyUsdt({\n    purchasableCurrency: pool === null || pool === void 0 ? void 0 : pool.accept_currency,\n    networkAvailable: pool === null || pool === void 0 ? void 0 : pool.network_available\n  });\n  return /*#__PURE__*/_jsxDEV(Link, {\n    to: `/buy-token/${pool.id}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.card,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.cardHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: pool.banner\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), pool.status == PoolStatus.Closed && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time ended\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Ended\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 48\n        }, this), pool.status == PoolStatus.TBA && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time tba\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"TBA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 45\n        }, this), pool.status == PoolStatus.Filled && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time filled\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Filled\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 48\n        }, this), pool.status == PoolStatus.Progress && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time in-progress\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"In Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 50\n        }, this), pool.status == PoolStatus.Joining && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time joining\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Whitelisting\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 49\n        }, this), pool.status == PoolStatus.Claimable && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time claimable\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Claimable\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 51\n        }, this), pool.status == PoolStatus.Upcoming && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time upcoming\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Upcoming\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 50\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.cardBody,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-content__title\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: pool.token_images\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: pool.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [pool.name, ` (${pool.symbol})`]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"card-content__content\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Rate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"total\",\n              children: [\"1 \", pool.symbol, \" =\\xA0\", pool.accept_currency === ACCEPT_CURRENCY.ETH && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [numberWithCommas(pool === null || pool === void 0 ? void 0 : pool.price_usdt, 4), \" USD\"]\n              }, void 0, true), pool.accept_currency !== ACCEPT_CURRENCY.ETH && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [numberWithCommas(pool === null || pool === void 0 ? void 0 : pool.token_conversion_rate, 4), \" \", ' ', currencyName]\n              }, void 0, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Participants\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"total\",\n              children: pool.buy_type == BUY_TYPE.WHITELIST_LOTTERY ? numberWithCommas(participants) : 'All'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Access\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"total\",\n              children: getAccessPoolText(pool)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Network\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"total\",\n              children: pool.network_available === NETWORK.ETHEREUM ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: EthereumIcon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 64\n              }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n                src: BSCIcon\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 93\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `current-progress ${parseFloat(progress) > 0 ? '' : 'inactive'}`,\n              style: {\n                width: `${parseFloat(progress) > 99 ? 100 : Math.round(parseFloat(progress))}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [new BigNumber(progress).gte(100) ? new BigNumber(progress).toFixed(0) : new BigNumber(progress).toFixed(2), \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [numberWithCommas(tokenSold, 0), \"/\", numberWithCommas(totalSoldCoin)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Card, \"ot9jwIsRr/HzPqoYd0Gt3/0RTH4=\", false, function () {\n  return [useStyles, useFetch];\n});\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Dashboard/Card/index.tsx"],"names":["React","useEffect","useState","useStyles","numberWithCommas","Link","ACCEPT_CURRENCY","BUY_TYPE","NETWORK","useFetch","getIconCurrencyUsdt","PoolStatus","getAccessPoolText","getProgressWithPools","getTokenSold","BigNumber","dotIcon","EthereumIcon","BSCIcon","Card","props","styles","pool","autoFetch","data","participants","id","progress","setProgress","tokenSold","setTokenSold","totalSoldCoin","setTotalSoldCoin","getTokenProgressInfoByPool","console","log","progressPercent","totalTokenSold","totalToken","intervalProgress","setInterval","clearInterval","currencyIcon","currencyName","purchasableCurrency","accept_currency","networkAvailable","network_available","card","cardHeader","banner","status","Closed","TBA","Filled","Progress","Joining","Claimable","Upcoming","cardBody","token_images","title","name","symbol","ETH","price_usdt","token_conversion_rate","buy_type","WHITELIST_LOTTERY","ETHEREUM","parseFloat","width","Math","round","gte","toFixed"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport useStyles from './style';\nimport {numberWithCommas} from '../../../utils/formatNumber';\nimport {Link} from 'react-router-dom';\nimport {ACCEPT_CURRENCY, BUY_TYPE, NETWORK} from '../../../constants';\nimport useFetch from '../../../hooks/useFetch';\nimport {getIconCurrencyUsdt} from \"../../../utils/usdt\";\nimport {PoolStatus} from \"../../../utils/getPoolStatus\";\nimport {checkPoolIsFinish, getAccessPoolText, getProgressWithPools, getTokenSold} from \"../../../utils/campaign\";\nimport BigNumber from 'bignumber.js';\n\nconst dotIcon = '/images/icons/dot.svg'\nconst EthereumIcon = \"/images/ethereum.svg\";\nconst BSCIcon = \"/images/bsc.svg\";\n\nconst Card = (props: any): JSX.Element => {\n  const styles = useStyles();\n  const {\n    pool, autoFetch\n  } = props;\n  const { data: participants } = useFetch<any>(`/user/counting/${pool.id}`);\n\n  const [progress, setProgress] = useState('0');\n  const [tokenSold, setTokenSold] = useState('0');\n  const [totalSoldCoin, setTotalSoldCoin] = useState('0');\n  useEffect(() => {\n    const getTokenProgressInfoByPool = async () => {\n      console.log('Run getTokenProgressInfoByPool========>');\n      if (autoFetch) {\n        pool.tokenSold = await getTokenSold(pool);\n      }\n      let {\n        progress: progressPercent,\n        tokenSold: totalTokenSold,\n        totalSoldCoin: totalToken,\n      } = getProgressWithPools(pool);\n\n      setProgress(progressPercent);\n      setTokenSold(totalTokenSold);\n      setTotalSoldCoin(totalToken);\n    };\n\n    getTokenProgressInfoByPool();\n    if (autoFetch) {\n      const intervalProgress = setInterval(() => {\n        getTokenProgressInfoByPool();\n      }, 10000);\n\n      return () => {\n        intervalProgress && clearInterval(intervalProgress);\n      }\n    }\n  }, [pool]);\n\n  // useEffect(() => {\n  //   const currentTime = moment().unix()\n  //   let diffTime = 0;\n  //   if(pool.start_join_pool_time > currentTime) {\n  //     diffTime = parseInt(pool.start_join_pool_time) - currentTime;\n  //   } else if(pool.start_time > currentTime) {\n  //     diffTime = parseInt(pool.start_time) - currentTime;\n  //   }\n\n  //   let intervalCount: any;\n  //   if (diffTime > 0) {\n  //     let timeLeftToStart = diffTime * 1000\n  //   const interval = 1000;\n\n  //     intervalCount = setInterval(() => {\n  //       timeLeftToStart -= interval;\n  //       const timeLeftDuration = moment.duration(timeLeftToStart, 'milliseconds');\n  //       let timeLeftString = '';\n  //       if (timeLeftToStart >= 86400000) {\n  //         timeLeftString = 'In ' + timeLeftDuration.days() + \" days\"\n  //       } else {\n  //         timeLeftString = 'In ' + timeLeftDuration.hours() + \":\" + timeLeftDuration.minutes() + \":\" + timeLeftDuration.seconds()\n  //       }\n  //       setTimeLeft(timeLeftString)\n  //     }, interval);\n  //   }\n\n  //   return () => clearInterval(intervalCount);\n  // }, [])\n\n  const { currencyIcon, currencyName } = getIconCurrencyUsdt({ purchasableCurrency: pool?.accept_currency, networkAvailable: pool?.network_available });\n\n  return (\n    <Link to={`/buy-token/${pool.id}`}>\n      <div className={styles.card}>\n        <div className={styles.cardHeader}>\n          <img src={pool.banner} />\n          {pool.status == PoolStatus.Closed && <div className=\"time ended\">\n            <span>Ended</span>\n          </div>}\n          {pool.status == PoolStatus.TBA && <div className=\"time tba\">\n            <span>TBA</span>\n          </div>}\n          {pool.status == PoolStatus.Filled && <div className=\"time filled\">\n            <span>Filled</span>\n          </div>}\n          {pool.status == PoolStatus.Progress && <div className=\"time in-progress\">\n            <span>In Progress</span>\n          </div>}\n          {pool.status == PoolStatus.Joining && <div className=\"time joining\">\n            <span>Whitelisting</span>\n          </div>}\n          {pool.status == PoolStatus.Claimable && <div className=\"time claimable\">\n            <span>Claimable</span>\n          </div>}\n          {pool.status == PoolStatus.Upcoming && <div className=\"time upcoming\">\n            <span>Upcoming</span>\n          </div>}\n        </div>\n        <div className={styles.cardBody}>\n          <div className=\"card-content__title\">\n            <img src={pool.token_images} />\n            <div>\n              <h2>{pool.title}</h2>\n              <p>{pool.name}{` (${pool.symbol})`}</p>\n            </div>\n          </div>\n          <ul className=\"card-content__content\">\n            <li>\n              <span>Rate</span>\n              <span className=\"total\">1 {pool.symbol} =&nbsp;\n\n                {pool.accept_currency === ACCEPT_CURRENCY.ETH &&\n                  <>\n                    {numberWithCommas(pool?.price_usdt, 4)} USD\n                  </>\n                }\n\n                {pool.accept_currency !== ACCEPT_CURRENCY.ETH &&\n                  <>\n                    {numberWithCommas(pool?.token_conversion_rate, 4)} {' '}\n                    {currencyName}\n                    {/*{pool?.accept_currency?.toUpperCase()}*/}\n                  </>\n                }\n\n                {/*{numberWithCommas(pool.price_usdt, 4)} USDT*/}\n                {/*{pool.accept_currency === ACCEPT_CURRENCY.ETH ?*/}\n                {/*  numberWithCommas(pool.ether_conversion_rate, 4) :*/}\n                {/*  numberWithCommas(pool.token_conversion_rate, 4)} {pool.accept_currency.toUpperCase()}*/}\n              </span>\n            </li>\n            <li>\n              <span>Participants</span>\n              <span className=\"total\">{ pool.buy_type == BUY_TYPE.WHITELIST_LOTTERY ? numberWithCommas(participants) : 'All' }</span>\n            </li>\n            <li>\n              <span>Access</span>\n              <span className=\"total\">\n                {\n                  getAccessPoolText(pool)\n                }\n              </span>\n            </li>\n            <li>\n              <span>Network</span>\n              <span className=\"total\">\n                {pool.network_available === NETWORK.ETHEREUM ? <img src={EthereumIcon} /> : <img src={BSCIcon} />}\n              </span>\n            </li>\n          </ul>\n\n          {/* {pool.status == POOL_STATUS.UPCOMMING && <div className=\"token-area\">\n            {pool.network_available === NETWORK.ETHEREUM && <div>\n              <img src={EthereumIcon} />\n              <span>Ethereum</span>\n            </div>}\n            {pool.network_available === NETWORK.BSC && <div>\n              <img src={BSCIcon}/>\n              <span>BSC</span>\n            </div>}\n          </div>} */}\n\n          <div className=\"progress-area\">\n            <p>Progress</p>\n            <div className=\"progress\">\n              <span\n                className={`current-progress ${parseFloat(progress) > 0 ? '' : 'inactive'}`}\n                style={{ width: `${parseFloat(progress) > 99 ? 100 : Math.round(parseFloat(progress))}%` }}\n              ></span>\n            </div>\n            <div>\n              <div>\n                <span>\n                  {new BigNumber(progress).gte(100) ?\n                    new BigNumber(progress).toFixed(0) :\n                    new BigNumber(progress).toFixed(2)\n                  }\n                  %\n                </span>\n              </div>\n              <span>\n                {numberWithCommas(tokenSold, 0)}\n                /\n                {numberWithCommas(totalSoldCoin)}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}