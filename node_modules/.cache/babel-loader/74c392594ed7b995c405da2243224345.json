{"ast":null,"code":"import { BSC_RPC_URL } from '../constants/network';\nimport { ETH_CHAIN_ID, BSC_CHAIN_ID } from '../constants/network';\nimport { ConnectorNames } from '../constants/connectors';\nconst BSC_CHAIN_ALIAS = process.env.REACT_APP_BSC_BSC_CHAIN_ALIAS;\nconst ETH_CHAIN_ALIAS = process.env.REACT_APP_BSC_ETH_CHAIN_ALIAS;\nconst REACT_APP_NETWORK_BSC_NAME = process.env.REACT_APP_NETWORK_BSC_NAME;\nconst BSC_ADDRESS = parseInt(process.env.REACT_APP_BSC_CHAIN_ID, 10);\nexport const requestSupportNetwork = async (chainId, walletName) => {\n  const provider = walletName === ConnectorNames.MetaMask ? window.ethereum : window.BinanceChain;\n\n  if (provider) {\n    const currentChainId = Number(walletName === ConnectorNames.BSC ? provider.chainId : await provider.request({\n      method: 'eth_chainId'\n    })).toString();\n\n    try {\n      walletName === ConnectorNames.MetaMask && chainId === BSC_CHAIN_ID ? await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [{\n          chainId: `0x${BSC_ADDRESS.toString(16)}`,\n          chainName: REACT_APP_NETWORK_BSC_NAME,\n          nativeCurrency: {\n            name: 'BNB',\n            symbol: 'bnb',\n            decimals: 18\n          },\n          rpcUrls: [BSC_RPC_URL],\n          blockExplorerUrls: ['https://bscscan.com/']\n        }]\n      }) : chainId !== currentChainId && walletName === ConnectorNames.BSC && (await provider.switchNetwork(chainId === ETH_CHAIN_ID ? ETH_CHAIN_ALIAS : BSC_CHAIN_ALIAS));\n      return true;\n    } catch (error) {\n      console.log(error.message);\n      return false;\n    }\n  } else {\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\");\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/setupNetwork.ts"],"names":["BSC_RPC_URL","ETH_CHAIN_ID","BSC_CHAIN_ID","ConnectorNames","BSC_CHAIN_ALIAS","process","env","REACT_APP_BSC_BSC_CHAIN_ALIAS","ETH_CHAIN_ALIAS","REACT_APP_BSC_ETH_CHAIN_ALIAS","REACT_APP_NETWORK_BSC_NAME","BSC_ADDRESS","parseInt","REACT_APP_BSC_CHAIN_ID","requestSupportNetwork","chainId","walletName","provider","MetaMask","window","ethereum","BinanceChain","currentChainId","Number","BSC","request","method","toString","params","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","switchNetwork","error","console","log","message"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,sBAA1B;AACA,SAAQC,YAAR,EAAsBC,YAAtB,QAAyC,sBAAzC;AACA,SAAQC,cAAR,QAA6B,yBAA7B;AAEA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAR,CAAYC,6BAApC;AACA,MAAMC,eAAe,GAAGH,OAAO,CAACC,GAAR,CAAYG,6BAApC;AACA,MAAMC,0BAA0B,GAAGL,OAAO,CAACC,GAAR,CAAYI,0BAA/C;AACA,MAAMC,WAAW,GAAGC,QAAQ,CAACP,OAAO,CAACC,GAAR,CAAYO,sBAAb,EAA+C,EAA/C,CAA5B;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAOC,OAAP,EAAwBC,UAAxB,KAA+C;AAClF,QAAMC,QAAQ,GAAGD,UAAU,KAAKb,cAAc,CAACe,QAA9B,GAA0CC,MAAD,CAAgBC,QAAzD,GAAqED,MAAD,CAAgBE,YAArG;;AAEA,MAAIJ,QAAJ,EAAc;AACZ,UAAMK,cAAc,GAAGC,MAAM,CAACP,UAAU,KAAKb,cAAc,CAACqB,GAA9B,GAAoCP,QAAQ,CAACF,OAA7C,GAAuD,MAAME,QAAQ,CAACQ,OAAT,CAAiB;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAjB,CAA9D,CAAN,CAA+GC,QAA/G,EAAvB;;AACA,QAAI;AACFX,MAAAA,UAAU,KAAKb,cAAc,CAACe,QAA9B,IAA0CH,OAAO,KAAKb,YAAtD,GACI,MAAMe,QAAQ,CAACQ,OAAT,CAAiB;AACvBC,QAAAA,MAAM,EAAE,yBADe;AAEvBE,QAAAA,MAAM,EAAE,CACN;AACEb,UAAAA,OAAO,EAAG,KAAIJ,WAAW,CAACgB,QAAZ,CAAqB,EAArB,CAAyB,EADzC;AAEEE,UAAAA,SAAS,EAAEnB,0BAFb;AAGEoB,UAAAA,cAAc,EAAE;AACdC,YAAAA,IAAI,EAAE,KADQ;AAEdC,YAAAA,MAAM,EAAE,KAFM;AAGdC,YAAAA,QAAQ,EAAE;AAHI,WAHlB;AAQEC,UAAAA,OAAO,EAAE,CAAClC,WAAD,CARX;AASEmC,UAAAA,iBAAiB,EAAE,CAAC,sBAAD;AATrB,SADM;AAFe,OAAjB,CADV,GAiBIpB,OAAO,KAAKO,cAAZ,IAA8BN,UAAU,KAAKb,cAAc,CAACqB,GAA5D,KAAmE,MAAMP,QAAQ,CAACmB,aAAT,CAAuBrB,OAAO,KAAKd,YAAZ,GAA2BO,eAA3B,GAA6CJ,eAApE,CAAzE,CAjBJ;AAmBA,aAAO,IAAP;AACD,KArBD,CAqBE,OAAOiC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACA,aAAO,KAAP;AACD;AACF,GA3BD,MA2BO;AACLF,IAAAA,OAAO,CAACD,KAAR,CAAc,8EAAd;AACA,WAAO,KAAP;AACD;AACF,CAlCM","sourcesContent":["import {BSC_RPC_URL} from '../constants/network';\nimport {ETH_CHAIN_ID, BSC_CHAIN_ID} from '../constants/network';\nimport {ConnectorNames} from '../constants/connectors';\n\nconst BSC_CHAIN_ALIAS = process.env.REACT_APP_BSC_BSC_CHAIN_ALIAS;\nconst ETH_CHAIN_ALIAS = process.env.REACT_APP_BSC_ETH_CHAIN_ALIAS;\nconst REACT_APP_NETWORK_BSC_NAME = process.env.REACT_APP_NETWORK_BSC_NAME;\nconst BSC_ADDRESS = parseInt(process.env.REACT_APP_BSC_CHAIN_ID as string, 10);\n\nexport const requestSupportNetwork = async (chainId: string, walletName: string) => {\n  const provider = walletName === ConnectorNames.MetaMask ? (window as any).ethereum : (window as any).BinanceChain;\n\n  if (provider) {\n    const currentChainId = Number(walletName === ConnectorNames.BSC ? provider.chainId : await provider.request({method: 'eth_chainId'})).toString();\n    try {\n      walletName === ConnectorNames.MetaMask && chainId === BSC_CHAIN_ID\n        ? await provider.request({\n          method: 'wallet_addEthereumChain',\n          params: [\n            {\n              chainId: `0x${BSC_ADDRESS.toString(16)}`,\n              chainName: REACT_APP_NETWORK_BSC_NAME,\n              nativeCurrency: {\n                name: 'BNB',\n                symbol: 'bnb',\n                decimals: 18,\n              },\n              rpcUrls: [BSC_RPC_URL],\n              blockExplorerUrls: ['https://bscscan.com/'],\n            },\n          ],\n        })\n        : chainId !== currentChainId && walletName === ConnectorNames.BSC && await provider.switchNetwork(chainId === ETH_CHAIN_ID ? ETH_CHAIN_ALIAS : BSC_CHAIN_ALIAS);\n\n      return true\n    } catch (error) {\n      console.log(error.message);\n      return false;\n    }\n  } else {\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\")\n    return false\n  }\n}\n"]},"metadata":{},"sourceType":"module"}