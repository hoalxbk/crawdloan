{"ast":null,"code":"import moment from 'moment';\nimport momentTimezone from 'moment-timezone';\nimport { DATETIME_FORMAT } from \"../constants\";\nexport const convertTimeToStringFormat = date => {\n  const timezone = momentTimezone.tz(date, moment.tz.guess());\n  return timezone.format(\"h:mm A, DD MMMM YYYY ([GMT]Z)\");\n};\nexport const convertTimeToStringFormatWithoutGMT = date => {\n  const timezone = momentTimezone.tz(date, moment.tz.guess());\n  return timezone.format(\"h:mm A, DD MMMM YYYY\");\n};\nexport const convertUnixTimeToDateTime = (time, formatType = 2) => {\n  let type;\n\n  if (formatType == 1) {\n    type = \"h:mm A, DD MMMM YYYY ([GMT]Z)\";\n  } else if (formatType == 2) {\n    type = \"hh:mm:ss A MM/DD/yyyy [GMT]ZZ\";\n  }\n\n  return moment.unix(time).format(type);\n};\nexport const convertDateTimeToUnix = time => {\n  if (!time) return \"\";\n  const unixTime = moment(time).format(\"x\");\n  return moment(time).format('x').substring(0, unixTime.length - 3);\n};\nexport const buildMomentTimezone = datetime => {\n  if (!datetime) return ''; // const momentTimezoneObject = moment(datetime).local();\n\n  const momentTimezoneObject = moment(moment.utc(datetime)).local();\n  return momentTimezoneObject;\n};\nexport const convertDateLocalWithTimezone = datetime => {\n  if (!datetime) return '';\n  const date = buildMomentTimezone(datetime).format(\"hh:mm:ss A\");\n  return date;\n};\nexport const convertTimeLocalWithTimezone = datetime => {\n  if (!datetime) return '';\n  const time = buildMomentTimezone(datetime).format(\"MM/DD/YYYY\");\n  return time;\n};\nexport const convertDateTimeStringToMomentObject = datetime => {\n  // Convert datetime from \"2021-05-28 08:45:59\" to Moment Object\n  return moment(datetime, DATETIME_FORMAT);\n};\nexport const convertMomentObjectToDateTimeString = datetime => {\n  // Convert datetime from Moment Object to String \"2021-05-28 08:45:59\"\n  return moment(datetime).format(DATETIME_FORMAT);\n};\nexport const unixTimeNow = () => {\n  return parseInt(Date.now() / 1000 + '');\n};\nexport const unixTime = time => {\n  return moment(time).unix();\n};\nexport const timeAgo = time => {\n  return moment(time).fromNow();\n};","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/convertDate.ts"],"names":["moment","momentTimezone","DATETIME_FORMAT","convertTimeToStringFormat","date","timezone","tz","guess","format","convertTimeToStringFormatWithoutGMT","convertUnixTimeToDateTime","time","formatType","type","unix","convertDateTimeToUnix","unixTime","substring","length","buildMomentTimezone","datetime","momentTimezoneObject","utc","local","convertDateLocalWithTimezone","convertTimeLocalWithTimezone","convertDateTimeStringToMomentObject","convertMomentObjectToDateTimeString","unixTimeNow","parseInt","Date","now","timeAgo","fromNow"],"mappings":"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","sourcesContent":["import moment from 'moment'\nimport momentTimezone from 'moment-timezone';\nimport {DATETIME_FORMAT} from \"../constants\";\n\nexport const convertTimeToStringFormat = (date: Date) => {\n  const timezone = momentTimezone.tz(date, moment.tz.guess());\n  return timezone.format(\"h:mm A, DD MMMM YYYY ([GMT]Z)\");\n}\n\nexport const convertTimeToStringFormatWithoutGMT = (date: Date) => {\n  const timezone = momentTimezone.tz(date, moment.tz.guess());\n  return timezone.format(\"h:mm A, DD MMMM YYYY\");\n}\n\nexport const convertUnixTimeToDateTime = (time: number, formatType = 2) => {\n  let type;\n  if (formatType == 1) {\n    type = \"h:mm A, DD MMMM YYYY ([GMT]Z)\";\n  } else if (formatType == 2) {\n    type = \"hh:mm:ss A MM/DD/yyyy [GMT]ZZ\";\n  }\n  return moment.unix(time).format(type);\n}\n\nexport const convertDateTimeToUnix = (time: any): string => {\n  if (!time) return \"\";\n  const unixTime = moment(time).format(\"x\");\n  return moment(time).format('x').substring(0, unixTime.length - 3);\n}\n\nexport const buildMomentTimezone = (datetime: any): any => {\n  if (!datetime) return '';\n\n  // const momentTimezoneObject = moment(datetime).local();\n  const momentTimezoneObject = moment(moment.utc(datetime)).local();\n  return momentTimezoneObject;\n}\n\nexport const convertDateLocalWithTimezone = (datetime: any): string => {\n  if (!datetime) return '';\n  const date = buildMomentTimezone(datetime).format(\"hh:mm:ss A\");\n  return date;\n}\n\nexport const convertTimeLocalWithTimezone = (datetime: any): string => {\n  if (!datetime) return '';\n  const time = buildMomentTimezone(datetime).format(\"MM/DD/YYYY\");\n  return time;\n}\n\nexport const convertDateTimeStringToMomentObject = (datetime: string) => {\n  // Convert datetime from \"2021-05-28 08:45:59\" to Moment Object\n  return moment(datetime, DATETIME_FORMAT);\n};\n\nexport const convertMomentObjectToDateTimeString = (datetime: any) => {\n  // Convert datetime from Moment Object to String \"2021-05-28 08:45:59\"\n  return moment(datetime).format(DATETIME_FORMAT);\n};\n\nexport const unixTimeNow = () => {\n  return parseInt((Date.now() / 1000) + '')\n};\n\nexport const unixTime = (time: any) => {\n  return moment(time).unix();\n};\n\nexport const timeAgo = (time: any) => {\n  return moment(time).fromNow()\n};\n"]},"metadata":{},"sourceType":"module"}