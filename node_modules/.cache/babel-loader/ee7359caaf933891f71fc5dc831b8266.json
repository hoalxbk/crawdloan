{"ast":null,"code":"import { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector';\nimport { ChainId } from '../constants/network';\nconst CHAIN_ID_NETWORK_ARGUMENT = {\n  [ChainId.MAINNET]: 'mainnet',\n  [ChainId.ROPSTEN]: 'ropsten',\n  [ChainId.RINKEBY]: 'rinkeby',\n  [ChainId.KOVAN]: 'kovan'\n};\nexport const OVERLAY_READY = 'OVERLAY_READY';\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      //@ts-ignore\n      const {\n        default: Fortmatic\n      } = await import('fortmatic');\n      const {\n        apiKey,\n        chainId\n      } = this;\n\n      if (chainId in ChainId) {\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId]);\n      } else {\n        throw new Error(`Unsupported Network ID: ${chainId}`);\n      }\n    }\n\n    const provider = this.fortmatic.getProvider();\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval);\n          this.emit(OVERLAY_READY);\n          resolve(undefined);\n        }\n      }, 200);\n    });\n    const [account] = await Promise.all([provider.enable().then(accounts => accounts[0]), pollForOverlayReady]);\n    return {\n      provider: this.fortmatic.getProvider(),\n      chainId: this.chainId,\n      account\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/connectors/Fortmatic.ts"],"names":["FortmaticConnector","FortmaticConnectorCore","ChainId","CHAIN_ID_NETWORK_ARGUMENT","MAINNET","ROPSTEN","RINKEBY","KOVAN","OVERLAY_READY","activate","fortmatic","default","Fortmatic","apiKey","chainId","Error","provider","getProvider","pollForOverlayReady","Promise","resolve","interval","setInterval","overlayReady","clearInterval","emit","undefined","account","all","enable","then","accounts"],"mappings":"AAAA,SAAQA,kBAAkB,IAAIC,sBAA9B,QAA2D,iCAA3D;AACA,SAAQC,OAAR,QAAsB,sBAAtB;AAEA,MAAMC,yBAAyB,GAAG;AAChC,GAACD,OAAO,CAACE,OAAT,GAAmB,SADa;AAEhC,GAACF,OAAO,CAACG,OAAT,GAAmB,SAFa;AAGhC,GAACH,OAAO,CAACI,OAAT,GAAmB,SAHa;AAIhC,GAACJ,OAAO,CAACK,KAAT,GAAiB;AAJe,CAAlC;AAOA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AAIP,OAAO,MAAMR,kBAAN,SAAiCC,sBAAjC,CAAwD;AAC/C,QAARQ,QAAQ,GAAG;AACf,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB;AACA,YAAM;AAACC,QAAAA,OAAO,EAAEC;AAAV,UAAuB,MAAM,OAAO,WAAP,CAAnC;AACA,YAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA;AAAT,UAAoB,IAA1B;;AACA,UAAIA,OAAO,IAAIZ,OAAf,EAAwB;AACtB,aAAKQ,SAAL,GAAiB,IAAIE,SAAJ,CAAcC,MAAd,EAAsBV,yBAAyB,CAACW,OAAD,CAA/C,CAAjB;AACD,OAFD,MAEO;AACL,cAAM,IAAIC,KAAJ,CAAW,2BAA0BD,OAAQ,EAA7C,CAAN;AACD;AACF;;AAED,UAAME,QAAQ,GAAG,KAAKN,SAAL,CAAeO,WAAf,EAAjB;AAEA,UAAMC,mBAAmB,GAAG,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACjD,YAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAIN,QAAQ,CAACO,YAAb,EAA2B;AACzBC,UAAAA,aAAa,CAACH,QAAD,CAAb;AACA,eAAKI,IAAL,CAAUjB,aAAV;AACAY,UAAAA,OAAO,CAACM,SAAD,CAAP;AACD;AACF,OAN2B,EAMzB,GANyB,CAA5B;AAOD,KAR2B,CAA5B;AAUA,UAAM,CAACC,OAAD,IAAY,MAAMR,OAAO,CAACS,GAAR,CAAY,CAClCZ,QAAQ,CAACa,MAAT,GAAkBC,IAAlB,CAAwBC,QAAD,IAAwBA,QAAQ,CAAC,CAAD,CAAvD,CADkC,EAElCb,mBAFkC,CAAZ,CAAxB;AAKA,WAAO;AACLF,MAAAA,QAAQ,EAAE,KAAKN,SAAL,CAAeO,WAAf,EADL;AAELH,MAAAA,OAAO,EAAG,IAAD,CAAcA,OAFlB;AAGLa,MAAAA;AAHK,KAAP;AAKD;;AAnC4D","sourcesContent":["import {FortmaticConnector as FortmaticConnectorCore} from '@web3-react/fortmatic-connector'\nimport {ChainId} from '../constants/network';\n\nconst CHAIN_ID_NETWORK_ARGUMENT = {\n  [ChainId.MAINNET]: 'mainnet',\n  [ChainId.ROPSTEN]: 'ropsten',\n  [ChainId.RINKEBY]: 'rinkeby',\n  [ChainId.KOVAN]: 'kovan',\n}\n\nexport const OVERLAY_READY = 'OVERLAY_READY'\n\ntype FortmaticSupportedChains = Extract<ChainId, ChainId.MAINNET | ChainId.ROPSTEN | ChainId.RINKEBY | ChainId.KOVAN>\n\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      //@ts-ignore\n      const {default: Fortmatic} = await import('fortmatic');\n      const {apiKey, chainId} = this as any;\n      if (chainId in ChainId) {\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId as FortmaticSupportedChains]);\n      } else {\n        throw new Error(`Unsupported Network ID: ${chainId}`)\n      }\n    }\n\n    const provider = this.fortmatic.getProvider()\n\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval)\n          this.emit(OVERLAY_READY)\n          resolve(undefined);\n        }\n      }, 200)\n    })\n\n    const [account] = await Promise.all([\n      provider.enable().then((accounts: string[]) => accounts[0]),\n      pollForOverlayReady\n    ])\n\n    return {\n      provider: this.fortmatic.getProvider(),\n      chainId: (this as any).chainId,\n      account\n    }\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}