{"ast":null,"code":"var _jsxFileName = \"/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/ConnectWalletBox/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport mobile from 'is-mobile';\nimport { settingAppNetwork, NetworkUpdateType } from '../../../../store/actions/appNetwork';\nimport { HeaderContext } from '../context/HeaderContext';\nimport useStyles from './style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ConnectWalletBox = props => {\n  _s();\n\n  const styles = useStyles();\n  const dispatch = useDispatch();\n  const {\n    appNetwork,\n    isAppNetwork = false,\n    handleProviderChosen,\n    wallet,\n    walletName,\n    connectWalletLoading,\n    forceEnable,\n    handleClose\n  } = props;\n  const {\n    appChainID\n  } = useSelector(state => state.appNetwork).data;\n  const {\n    agreedTerms\n  } = useContext(HeaderContext);\n\n  const handleNetworkChange = (appNetwork, updatedVal, agreedTerms = false) => {\n    if (agreedTerms || forceEnable) {\n      if (appNetwork) {\n        dispatch(settingAppNetwork(NetworkUpdateType.App, updatedVal));\n        handleClose && handleClose();\n        return;\n      }\n\n      wallet && handleProviderChosen && handleProviderChosen(wallet.name, wallet.connector);\n    }\n  };\n\n  const pointerStyle = {\n    cursor: `${agreedTerms || forceEnable ? 'pointer' : 'initial'}`\n  };\n\n  const render = () => {\n    if (appNetwork) {\n      const {\n        name,\n        icon,\n        id,\n        disableIcon\n      } = appNetwork;\n      const temporaryDisable = false; //name === APP_NETWORKS_NAME.BSC;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${this.styles.walletBox}`,\n        onClick: () => {\n          !temporaryDisable && handleNetworkChange(isAppNetwork, id, agreedTerms);\n        },\n        style: pointerStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: this.styles.walletBoxIconWrap,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `${(agreedTerms || forceEnable) && !temporaryDisable ? icon : disableIcon}`,\n            style: {\n              width: agreedTerms ? 40 : 50\n            },\n            alt: name,\n            className: this.styles.walletBoxIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), appChainID === id && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `/images/circle_done.svg`,\n            style: {\n              color: '#212a3b'\n            },\n            className: this.styles.walletBoxCheck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: this.styles.walletBoxText,\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (wallet) {\n      const {\n        name,\n        icon,\n        disableIcon\n      } = wallet;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${this.styles.walletBox}`,\n        onClick: () => {\n          if (mobile() && (wallet === null || wallet === void 0 ? void 0 : wallet.deepLink)) {\n            window.open(wallet.deepLink);\n            return;\n          }\n\n          handleNetworkChange(isAppNetwork, name, agreedTerms);\n        },\n        style: pointerStyle,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: this.styles.walletBoxIconWrap,\n          children: connectWalletLoading && walletName && walletName.indexOf(name) >= 0 ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/images/loading.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 85\n          }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `${agreedTerms ? icon : disableIcon}`,\n            style: {\n              width: agreedTerms ? 40 : 50\n            },\n            alt: name,\n            className: this.styles.walletBoxIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: this.styles.walletBoxText,\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this);\n    }\n\n    return null;\n  };\n\n  return render();\n};\n\n_s(ConnectWalletBox, \"eGS2VvYwqJELKVWfDwiA/MTKkVI=\", false, function () {\n  return [useStyles, useDispatch, useSelector];\n});\n\n_c = ConnectWalletBox;\nexport default ConnectWalletBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectWalletBox\");","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/components/Base/HeaderDefaultLayout/ConnectWalletBox/index.tsx"],"names":["React","useContext","useDispatch","useSelector","mobile","settingAppNetwork","NetworkUpdateType","HeaderContext","useStyles","ConnectWalletBox","props","styles","dispatch","appNetwork","isAppNetwork","handleProviderChosen","wallet","walletName","connectWalletLoading","forceEnable","handleClose","appChainID","state","data","agreedTerms","handleNetworkChange","updatedVal","App","name","connector","pointerStyle","cursor","render","icon","id","disableIcon","temporaryDisable","walletBox","walletBoxIconWrap","width","walletBoxIcon","color","walletBoxCheck","walletBoxText","deepLink","window","open","indexOf"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AbstractConnector } from '@web3-react/abstract-connector';\nimport mobile from 'is-mobile';\nimport { settingAppNetwork, NetworkUpdateType } from '../../../../store/actions/appNetwork';\nimport {ConnectorNames, WalletInfo} from '../../../../constants/connectors';\nimport { NetworkInfo, APP_NETWORKS_NAME } from '../../../../constants/network';\nimport { HeaderContext, HeaderContextType } from '../context/HeaderContext';\nimport useStyles from './style';\n\ninterface ConnectWalletBoxPropsType {\n  appNetwork?: NetworkInfo;\n  wallet?: WalletInfo;\n  isAppNetwork?: boolean;\n  handleProviderChosen?: (name: string,  connector: AbstractConnector) => void;\n  connectWalletLoading?: boolean,\n  walletName?: (string | undefined)[],\n  forceEnable?: boolean\n  handleClose?: () => void\n}\n\nconst ConnectWalletBox: React.FC<ConnectWalletBoxPropsType> = (props: ConnectWalletBoxPropsType) => {\n  const styles = useStyles();\n  const dispatch = useDispatch();\n\n  const { appNetwork, isAppNetwork = false, handleProviderChosen, wallet, walletName, connectWalletLoading, forceEnable, handleClose } = props;\n  const { appChainID } = useSelector((state: any) => state.appNetwork).data;\n  const { agreedTerms } = useContext<HeaderContextType>(HeaderContext);\n\n  const handleNetworkChange = (appNetwork: boolean, updatedVal: string, agreedTerms: boolean = false) => {\n    if (agreedTerms || forceEnable) {\n      if (appNetwork) {\n        dispatch(settingAppNetwork(NetworkUpdateType.App, updatedVal));\n        handleClose && handleClose();\n        return;\n      }\n\n      wallet && handleProviderChosen && handleProviderChosen(wallet.name, wallet.connector as AbstractConnector);\n    }\n  }\n\n  const pointerStyle = {\n    cursor: `${(agreedTerms || forceEnable) ? 'pointer': 'initial'}`\n  }\n\n  const render = () => {\n    if (appNetwork) {\n      const { name, icon, id, disableIcon } = appNetwork;\n      const temporaryDisable = false;//name === APP_NETWORKS_NAME.BSC;\n\n      return (\n        <div\n          className={`${this.styles.walletBox}`}\n          onClick={() => {\n            !temporaryDisable && handleNetworkChange(isAppNetwork, id as string, agreedTerms)\n          }}\n          style={pointerStyle}\n        >\n          <div className={this.styles.walletBoxIconWrap}>\n            {\n              <img src={`${((agreedTerms || forceEnable) && !temporaryDisable) ? icon: disableIcon}`} style={{ width: agreedTerms ? 40: 50 }} alt={name} className={this.styles.walletBoxIcon} />\n            }\n            {\n              appChainID === id &&\n                <img\n                  src={`/images/circle_done.svg`}\n                  style={{ color: '#212a3b' }}\n                  className={this.styles.walletBoxCheck}\n                />\n            }\n          </div>\n          <p className={this.styles.walletBoxText}>{name}</p>\n        </div>\n      )\n    }\n\n    if (wallet) {\n      const { name, icon, disableIcon } = wallet;\n\n      return (\n        <div\n          className={`${this.styles.walletBox}`}\n          onClick={() => {\n            if (mobile() && wallet?.deepLink) {\n              window.open(wallet.deepLink);\n              return;\n            }\n\n            handleNetworkChange(isAppNetwork, name, agreedTerms)\n          }}\n          style={pointerStyle}\n        >\n          <div className={this.styles.walletBoxIconWrap}>\n            {\n              connectWalletLoading && walletName && walletName.indexOf(name) >= 0 ? <img src=\"/images/loading.png\" />\n              :  <img\n                  src={`${agreedTerms ? icon: disableIcon}`}\n                  style={{ width: agreedTerms ? 40: 50 }}\n                  alt={name}\n                  className={this.styles.walletBoxIcon}\n                />\n            }\n          </div>\n          <p className={this.styles.walletBoxText}>{name}</p>\n        </div>\n      )\n    }\n\n    return null;\n  }\n\n  return (render())\n}\n\nexport default ConnectWalletBox;\n"]},"metadata":{},"sourceType":"module"}