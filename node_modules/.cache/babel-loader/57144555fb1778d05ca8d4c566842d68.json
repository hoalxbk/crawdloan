{"ast":null,"code":"import { sotaTokenActions } from '../constants/sota-token';\nimport { getContractInstance } from '../../services/web3';\nimport erc20ABI from '../../abi/Erc20.json';\nimport { MAX_INT } from './../../services/web3';\nimport { getContract } from '../../utils/contract';\nimport { alertFailure } from '../../store/actions/alert';\nexport const getAllowance = owner => {\n  return async dispatch => {\n    dispatch({\n      type: sotaTokenActions.ALLOWANCE_LOADING\n    });\n\n    try {\n      const pkfContract = getContractInstance(erc20ABI, process.env.REACT_APP_PKF);\n      const pkfResult = await (pkfContract === null || pkfContract === void 0 ? void 0 : pkfContract.methods.allowance(owner, process.env.REACT_APP_TIERS).call());\n      const uniContract = getContractInstance(erc20ABI, process.env.REACT_APP_UNI_LP);\n      const uniResult = await (uniContract === null || uniContract === void 0 ? void 0 : uniContract.methods.allowance(owner, process.env.REACT_APP_TIERS).call());\n      const mantraContract = getContractInstance(erc20ABI, process.env.REACT_APP_MANTRA_LP);\n      const mantraResult = await (mantraContract === null || mantraContract === void 0 ? void 0 : mantraContract.methods.allowance(owner, process.env.REACT_APP_TIERS).call());\n      const result = {\n        pkf: pkfResult,\n        uni: uniResult,\n        mantra: mantraResult\n      };\n      dispatch({\n        type: sotaTokenActions.ALLOWANCE_SUCCESS,\n        payload: result\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: sotaTokenActions.ALLOWANCE_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\nexport const approve = (address, library, tokenAddress) => {\n  return async dispatch => {\n    dispatch({\n      type: sotaTokenActions.APPROVE_LOADING\n    });\n\n    try {\n      let result = {};\n      const contract = getContract(tokenAddress, erc20ABI, library, address || '');\n      result = await (contract === null || contract === void 0 ? void 0 : contract.approve(process.env.REACT_APP_TIERS, MAX_INT));\n      dispatch({\n        type: sotaTokenActions.APPROVE_SUCCESS,\n        payload: result\n      });\n      await result.wait(1);\n\n      if (result) {\n        dispatch(getAllowance(address || ''));\n      }\n    } catch (error) {\n      console.log(error);\n      dispatch(alertFailure(\"Transaction submit failure\"));\n      dispatch({\n        type: sotaTokenActions.APPROVE_FAILURE,\n        payload: error\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/store/actions/sota-token.ts"],"names":["sotaTokenActions","getContractInstance","erc20ABI","MAX_INT","getContract","alertFailure","getAllowance","owner","dispatch","type","ALLOWANCE_LOADING","pkfContract","process","env","REACT_APP_PKF","pkfResult","methods","allowance","REACT_APP_TIERS","call","uniContract","REACT_APP_UNI_LP","uniResult","mantraContract","REACT_APP_MANTRA_LP","mantraResult","result","pkf","uni","mantra","ALLOWANCE_SUCCESS","payload","error","console","log","ALLOWANCE_FAILURE","approve","address","library","tokenAddress","APPROVE_LOADING","contract","APPROVE_SUCCESS","wait","APPROVE_FAILURE"],"mappings":"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","sourcesContent":["import { sotaTokenActions } from '../constants/sota-token';\nimport { AnyAction } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { getContractInstance } from '../../services/web3';\nimport erc20ABI from '../../abi/Erc20.json';\nimport { MAX_INT } from './../../services/web3';\nimport { Web3Provider } from '@ethersproject/providers'\nimport { getContract } from '../../utils/contract';\nimport { alertFailure, alertSuccess } from '../../store/actions/alert';\n\nexport const getAllowance = (owner: string) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n    dispatch({ type: sotaTokenActions.ALLOWANCE_LOADING });\n    try {\n      const pkfContract = getContractInstance(erc20ABI, process.env.REACT_APP_PKF as string);\n      const pkfResult = await pkfContract?.methods.allowance(owner, process.env.REACT_APP_TIERS).call();\n\n      const uniContract = getContractInstance(erc20ABI, process.env.REACT_APP_UNI_LP as string);\n      const uniResult = await uniContract?.methods.allowance(owner, process.env.REACT_APP_TIERS).call();\n\n      const mantraContract = getContractInstance(erc20ABI, process.env.REACT_APP_MANTRA_LP as string);\n      const mantraResult = await mantraContract?.methods.allowance(owner, process.env.REACT_APP_TIERS).call();\n\n      const result = {\n        pkf: pkfResult,\n        uni: uniResult,\n        mantra: mantraResult\n      }\n\n      dispatch({\n        type: sotaTokenActions.ALLOWANCE_SUCCESS,\n        payload: result,\n      });\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: sotaTokenActions.ALLOWANCE_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n\nexport const approve = (address: string | null | undefined, library: Web3Provider, tokenAddress: string) => {\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\n    dispatch({ type: sotaTokenActions.APPROVE_LOADING });\n    try {\n      let result = {} as any;\n\n      const contract = getContract(tokenAddress, erc20ABI, library, address || '');\n      result = await contract?.approve(process.env.REACT_APP_TIERS, MAX_INT);\n      dispatch({\n        type: sotaTokenActions.APPROVE_SUCCESS,\n        payload: result,\n      });\n      await result.wait(1);\n      if(result) {\n        dispatch(getAllowance(address || ''));\n      }\n\n    } catch (error) {\n      console.log(error)\n      dispatch(alertFailure(\"Transaction submit failure\"))\n      dispatch({\n        type: sotaTokenActions.APPROVE_FAILURE,\n        payload: error\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}