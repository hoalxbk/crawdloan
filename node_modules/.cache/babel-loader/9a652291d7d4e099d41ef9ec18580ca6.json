{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport moment from \"moment\";\nimport BigNumber from \"bignumber.js\";\n\nconst useDetectClaimConfigApplying = (poolDetails, userPurchased, userClaimed) => {\n  _s();\n\n  const [currentClaim, setCurrentClaim] = useState();\n  const [currentClaimIndex, setCurrentClaimIndex] = useState(0);\n  const [nextClaim, setNextClaim] = useState();\n  const [nextClaimIndex, setNextClaimIndex] = useState(0);\n  const [maximumTokenClaimUtilNow, setMaximumTokenClaimUtilNow] = useState(0);\n  let detechCurrentPhaseInterval = undefined;\n  useEffect(() => {\n    const detechCurrentPhase = () => {\n      const now = moment();\n      const nowUnix = now.unix();\n      let validRow = null;\n      let validIndex = -1;\n\n      for (let i = 0; i < poolDetails.campaignClaimConfig.length; i++) {\n        const row = poolDetails.campaignClaimConfig[i];\n\n        if (nowUnix < row.start_time) {\n          break;\n        } else {\n          validRow = row;\n          validIndex = i;\n        }\n      }\n\n      if (validRow) {\n        setCurrentClaim(validRow);\n        setCurrentClaimIndex(validIndex);\n        const next = poolDetails.campaignClaimConfig[validIndex + 1];\n        console.log('NextClaim: next: ', next);\n\n        if (next) {\n          setNextClaim(next);\n          setNextClaimIndex(validIndex + 1);\n        }\n\n        if (validIndex >= 0 && userPurchased && userClaimed) {\n          var _validRow, _validRow2;\n\n          const maximum = new BigNumber(((_validRow = validRow) === null || _validRow === void 0 ? void 0 : _validRow.max_percent_claim) || 0).dividedBy(100).multipliedBy(userPurchased || 0).minus(userClaimed);\n          console.log('validRow.max_percent_claim', (_validRow2 = validRow) === null || _validRow2 === void 0 ? void 0 : _validRow2.max_percent_claim, userPurchased, userClaimed, maximum.toFixed());\n\n          if (maximum.lt(0)) {\n            setMaximumTokenClaimUtilNow(0);\n          } else {\n            setMaximumTokenClaimUtilNow(maximum.toFixed());\n          }\n        }\n      }\n\n      console.log('Finish validRow', validRow, validIndex);\n    };\n\n    if (poolDetails && poolDetails.campaignClaimConfig && poolDetails.campaignClaimConfig.length > 0) {\n      detechCurrentPhase();\n      detechCurrentPhaseInterval = setInterval(() => {\n        console.log('Deteching current phase....');\n        detechCurrentPhase();\n      }, 10000);\n    }\n\n    return () => {\n      detechCurrentPhaseInterval && clearInterval(detechCurrentPhaseInterval);\n    };\n  }, [poolDetails, userPurchased, userClaimed]);\n  return {\n    currentClaim,\n    currentClaimIndex,\n    nextClaim,\n    nextClaimIndex,\n    maximumTokenClaimUtilNow\n  };\n};\n\n_s(useDetectClaimConfigApplying, \"EpHFu8y3ri06P92uq4E0P0Dkd6w=\");\n\nexport default useDetectClaimConfigApplying;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useDetectClaimConfigApplying.ts"],"names":["useState","useEffect","moment","BigNumber","useDetectClaimConfigApplying","poolDetails","userPurchased","userClaimed","currentClaim","setCurrentClaim","currentClaimIndex","setCurrentClaimIndex","nextClaim","setNextClaim","nextClaimIndex","setNextClaimIndex","maximumTokenClaimUtilNow","setMaximumTokenClaimUtilNow","detechCurrentPhaseInterval","undefined","detechCurrentPhase","now","nowUnix","unix","validRow","validIndex","i","campaignClaimConfig","length","row","start_time","next","console","log","maximum","max_percent_claim","dividedBy","multipliedBy","minus","toFixed","lt","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport moment from \"moment\";\nimport BigNumber from \"bignumber.js\";\nimport usePoolDepositAction from \"./usePoolDepositAction\";\n\n\n\nconst useDetectClaimConfigApplying = (\n  poolDetails: any,\n  userPurchased: any,\n  userClaimed: any,\n) => {\n\n  const [currentClaim, setCurrentClaim] = useState<any>();\n  const [currentClaimIndex, setCurrentClaimIndex] = useState(0);\n  const [nextClaim, setNextClaim] = useState<any>();\n  const [nextClaimIndex, setNextClaimIndex] = useState(0);\n  const [maximumTokenClaimUtilNow, setMaximumTokenClaimUtilNow] = useState<any>(0);\n  let detechCurrentPhaseInterval = undefined as any;\n\n  useEffect(() => {\n    const detechCurrentPhase = () => {\n      const now = moment();\n      const nowUnix = now.unix();\n      let validRow = null;\n      let validIndex = -1;\n      for (let i = 0; i < poolDetails.campaignClaimConfig.length; i++) {\n        const row = poolDetails.campaignClaimConfig[i];\n        if (nowUnix < row.start_time) {\n          break;\n        } else {\n          validRow = row;\n          validIndex = i;\n        }\n      }\n      if (validRow) {\n        setCurrentClaim(validRow);\n        setCurrentClaimIndex(validIndex);\n\n        const next = poolDetails.campaignClaimConfig[validIndex + 1];\n        console.log('NextClaim: next: ', next);\n        if (next) {\n          setNextClaim(next);\n          setNextClaimIndex(validIndex + 1);\n        }\n\n        if (validIndex >= 0 && userPurchased && userClaimed) {\n          const maximum = (new BigNumber(validRow?.max_percent_claim || 0).dividedBy(100).multipliedBy(userPurchased || 0)).minus(userClaimed);\n          console.log('validRow.max_percent_claim', validRow?.max_percent_claim, userPurchased, userClaimed, maximum.toFixed());\n          if (maximum.lt(0)) {\n            setMaximumTokenClaimUtilNow(0);\n          } else {\n            setMaximumTokenClaimUtilNow(maximum.toFixed());\n          }\n        }\n      }\n      console.log('Finish validRow', validRow, validIndex);\n    };\n\n    if (poolDetails && poolDetails.campaignClaimConfig && poolDetails.campaignClaimConfig.length > 0) {\n      detechCurrentPhase();\n      detechCurrentPhaseInterval = setInterval(() => {\n        console.log('Deteching current phase....');\n        detechCurrentPhase();\n      }, 10000);\n    }\n\n    return () => {\n      detechCurrentPhaseInterval && clearInterval(detechCurrentPhaseInterval);\n    }\n  }, [poolDetails, userPurchased, userClaimed]);\n\n  return {\n    currentClaim,\n    currentClaimIndex,\n    nextClaim,\n    nextClaimIndex,\n    maximumTokenClaimUtilNow,\n  }\n};\n\nexport default useDetectClaimConfigApplying;\n"]},"metadata":{},"sourceType":"module"}