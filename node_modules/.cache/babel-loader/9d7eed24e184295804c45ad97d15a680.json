{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { getContractInstance, SmartContractMethod } from '../services/web3';\nimport ERC20_ABI from '../abi/Erc20.json';\n\nconst useTokenAllowance = () => {\n  _s();\n\n  const [tokenAllowanceLoading, setTokenAllowanceLoading] = useState(false);\n  const {\n    appChainID\n  } = useSelector(state => state.appNetwork).data;\n  const connector = useTypedSelector(state => state.connector).data;\n  const retrieveTokenAllowance = useCallback(async (token, owner, spender) => {\n    if (token && spender && owner && ethers.utils.isAddress(owner) && ethers.utils.isAddress(spender) && ethers.utils.isAddress(token.address)) {\n      setTokenAllowanceLoading(true);\n      const contract = getContractInstance(ERC20_ABI, token.address, connector, appChainID, SmartContractMethod.Read);\n\n      if (contract) {\n        const balance = await contract.methods.allowance(owner, spender).call();\n        const allowanceReturn = new BigNumber(balance).div(new BigNumber(10).pow(token === null || token === void 0 ? void 0 : token.decimals)).toNumber();\n        return allowanceReturn;\n      }\n\n      return 0;\n    }\n  }, [appChainID, connector]);\n  return {\n    retrieveTokenAllowance,\n    tokenAllowanceLoading\n  };\n};\n\n_s(useTokenAllowance, \"KdtxyRkIOXbOUcJulITVgjvn+BY=\", false, function () {\n  return [useSelector, useTypedSelector];\n});\n\nexport default useTokenAllowance;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useTokenAllowance.ts"],"names":["useState","useCallback","useSelector","ethers","BigNumber","useTypedSelector","getContractInstance","SmartContractMethod","ERC20_ABI","useTokenAllowance","tokenAllowanceLoading","setTokenAllowanceLoading","appChainID","state","appNetwork","data","connector","retrieveTokenAllowance","token","owner","spender","utils","isAddress","address","contract","Read","balance","methods","allowance","call","allowanceReturn","div","pow","decimals","toNumber"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAGA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,QAAyD,kBAAzD;AAEA,OAAOC,SAAP,MAAsB,mBAAtB;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAM,CAACC,qBAAD,EAAwBC,wBAAxB,IAAoDX,QAAQ,CAAU,KAAV,CAAlE;AAEA,QAAM;AAAEY,IAAAA;AAAF,MAAkBV,WAAW,CAAEW,KAAD,IAAgBA,KAAK,CAACC,UAAvB,CAAX,CAA8CC,IAAtE;AACA,QAAMC,SAAS,GAAIX,gBAAgB,CAACQ,KAAK,IAAIA,KAAK,CAACG,SAAhB,CAAhB,CAA2CD,IAA9D;AAEA,QAAME,sBAAsB,GAAGhB,WAAW,CAAC,OAAOiB,KAAP,EAAqCC,KAArC,EAAoDC,OAApD,KAAwE;AAC/G,QAAIF,KAAK,IAAIE,OAAT,IAAoBD,KAApB,IACGhB,MAAM,CAACkB,KAAP,CAAaC,SAAb,CAAuBH,KAAvB,CADH,IAEGhB,MAAM,CAACkB,KAAP,CAAaC,SAAb,CAAuBF,OAAvB,CAFH,IAGGjB,MAAM,CAACkB,KAAP,CAAaC,SAAb,CAAuBJ,KAAK,CAACK,OAA7B,CAHP,EAIE;AACFZ,MAAAA,wBAAwB,CAAC,IAAD,CAAxB;AAEA,YAAMa,QAAQ,GAAGlB,mBAAmB,CAACE,SAAD,EAAYU,KAAK,CAACK,OAAlB,EAA2BP,SAA3B,EAAsCJ,UAAtC,EAAkDL,mBAAmB,CAACkB,IAAtE,CAApC;;AAEA,UAAID,QAAJ,EAAc;AACZ,cAAME,OAAO,GAAG,MAAMF,QAAQ,CAACG,OAAT,CAAiBC,SAAjB,CAA2BT,KAA3B,EAAkCC,OAAlC,EAA2CS,IAA3C,EAAtB;AACA,cAAMC,eAAe,GAAG,IAAI1B,SAAJ,CAAcsB,OAAd,EAAuBK,GAAvB,CAA2B,IAAI3B,SAAJ,CAAc,EAAd,EAAkB4B,GAAlB,CAAsBd,KAAtB,aAAsBA,KAAtB,uBAAsBA,KAAK,CAAEe,QAA7B,CAA3B,EAA6EC,QAA7E,EAAxB;AAEA,eAAOJ,eAAP;AACD;;AAED,aAAO,CAAP;AACD;AACF,GAnByC,EAmBvC,CAAClB,UAAD,EAAaI,SAAb,CAnBuC,CAA1C;AAqBA,SAAO;AACLC,IAAAA,sBADK;AAELP,IAAAA;AAFK,GAAP;AAID,CA/BD;;GAAMD,iB;UAGoBP,W,EACLG,gB;;;AA6BrB,eAAeI,iBAAf","sourcesContent":["import { useState, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\n\nimport { TokenType } from '../hooks/useTokenDetails';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { getContractInstance, SmartContractMethod } from '../services/web3';\n\nimport ERC20_ABI from '../abi/Erc20.json';\n\nconst useTokenAllowance = () => {\n  const [tokenAllowanceLoading, setTokenAllowanceLoading] = useState<boolean>(false);\n\n  const { appChainID }  = useSelector((state: any) => state.appNetwork).data;\n  const connector  = useTypedSelector(state => state.connector).data;\n\n  const retrieveTokenAllowance = useCallback(async (token: TokenType | undefined, owner: string, spender: string) => {\n      if (token && spender && owner   \n          && ethers.utils.isAddress(owner) \n          && ethers.utils.isAddress(spender) \n          && ethers.utils.isAddress(token.address) \n      ) {\n      setTokenAllowanceLoading(true);\n\n      const contract = getContractInstance(ERC20_ABI, token.address, connector, appChainID, SmartContractMethod.Read);\n\n      if (contract) {\n        const balance = await contract.methods.allowance(owner, spender).call();\n        const allowanceReturn = new BigNumber(balance).div(new BigNumber(10).pow(token?.decimals as number)).toNumber();\n\n        return allowanceReturn;\n      }\n\n      return 0;\n    }\n  }, [appChainID, connector]);\n\n  return {\n    retrieveTokenAllowance,\n    tokenAllowanceLoading\n  }\n}\n\nexport default useTokenAllowance;\n"]},"metadata":{},"sourceType":"module"}