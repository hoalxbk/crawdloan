{"ast":null,"code":"import { ethers } from 'ethers';\nimport { ETH_CHAIN_ID } from '../constants/network';\nconst INFURA_KEY = process.env.REACT_APP_INFURA_KEY || \"\";\nconst ETH_NETWORK_NAME = process.env.REACT_APP_ETH_NETWORK_NAME || \"\";\nconst BSC_RPC_URL = process.env.REACT_APP_BSC_RPC_URL || \"\";\n\nconst getAccountBalance = async (appChainID, walletChainID, connectedAccount, connector) => {\n  if (appChainID && connectedAccount && connector) {\n    const exactNetwork = appChainID === walletChainID;\n    const provider = appChainID === ETH_CHAIN_ID ? new ethers.providers.InfuraProvider(ETH_NETWORK_NAME, INFURA_KEY) : new ethers.providers.JsonRpcProvider(BSC_RPC_URL);\n    const accountBalance = exactNetwork ? await provider.getBalance(connectedAccount) : {\n      _hex: '0x00'\n    };\n    return accountBalance;\n  }\n\n  return {\n    _hex: '0x00'\n  };\n};\n\nexport default getAccountBalance;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/getAccountBalance.ts"],"names":["ethers","ETH_CHAIN_ID","INFURA_KEY","process","env","REACT_APP_INFURA_KEY","ETH_NETWORK_NAME","REACT_APP_ETH_NETWORK_NAME","BSC_RPC_URL","REACT_APP_BSC_RPC_URL","getAccountBalance","appChainID","walletChainID","connectedAccount","connector","exactNetwork","provider","providers","InfuraProvider","JsonRpcProvider","accountBalance","getBalance","_hex"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,YAAT,QAA6B,sBAA7B;AAEA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAAZ,IAAoC,EAAvD;AACA,MAAMC,gBAAgB,GAAGH,OAAO,CAACC,GAAR,CAAYG,0BAAZ,IAA0C,EAAnE;AACA,MAAMC,WAAW,GAAGL,OAAO,CAACC,GAAR,CAAYK,qBAAZ,IAAqC,EAAzD;;AAEA,MAAMC,iBAAiB,GAAG,OAAOC,UAAP,EAA2BC,aAA3B,EAAkDC,gBAAlD,EAA4EC,SAA5E,KAAkG;AAC5H,MAAIH,UAAU,IAAIE,gBAAd,IAAkCC,SAAtC,EAAiD;AAC/C,UAAMC,YAAY,GAAGJ,UAAU,KAAKC,aAApC;AAEA,UAAMI,QAAQ,GACbL,UAAU,KAAKV,YAAf,GACI,IAAID,MAAM,CAACiB,SAAP,CAAiBC,cAArB,CAAoCZ,gBAApC,EAAsDJ,UAAtD,CADJ,GAEI,IAAIF,MAAM,CAACiB,SAAP,CAAiBE,eAArB,CAAqCX,WAArC,CAHL;AAKA,UAAMY,cAAc,GAAGL,YAAY,GAC/B,MAAMC,QAAQ,CAACK,UAAT,CAAoBR,gBAApB,CADyB,GAE/B;AAAES,MAAAA,IAAI,EAAE;AAAR,KAFJ;AAIE,WAAOF,cAAP;AACD;;AAED,SAAO;AAAEE,IAAAA,IAAI,EAAE;AAAR,GAAP;AACD,CAjBD;;AAmBA,eAAeZ,iBAAf","sourcesContent":["import { ethers } from 'ethers';\nimport { ETH_CHAIN_ID } from '../constants/network';\n\nconst INFURA_KEY = process.env.REACT_APP_INFURA_KEY || \"\";\nconst ETH_NETWORK_NAME = process.env.REACT_APP_ETH_NETWORK_NAME || \"\";\nconst BSC_RPC_URL = process.env.REACT_APP_BSC_RPC_URL || \"\";\n\nconst getAccountBalance = async (appChainID: string, walletChainID: string, connectedAccount: string, connector: string) => {\nif (appChainID && connectedAccount && connector) {\n  const exactNetwork = appChainID === walletChainID;\n\n  const provider = \n   appChainID === ETH_CHAIN_ID \n     ? new ethers.providers.InfuraProvider(ETH_NETWORK_NAME, INFURA_KEY)\n     : new ethers.providers.JsonRpcProvider(BSC_RPC_URL);\n\n  const accountBalance = exactNetwork \n    ? await provider.getBalance(connectedAccount)\n    : { _hex: '0x00' }\n\n    return accountBalance; \n  }\n  \n  return { _hex: '0x00' };\n}\n\nexport default getAccountBalance;\n"]},"metadata":{},"sourceType":"module"}