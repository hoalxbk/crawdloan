{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport useUserPurchaseSignature from '../hooks/useUserPurchaseSignature';\nimport useWalletSignature from '../../../hooks/useWalletSignature';\nimport { alertSuccess, alertFailure } from '../../../store/actions/alert';\nimport Pool_ABI from '../../../abi/Pool.json';\nimport PreSalePool from '../../../abi/PreSalePool.json';\nimport { getContract } from '../../../utils/contract';\nimport { TRANSACTION_ERROR_MESSAGE } from '../../../constants/alert';\nconst USDT_ADDRESS = process.env.REACT_APP_USDT_SMART_CONTRACT;\nconst USDC_ADDRESS = process.env.REACT_APP_USDC_SMART_CONTRACT;\nconst USDT_OR_USDC_DECIMALS = 6;\n\nconst usePoolDepositAction = ({\n  poolAddress,\n  poolId,\n  purchasableCurrency,\n  amount,\n  isClaimable,\n  networkAvailable\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [depositError, setDepositError] = useState(\"\");\n  const [tokenDepositTransaction, setTokenDepositTransaction] = useState(\"\");\n  const [tokenDepositLoading, setTokenDepositLoading] = useState(false);\n  const [tokenDepositSuccess, setTokenDepositSuccess] = useState(false);\n  const {\n    account: connectedAccount,\n    library\n  } = useWeb3React();\n  const {\n    error,\n    signMessage,\n    signature: authSignature,\n    setSignature\n  } = useWalletSignature();\n  const {\n    signature,\n    minBuy,\n    maxBuy,\n    error: buyError,\n    setSignature: setUserPurchasedSignature\n  } = useUserPurchaseSignature(connectedAccount, poolId, authSignature);\n  useEffect(() => {\n    poolAddress && purchasableCurrency && signature && minBuy && maxBuy && !depositError && depositWithSignature(poolAddress, purchasableCurrency, amount, signature, `${minBuy}`, maxBuy);\n  }, [signature, poolAddress, purchasableCurrency, amount, minBuy, maxBuy, depositError]);\n  useEffect(() => {\n    if (error || buyError) {\n      const errorMessage = error || buyError;\n      setDepositError(errorMessage);\n      setTokenDepositLoading(false);\n      setSignature(\"\");\n      setUserPurchasedSignature(\"\");\n    }\n  }, [error, buyError]);\n  const depositWithSignature = useCallback(async (poolAddress, acceptCurrency, amount, signature, minBuy, maxBuy) => {\n    try {\n      if (minBuy && maxBuy && signature && amount) {\n        const abiUse = isClaimable ? PreSalePool : Pool_ABI;\n        const poolContract = getContract(poolAddress, abiUse, library, connectedAccount);\n        const method = acceptCurrency === 'ETH' ? 'buyTokenByEtherWithPermission' : 'buyTokenByTokenWithPermission';\n        let decimals = 6;\n        const isBSC = networkAvailable == 'bsc';\n\n        if (isBSC) {\n          if (acceptCurrency == 'ETH') {\n            decimals = 18;\n          } else if (acceptCurrency == 'USDT') {\n            decimals = 18;\n          } else if (acceptCurrency == 'USDC') {\n            decimals = 18;\n          }\n        } else {\n          if (acceptCurrency == 'ETH') {\n            decimals = 18;\n          } else if (acceptCurrency == 'USDT') {\n            decimals = 6;\n          } else if (acceptCurrency == 'USDC') {\n            decimals = 6;\n          }\n        }\n\n        let buyCurr = 'ETH';\n\n        if (isBSC) {\n          if (acceptCurrency === \"USDT\") {\n            buyCurr = process.env.REACT_APP_USDT_BSC_SMART_CONTRACT || '';\n          } else if (acceptCurrency === \"USDC\") {\n            buyCurr = process.env.REACT_APP_USDC_BSC_SMART_CONTRACT || '';\n          }\n        } else {\n          if (acceptCurrency === \"USDT\") {\n            buyCurr = process.env.REACT_APP_USDT_SMART_CONTRACT || '';\n          } else if (acceptCurrency === \"USDC\") {\n            buyCurr = process.env.REACT_APP_USDC_SMART_CONTRACT || '';\n          }\n        }\n\n        const params = acceptCurrency === 'ETH' ? [connectedAccount, connectedAccount, maxBuy, minBuy, signature, {\n          value: new BigNumber(amount).multipliedBy(10 ** 18).toFixed()\n        }] : [connectedAccount, // acceptCurrency === \"USDT\" ? USDT_ADDRESS: USDC_ADDRESS,\n        buyCurr, new BigNumber(amount).multipliedBy(10 ** decimals).toFixed(), connectedAccount, maxBuy, minBuy, signature]; // let overrides = fixGasLimitWithProvider(library, 'buy');\n\n        const transaction = await poolContract[method](...params);\n        setUserPurchasedSignature(\"\");\n        setSignature(\"\");\n        setTokenDepositTransaction(transaction.hash);\n        await transaction.wait(1);\n        dispatch(alertSuccess(\"Token Deposit Successful!\"));\n        setTokenDepositLoading(false);\n        setTokenDepositSuccess(true);\n      }\n    } catch (err) {\n      console.log('[ERROR] - depositWithSignature:', err);\n      dispatch(alertFailure(TRANSACTION_ERROR_MESSAGE));\n      setDepositError(TRANSACTION_ERROR_MESSAGE);\n      setTokenDepositLoading(false);\n      setSignature(\"\");\n      setUserPurchasedSignature(\"\");\n    }\n  }, [minBuy, maxBuy, poolAddress, isClaimable]);\n  const deposit = useCallback(async () => {\n    if (amount && new BigNumber(amount).gt(0) && poolAddress) {\n      try {\n        setTokenDepositTransaction(\"\");\n        setDepositError(\"\");\n        setTokenDepositLoading(true);\n        setTokenDepositSuccess(false);\n        await signMessage();\n      } catch (err) {\n        console.log('[ERROR] - deposit:', err);\n        dispatch(alertFailure(TRANSACTION_ERROR_MESSAGE));\n        setDepositError(TRANSACTION_ERROR_MESSAGE);\n        setSignature(\"\");\n        setTokenDepositLoading(false);\n      }\n    }\n  }, [connectedAccount, library, poolAddress, amount]); // const estimateFee = useCallback(async (amount: string, acceptCurrency: string) => {\n  //   try {\n  //     setEstimateFeeLoading(true);\n  //     if (amount && new BigNumber(amount).gt(0) && poolAddress && acceptCurrency) {\n  //       const gasPrice = await library.getGasPrice();\n  //       const poolContract = getContract(poolAddress, Pool_ABI, library, connectedAccount as string);\n  //       const gasPriceCal = new BigNumber(gasPrice._hex).div(new BigNumber(10).pow(18));\n  //       const params = acceptCurrency === 'ETH' ? [\n  //         connectedAccount,\n  //         connectedAccount,\n  //         \"100000000000\",\n  //         \"100000000000\",\n  //         \"0x450859e7066471c9e38a481908e3547240285db6af24eed2615a3d825f043e5052bffc0815e98b6a4365526307e2f18b9552bb747739789d624ea666e4fb87ea1b\",\n  //         {\n  //           value: new BigNumber(amount).multipliedBy(10 ** 18).toFixed()\n  //         }\n  //       ]: [\n  //         connectedAccount,\n  //         acceptCurrency ===  \"USDT\" ? USDT_ADDRESS: USDC_ADDRESS,\n  //         new BigNumber(amount).multipliedBy(10 ** 18).toFixed(),\n  //         connectedAccount,\n  //         \"100000000000\",\n  //         \"299999999990\",\n  //         \"0x450859e7066471c9e38a481908e3547240285db6af24eed2615a3d825f043e5052bffc0815e98b6a4365526307e2f18b9552bb747739789d624ea666e4fb87ea1b\"\n  //       ];\n  //       const method = acceptCurrency === 'ETH' ? 'buyTokenByEtherWithPermission': 'buyTokenByTokenWithPermission';\n  //       const estimateFee = await poolContract.estimateGas[method](...params);\n  //       setEstimateErr(\"\");\n  //       setEstimateFeeLoading(false);\n  //       return new BigNumber(estimateFee._hex).multipliedBy(gasPriceCal).toNumber();\n  //     } else {\n  //       setEstimateErr(\"\");\n  //       setEstimateFeeLoading(false);\n  //       return 0;\n  //     }\n  //   } catch(err) {\n  //     console.error(err.message);\n  //     setEstimateFeeLoading(false);\n  //     setEstimateErr(err.message);\n  //   }\n  // }, [poolAddress, connectedAccount]);\n\n  return {\n    tokenDepositSuccess,\n    deposit,\n    tokenDepositLoading,\n    tokenDepositTransaction,\n    setTokenDepositTransaction,\n    setTokenDepositLoading,\n    depositError\n  };\n};\n\n_s(usePoolDepositAction, \"fukSR+vP5m//wCqg2mtfndzWVcE=\", false, function () {\n  return [useDispatch, useWeb3React, useWalletSignature, useUserPurchaseSignature];\n});\n\nexport default usePoolDepositAction;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/usePoolDepositAction.ts"],"names":["useState","useEffect","useCallback","useDispatch","useWeb3React","BigNumber","useUserPurchaseSignature","useWalletSignature","alertSuccess","alertFailure","Pool_ABI","PreSalePool","getContract","TRANSACTION_ERROR_MESSAGE","USDT_ADDRESS","process","env","REACT_APP_USDT_SMART_CONTRACT","USDC_ADDRESS","REACT_APP_USDC_SMART_CONTRACT","USDT_OR_USDC_DECIMALS","usePoolDepositAction","poolAddress","poolId","purchasableCurrency","amount","isClaimable","networkAvailable","dispatch","depositError","setDepositError","tokenDepositTransaction","setTokenDepositTransaction","tokenDepositLoading","setTokenDepositLoading","tokenDepositSuccess","setTokenDepositSuccess","account","connectedAccount","library","error","signMessage","signature","authSignature","setSignature","minBuy","maxBuy","buyError","setUserPurchasedSignature","depositWithSignature","errorMessage","acceptCurrency","abiUse","poolContract","method","decimals","isBSC","buyCurr","REACT_APP_USDT_BSC_SMART_CONTRACT","REACT_APP_USDC_BSC_SMART_CONTRACT","params","value","multipliedBy","toFixed","transaction","hash","wait","err","console","log","deposit","gt"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\n\nimport useUserPurchaseSignature from '../hooks/useUserPurchaseSignature';\nimport useWalletSignature from '../../../hooks/useWalletSignature';\nimport { alertSuccess, alertFailure } from '../../../store/actions/alert';\nimport Pool_ABI from '../../../abi/Pool.json';\nimport PreSalePool from '../../../abi/PreSalePool.json';\nimport { getContract } from '../../../utils/contract';\nimport { TRANSACTION_ERROR_MESSAGE } from '../../../constants/alert';\nimport {fixGasLimitWithProvider} from \"../../../utils\";\n\ntype PoolDepositActionParams = {\n  poolAddress?: string;\n  poolId?: number;\n  purchasableCurrency: string;\n  amount: string;\n  isClaimable: boolean;\n  networkAvailable: string;\n}\n\nconst USDT_ADDRESS = process.env.REACT_APP_USDT_SMART_CONTRACT;\nconst USDC_ADDRESS = process.env.REACT_APP_USDC_SMART_CONTRACT;\nconst USDT_OR_USDC_DECIMALS = 6;\n\nconst usePoolDepositAction = ({ poolAddress, poolId, purchasableCurrency, amount, isClaimable, networkAvailable }: PoolDepositActionParams) => {\n  const dispatch = useDispatch();\n\n  const [depositError, setDepositError] = useState(\"\");\n  const [tokenDepositTransaction, setTokenDepositTransaction] = useState<string>(\"\");\n  const [tokenDepositLoading, setTokenDepositLoading] = useState<boolean>(false);\n  const [tokenDepositSuccess, setTokenDepositSuccess] = useState<boolean>(false);\n\n  const { account: connectedAccount, library } = useWeb3React();\n  const { error, signMessage, signature: authSignature, setSignature } = useWalletSignature();\n  const { signature, minBuy, maxBuy, error: buyError, setSignature: setUserPurchasedSignature } = useUserPurchaseSignature(connectedAccount, poolId, authSignature);\n\n  useEffect(() => {\n    poolAddress &&\n    purchasableCurrency &&\n    signature &&\n    minBuy &&\n    maxBuy &&\n    !depositError &&\n    depositWithSignature(poolAddress, purchasableCurrency, amount, signature, `${minBuy}`, maxBuy);\n  }, [signature, poolAddress, purchasableCurrency, amount, minBuy, maxBuy, depositError]);\n\n\n  useEffect(() => {\n    if (error || buyError) {\n      const errorMessage = error || buyError;\n      setDepositError(errorMessage as string);\n      setTokenDepositLoading(false);\n      setSignature(\"\");\n      setUserPurchasedSignature(\"\");\n    }\n  }, [error, buyError]);\n\n  const depositWithSignature = useCallback(async (\n    poolAddress: string,\n    acceptCurrency: string,\n    amount: string,\n    signature: string,\n    minBuy: string,\n    maxBuy: string\n  ) => {\n    try {\n      if (minBuy && maxBuy && signature && amount) {\n        const abiUse = isClaimable ? PreSalePool: Pool_ABI;\n        const poolContract = getContract(poolAddress, abiUse, library, connectedAccount as string);\n\n        const method = acceptCurrency === 'ETH' ? 'buyTokenByEtherWithPermission': 'buyTokenByTokenWithPermission';\n        let decimals = 6;\n        const isBSC = networkAvailable == 'bsc';\n        if (isBSC) {\n          if (acceptCurrency == 'ETH') {\n            decimals = 18;\n          } else if (acceptCurrency == 'USDT') {\n            decimals = 18;\n          } else if (acceptCurrency == 'USDC') {\n            decimals = 18;\n          }\n        } else {\n          if (acceptCurrency == 'ETH') {\n            decimals = 18;\n          } else if (acceptCurrency == 'USDT') {\n            decimals = 6;\n          } else if (acceptCurrency == 'USDC') {\n            decimals = 6;\n          }\n        }\n\n        let buyCurr = 'ETH';\n        if (isBSC) {\n          if (acceptCurrency === \"USDT\") {\n            buyCurr = process.env.REACT_APP_USDT_BSC_SMART_CONTRACT || '';\n          } else if (acceptCurrency === \"USDC\") {\n            buyCurr = process.env.REACT_APP_USDC_BSC_SMART_CONTRACT || '';\n          }\n        } else {\n          if (acceptCurrency === \"USDT\") {\n            buyCurr = process.env.REACT_APP_USDT_SMART_CONTRACT || '';\n          } else if (acceptCurrency === \"USDC\") {\n            buyCurr = process.env.REACT_APP_USDC_SMART_CONTRACT || '';\n          }\n        }\n\n        const params = acceptCurrency === 'ETH' ? [\n          connectedAccount,\n          connectedAccount,\n          maxBuy,\n          minBuy,\n          signature,\n          {\n            value: new BigNumber(amount).multipliedBy(10 ** 18).toFixed()\n          }\n        ]: [\n          connectedAccount,\n          // acceptCurrency === \"USDT\" ? USDT_ADDRESS: USDC_ADDRESS,\n          buyCurr,\n          new BigNumber(amount).multipliedBy(10 ** decimals).toFixed(),\n          connectedAccount,\n          maxBuy,\n          minBuy,\n          signature\n        ];\n\n        // let overrides = fixGasLimitWithProvider(library, 'buy');\n        const transaction = await poolContract[method](...params);\n\n        setUserPurchasedSignature(\"\");\n        setSignature(\"\");\n        setTokenDepositTransaction(transaction.hash);\n\n        await transaction.wait(1);\n\n        dispatch(alertSuccess(\"Token Deposit Successful!\"));\n        setTokenDepositLoading(false);\n        setTokenDepositSuccess(true);\n\n      }\n    } catch (err) {\n      console.log('[ERROR] - depositWithSignature:', err);\n      dispatch(alertFailure(TRANSACTION_ERROR_MESSAGE));\n      setDepositError(TRANSACTION_ERROR_MESSAGE);\n      setTokenDepositLoading(false);\n      setSignature(\"\");\n      setUserPurchasedSignature(\"\");\n    }\n  }, [minBuy, maxBuy, poolAddress, isClaimable]);\n\n  const deposit = useCallback(async () => {\n    if (amount && new BigNumber(amount).gt(0) && poolAddress) {\n      try {\n        setTokenDepositTransaction(\"\");\n        setDepositError(\"\");\n        setTokenDepositLoading(true);\n        setTokenDepositSuccess(false);\n\n        await signMessage();\n      } catch (err) {\n        console.log('[ERROR] - deposit:', err);\n        dispatch(alertFailure(TRANSACTION_ERROR_MESSAGE));\n        setDepositError(TRANSACTION_ERROR_MESSAGE);\n        setSignature(\"\");\n        setTokenDepositLoading(false);\n      }\n    }\n  }, [connectedAccount, library, poolAddress, amount])\n\n  // const estimateFee = useCallback(async (amount: string, acceptCurrency: string) => {\n  //   try {\n  //     setEstimateFeeLoading(true);\n\n  //     if (amount && new BigNumber(amount).gt(0) && poolAddress && acceptCurrency) {\n  //       const gasPrice = await library.getGasPrice();\n  //       const poolContract = getContract(poolAddress, Pool_ABI, library, connectedAccount as string);\n  //       const gasPriceCal = new BigNumber(gasPrice._hex).div(new BigNumber(10).pow(18));\n\n  //       const params = acceptCurrency === 'ETH' ? [\n  //         connectedAccount,\n  //         connectedAccount,\n  //         \"100000000000\",\n  //         \"100000000000\",\n  //         \"0x450859e7066471c9e38a481908e3547240285db6af24eed2615a3d825f043e5052bffc0815e98b6a4365526307e2f18b9552bb747739789d624ea666e4fb87ea1b\",\n  //         {\n  //           value: new BigNumber(amount).multipliedBy(10 ** 18).toFixed()\n  //         }\n  //       ]: [\n  //         connectedAccount,\n  //         acceptCurrency ===  \"USDT\" ? USDT_ADDRESS: USDC_ADDRESS,\n  //         new BigNumber(amount).multipliedBy(10 ** 18).toFixed(),\n  //         connectedAccount,\n  //         \"100000000000\",\n  //         \"299999999990\",\n  //         \"0x450859e7066471c9e38a481908e3547240285db6af24eed2615a3d825f043e5052bffc0815e98b6a4365526307e2f18b9552bb747739789d624ea666e4fb87ea1b\"\n  //       ];\n\n  //       const method = acceptCurrency === 'ETH' ? 'buyTokenByEtherWithPermission': 'buyTokenByTokenWithPermission';\n\n  //       const estimateFee = await poolContract.estimateGas[method](...params);\n\n  //       setEstimateErr(\"\");\n  //       setEstimateFeeLoading(false);\n\n  //       return new BigNumber(estimateFee._hex).multipliedBy(gasPriceCal).toNumber();\n  //     } else {\n  //       setEstimateErr(\"\");\n  //       setEstimateFeeLoading(false);\n  //       return 0;\n  //     }\n\n  //   } catch(err) {\n  //     console.error(err.message);\n  //     setEstimateFeeLoading(false);\n  //     setEstimateErr(err.message);\n  //   }\n  // }, [poolAddress, connectedAccount]);\n\n  return {\n    tokenDepositSuccess,\n    deposit,\n    tokenDepositLoading,\n    tokenDepositTransaction,\n    setTokenDepositTransaction,\n    setTokenDepositLoading,\n    depositError,\n  };\n}\n\nexport default usePoolDepositAction;\n"]},"metadata":{},"sourceType":"module"}