{"ast":null,"code":"var _jsxFileName = \"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/BuyTokenForm/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport BigNumber from 'bignumber.js';\nimport NumberFormat from 'react-number-format';\nimport TransactionSubmitModal from '../../../components/Base/TransactionSubmitModal';\nimport Button from '../Button';\nimport useStyles from './style';\nimport { getUSDCAddress, getUSDTAddress, getBUSDAddress } from '../../../utils/contractAddress/getAddresses';\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport { ETH_CHAIN_ID } from '../../../constants/network';\nimport { PurchaseCurrency } from '../../../constants/purchasableCurrency';\nimport getAccountBalance from '../../../utils/getAccountBalance';\nimport { connectWalletSuccess } from '../../../store/actions/wallet';\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useTokenAllowance from '../../../hooks/useTokenAllowance';\nimport useUserPurchased from '../hooks/useUserPurchased';\nimport usePoolDepositAction from '../hooks/usePoolDepositAction';\nimport useTokenApprove from '../../../hooks/useTokenApprove';\nimport useAuth from '../../../hooks/useAuth';\nimport { withWidth, isWidthDown, isWidthUp } from '@material-ui/core';\nimport { convertUnixTimeToDateTime } from \"../../../utils/convertDate\";\nimport { getIconCurrencyUsdt } from \"../../../utils/usdt\";\nimport useTokenSold from \"../hooks/useTokenSold\";\nimport { getEtherscanName } from \"../../../utils/network\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst REGEX_NUMBER = /^-?[0-9]{0,}[.]{0,1}[0-9]{0,6}$/;\nvar MessageType;\n\n(function (MessageType) {\n  MessageType[\"error\"] = \"error\";\n  MessageType[\"warning\"] = \"warning\";\n})(MessageType || (MessageType = {}));\n\nconst BuyTokenForm = props => {\n  _s();\n\n  const styles = useStyles();\n  const dispatch = useDispatch();\n  const [input, setInput] = useState(\"\");\n  const [openApproveModal, setApproveModal] = useState(false);\n  const [openSubmitModal, setOpenSubmitModal] = useState(false);\n  const [estimateTokens, setEstimateTokens] = useState(0);\n  const [tokenAllowance, setTokenAllowance] = useState(undefined);\n  const [tokenBalance, setTokenBalance] = useState(0);\n  const [walletBalance, setWalletBalance] = useState(0);\n  const [userPurchased, setUserPurchased] = useState(0);\n  const [poolBalance, setPoolBalance] = useState(0);\n  const [loadingPoolInfo, setLoadingPoolInfo] = useState(false);\n  const {\n    tokenDetails,\n    rate,\n    poolAddress,\n    maximumBuy,\n    purchasableCurrency,\n    poolId,\n    availablePurchase,\n    ableToFetchFromBlockchain,\n\n    /* minTier, */\n    isDeployed,\n    minimumBuy,\n    poolAmount,\n    startBuyTimeInDate,\n    endBuyTimeInDate,\n    endJoinTimeInDate,\n    tokenSold,\n    setBuyTokenSuccess,\n    isClaimable,\n    currentUserTier,\n    joinPoolSuccess,\n    alreadyJoinPool,\n    existedWinner,\n    disableAllButton,\n    networkAvailable\n  } = props;\n  console.log('maximumBuy11', maximumBuy, rate);\n  const {\n    connectedAccount,\n    wrongChain\n  } = useAuth();\n  /* const userTier = useTypedSelector(state => state.userTier).data; */\n\n  const {\n    appChainID,\n    walletChainID\n  } = useTypedSelector(state => state.appNetwork).data;\n  const connector = useTypedSelector(state => state.connector).data;\n  const etherscanName = getEtherscanName({\n    networkAvailable\n  });\n  const {\n    deposit,\n    tokenDepositLoading,\n    tokenDepositTransaction,\n    depositError,\n    tokenDepositSuccess\n  } = usePoolDepositAction({\n    poolAddress,\n    poolId,\n    purchasableCurrency,\n    amount: input,\n    isClaimable,\n    networkAvailable\n  });\n  const {\n    currencyIcon,\n    currencyName\n  } = getIconCurrencyUsdt({\n    purchasableCurrency,\n    networkAvailable\n  });\n  const {\n    retrieveTokenAllowance\n  } = useTokenAllowance();\n  const {\n    retrieveUserPurchased\n  } = useUserPurchased(tokenDetails, poolAddress, ableToFetchFromBlockchain);\n  const getApproveToken = useCallback(appChainID => {\n    if (purchasableCurrency && purchasableCurrency === PurchaseCurrency.USDT) {\n      return {\n        address: getUSDTAddress(appChainID),\n        name: \"USDT\",\n        symbol: \"USDT\",\n        decimals: appChainID == ETH_CHAIN_ID ? 6 : 18\n      };\n    }\n\n    if (purchasableCurrency && purchasableCurrency === PurchaseCurrency.BUSD) {\n      return {\n        address: getBUSDAddress(appChainID),\n        name: \"BUSD\",\n        symbol: \"BUSD\",\n        decimals: 18\n      };\n    }\n\n    if (purchasableCurrency && purchasableCurrency === PurchaseCurrency.USDC) {\n      return {\n        address: getUSDCAddress(appChainID),\n        name: \"USDC\",\n        symbol: \"USDC\",\n        decimals: appChainID == ETH_CHAIN_ID ? 6 : 18\n      };\n    }\n\n    if (purchasableCurrency && purchasableCurrency === PurchaseCurrency.ETH) {\n      return {\n        address: \"0x00\",\n        name: 'ETH',\n        symbol: 'ETH',\n        decimals: 18\n      };\n    }\n  }, [purchasableCurrency, appChainID]);\n  const tokenToApprove = getApproveToken(appChainID);\n  const {\n    approveToken,\n    tokenApproveLoading,\n    transactionHash\n  } = useTokenApprove(tokenToApprove, connectedAccount, poolAddress, false);\n  const {\n    retrieveTokenBalance\n  } = useTokenBalance(tokenToApprove, connectedAccount); // Check if user already buy ICO token at the first time or not ?\n\n  const firstBuy = localStorage.getItem('firstBuy') || undefined;\n  let parsedFirstBuy = {};\n\n  if (firstBuy) {\n    try {\n      parsedFirstBuy = JSON.parse(firstBuy);\n    } catch (err) {\n      console.log(err.message);\n    }\n  } // Check if user already buy at least minimum tokens at the first time\n\n\n  const connectedAccountFirstBuy = connectedAccount ? parsedFirstBuy[poolAddress] ? parsedFirstBuy[poolAddress][connectedAccount] : false : false;\n  const availableMaximumBuy = useMemo(() => {\n    // Transform Maximum Buy in USDT tokens to ICO tokens by rate\n    const maxBuy = new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate)).decimalPlaces(2, BigNumber.ROUND_FLOOR); // Check if max buy greater than total ICO coins sold\n\n    if (maxBuy.gt(new BigNumber(tokenBalance))) {\n      return new BigNumber(tokenBalance).gt(0) ? new BigNumber(tokenBalance).decimalPlaces(2, BigNumber.ROUND_FLOOR).toFixed() : '0';\n    }\n\n    return new BigNumber(maxBuy).gt(0) ? maxBuy.decimalPlaces(2, BigNumber.ROUND_FLOOR).toFixed() : '0';\n  }, [tokenBalance, maximumBuy, userPurchased, poolAmount, tokenSold, rate]);\n  const {\n    retrieveTokenSold,\n    tokenSold: totalUserTokenSold\n  } = useTokenSold(tokenDetails, poolAddress, ableToFetchFromBlockchain);\n  const poolErrorBeforeBuy = useMemo(() => {\n    const timeToShowMsg = new Date() > endJoinTimeInDate && new Date() < startBuyTimeInDate; // if (\n    //   poolBalance\n    //   && poolAmount\n    //   && startBuyTimeInDate\n    //   && endJoinTimeInDate &&\n    //   new BigNumber(poolAmount).gt(0) &&\n    //   new BigNumber(poolBalance).lt(new BigNumber(poolAmount)) &&\n    //   timeToShowMsg\n    // ) {\n    //   return {\n    //     message: `This pool is not ready to buy, please contact the administrator for more information.`,\n    //     type: MessageType.warning\n    //   };\n    // }\n\n    if (minimumBuy && input && new BigNumber(input || 0).lt(minimumBuy) && !connectedAccountFirstBuy && new Date() > startBuyTimeInDate) {\n      return {\n        message: `The minimum amount you must trade is ${new BigNumber(minimumBuy).toFixed(2)} ${currencyName}.`,\n        type: MessageType.error\n      };\n    }\n\n    if (input && new BigNumber(estimateTokens).gt(new BigNumber(poolAmount))) {\n      return {\n        message: `You can only buy  up to ${numberWithCommas(`${new BigNumber(poolAmount).minus(new BigNumber(totalUserTokenSold)).toFixed()}`)} ${tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.symbol}.`,\n        type: MessageType.error\n      };\n    }\n\n    return;\n  }, [minimumBuy, estimateTokens, poolBalance, poolAmount, userPurchased, purchasableCurrency, input, startBuyTimeInDate, endJoinTimeInDate, connectedAccountFirstBuy]);\n  let enableApprove = false; // Actually I don't know why i'm doing it right here :)))\n\n  if (tokenAllowance != null || tokenAllowance != undefined) {\n    if ((tokenAllowance <= 0 || new BigNumber(tokenAllowance).lt(new BigNumber(input))) && purchasableCurrency && purchasableCurrency !== PurchaseCurrency.ETH && !wrongChain && ableToFetchFromBlockchain && isDeployed // && (alreadyJoinPool || joinPoolSuccess)\n    && existedWinner && !disableAllButton) {\n      enableApprove = true;\n    }\n  } // Check whether current user's tier is valid or not\n\n  /* const validTier = new BigNumber(userTier).gte(minTier); */\n  // Check multiple conditions for purchasing time\n\n\n  const purchasable = availablePurchase && estimateTokens > 0 && new BigNumber(input).lte(new BigNumber(maximumBuy)) && !poolErrorBeforeBuy && new BigNumber(input).lte(new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate))) && new BigNumber(estimateTokens).lte(new BigNumber(poolAmount).minus(tokenSold)) && new BigNumber(tokenBalance).gte(new BigNumber(input)) && !wrongChain && !disableAllButton\n  /* && validTier */\n  && (purchasableCurrency !== PurchaseCurrency.ETH ? new BigNumber(tokenAllowance || 0).gt(0) : true); // Fetch User balance\n\n  const fetchUserBalance = useCallback(async () => {\n    if (appChainID && connectedAccount && connector) {\n      const accountBalance = await getAccountBalance(appChainID, walletChainID, connectedAccount, connector);\n      dispatch(connectWalletSuccess(connector, [connectedAccount], {\n        [connectedAccount]: new BigNumber(accountBalance._hex).div(new BigNumber(10).pow(18)).toFixed(5)\n      }));\n    }\n  }, [connector, appChainID, walletChainID, connectedAccount]);\n  const fetchPoolDetails = useCallback(async () => {\n    if (tokenDetails && poolAddress && connectedAccount && tokenToApprove) {\n      setTokenAllowance(await retrieveTokenAllowance(tokenToApprove, connectedAccount, poolAddress));\n      setUserPurchased(await retrieveUserPurchased(connectedAccount, poolAddress));\n      setTokenBalance(await retrieveTokenBalance(tokenToApprove, connectedAccount));\n      setWalletBalance(await retrieveTokenBalance(tokenDetails, connectedAccount));\n      setPoolBalance(await retrieveTokenBalance(tokenDetails, poolAddress));\n    }\n  }, [tokenDetails, connectedAccount, tokenToApprove, poolAddress]);\n  useEffect(() => {\n    if (maximumBuy && userPurchased && rate) {\n      const remainingAmount = new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate)).decimalPlaces(2, BigNumber.ROUND_FLOOR);\n      remainingAmount.gt(0) && setInput(remainingAmount.toFixed(2));\n    }\n\n    return () => {\n      setInput(\"\");\n    };\n  }, [maximumBuy, userPurchased, rate]);\n  useEffect(() => {\n    const fetchPoolDetailsBlockchain = async () => {\n      await fetchPoolDetails();\n      setLoadingPoolInfo(false);\n    };\n\n    loadingPoolInfo && fetchPoolDetailsBlockchain();\n  }, [loadingPoolInfo]); // Handle for fetching pool general information 1 time\n\n  useEffect(() => {\n    const fetchTokenPoolAllowance = async () => {\n      try {\n        setLoadingPoolInfo(true);\n      } catch (err) {\n        setLoadingPoolInfo(false);\n      }\n    };\n\n    ableToFetchFromBlockchain && connectedAccount && fetchTokenPoolAllowance();\n  }, [connectedAccount, ableToFetchFromBlockchain]); // Check if has any error when deposit => close modal\n\n  useEffect(() => {\n    if (depositError) {\n      setOpenSubmitModal(false);\n    }\n  }, [depositError]); // Re-fetch user balance when deposit successful\n\n  useEffect(() => {\n    const handleWhenDepositSuccess = async () => {\n      setBuyTokenSuccess(true);\n      await fetchUserBalance();\n      await fetchPoolDetails();\n    };\n\n    tokenDepositSuccess && handleWhenDepositSuccess();\n  }, [tokenDepositSuccess]);\n  useEffect(() => {\n    if (tokenDepositTransaction) {\n      //  Clear input field and additional information field below and close modal\n      setInput(\"\");\n      setEstimateTokens(0);\n\n      if (!connectedAccountFirstBuy) {\n        localStorage.setItem(\"firstBuy\", JSON.stringify(Object.assign({}, { ...parsedFirstBuy,\n          [poolAddress]: { ...parsedFirstBuy[poolAddress],\n            [connectedAccount]: true\n          }\n        })));\n      }\n    }\n  }, [tokenDepositTransaction, connectedAccountFirstBuy]);\n  useEffect(() => {\n    if (input && rate && purchasableCurrency) {\n      const tokens = new BigNumber(input).multipliedBy(new BigNumber(1).div(rate)).toNumber();\n      const tokenWithDecimal = new BigNumber(tokens).decimalPlaces(6).toNumber();\n      console.log('tokens===>', tokens, tokenWithDecimal);\n      setEstimateTokens(tokenWithDecimal);\n    } else {\n      setEstimateTokens(0);\n    }\n  }, [input, purchasableCurrency, rate]);\n\n  const handleInputChange = async e => {\n    const value = e.target.value.replaceAll(\",\", \"\");\n\n    if (value === '' || REGEX_NUMBER.test(value)) {\n      setInput(value);\n    }\n  };\n\n  const handleTokenDeposit = async () => {\n    try {\n      if (purchasableCurrency && ableToFetchFromBlockchain) {\n        setOpenSubmitModal(true);\n        setBuyTokenSuccess(false); // Call to smart contract to deposit token and refetch user balance\n\n        await deposit();\n      }\n    } catch (err) {\n      setOpenSubmitModal(false);\n    }\n  };\n\n  const handleTokenApprove = async () => {\n    try {\n      setApproveModal(true);\n      await approveToken();\n\n      if (tokenDetails && poolAddress && connectedAccount && tokenToApprove) {\n        setTokenAllowance(await retrieveTokenAllowance(tokenToApprove, connectedAccount, poolAddress));\n        setTokenBalance(await retrieveTokenBalance(tokenToApprove, connectedAccount));\n      }\n    } catch (err) {\n      setApproveModal(false);\n    }\n  };\n\n  console.log('poolAmount--maximumBuy:==========>', poolAmount, maximumBuy, userPurchased, rate);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: this.styles.buyTokenForm,\n    children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: this.styles.buyTokenFormTitle,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: this.styles.allowcationWrap,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: this.styles.allowcationTitle,\n            children: \"Max Allocation: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: this.styles.allocationContent,\n            children: [numberWithCommas(new BigNumber(maximumBuy).toFixed()), \" \", currencyName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: this.styles.allowcationWrap,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: this.styles.allowcationTitle,\n            children: \"Have Bought: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: this.styles.allocationContent,\n            children: [numberWithCommas(new BigNumber(userPurchased).multipliedBy(rate).decimalPlaces(2, BigNumber.ROUND_CEIL) // Round UP with 2 decimal places: 1.369999 --> 1.37\n            .toFixed()), \" \", currencyName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: this.styles.allowcationWrap,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: this.styles.allowcationTitle,\n            children: \"Remaining: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: this.styles.allocationContent,\n            children: [numberWithCommas(new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate)).lte(0) ? '0' : new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate)).decimalPlaces(2, BigNumber.ROUND_FLOOR) // Round DOWN with 2 decimal places: 1.369999 --> 1.36\n            .toFixed()), \" \", currencyName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: this.styles.allowcationWrap,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: this.styles.allowcationTitle,\n            children: \"Tier Buy Time: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: this.styles.allocationContent,\n            children: !!currentUserTier && !!currentUserTier.start_time && !!currentUserTier.end_time && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [convertUnixTimeToDateTime(currentUserTier.start_time, 1), ' ', \" to \", ' ', convertUnixTimeToDateTime(currentUserTier.end_time, 1)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.styles.buyTokenInputForm,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: this.styles.buyTokenInputLabel,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this), isWidthUp('sm', props.width) && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Your wallet balance:\\xA0\", numberWithCommas(parseFloat(tokenBalance.toString()).toFixed(6)), \" \\xA0\", currencyName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 44\n        }, this), isWidthDown('xs', props.width) && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Balance:\\xA0\", numberWithCommas(parseFloat(tokenBalance.toString()).toFixed(6)), \" \\xA0\", currencyName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.styles.buyTokenInputWrapper,\n        children: [/*#__PURE__*/_jsxDEV(NumberFormat, {\n          className: this.styles.buyTokenInput,\n          placeholder: '0',\n          thousandSeparator: true,\n          onChange: handleInputChange,\n          decimalScale: 6,\n          value: input,\n          defaultValue: maximumBuy || 0,\n          max: tokenBalance,\n          min: 0,\n          maxLength: 255,\n          disabled: wrongChain\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: this.styles.purchasableCurrency,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: this.styles.purchasableCurrencyMax,\n            onClick: () => {\n              setInput(new BigNumber(availableMaximumBuy).decimalPlaces(2, BigNumber.ROUND_FLOOR).toFixed());\n            },\n            children: \"Max\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: currencyIcon,\n            alt: purchasableCurrency,\n            className: this.styles.purchasableCurrencyIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 13\n          }, this), currencyName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: this.styles.buyTokenFee,\n      children: [\"Your Balance: \", numberWithCommas(`${walletBalance || 0}`), \" \", tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.symbol]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.styles.buyTokenEstimate,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: this.styles.buyTokenEstimateLabel,\n        children: \"You will get approximately\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        className: this.styles.buyTokenEstimateAmount,\n        children: [numberWithCommas(`${estimateTokens}`), \" \", tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.symbol]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: `${(poolErrorBeforeBuy === null || poolErrorBeforeBuy === void 0 ? void 0 : poolErrorBeforeBuy.type) === MessageType.error ? `${this.styles.poolErrorBuy}` : `${this.styles.poolErrorBuyWarning}`}`,\n      children: poolErrorBeforeBuy && poolErrorBeforeBuy.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.styles.btnGroup,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        text: new BigNumber(tokenAllowance || 0).gt(0) ? 'Approved' : 'Approve',\n        backgroundColor: '#29C08A',\n        disabled: !enableApprove,\n        onClick: handleTokenApprove,\n        loading: tokenApproveLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        text: 'Buy',\n        backgroundColor: '#3232DC',\n        disabled: !purchasable,\n        onClick: handleTokenDeposit,\n        loading: tokenDepositLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }, this), purchasableCurrency !== PurchaseCurrency.ETH && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: this.styles.approveWarning,\n      children: `You need to Approve once (and only once) before you can start purchasing.`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TransactionSubmitModal, {\n      opened: openSubmitModal,\n      handleClose: () => {\n        setOpenSubmitModal(false);\n      },\n      transactionHash: tokenDepositTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionSubmitModal, {\n      additionalText: `Please be patient and no need to approve again, you can check the transaction status on ${etherscanName}.`,\n      opened: openApproveModal,\n      handleClose: () => {\n        setApproveModal(false);\n      },\n      transactionHash: transactionHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 446,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BuyTokenForm, \"0o69MhnsB/o2LRfXmzTRw9g7KSA=\", false, function () {\n  return [useStyles, useDispatch, useAuth, useTypedSelector, useTypedSelector, usePoolDepositAction, useTokenAllowance, useUserPurchased, useTokenApprove, useTokenBalance, useTokenSold];\n});\n\n_c = BuyTokenForm;\nexport default withWidth()(BuyTokenForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"BuyTokenForm\");","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/BuyTokenForm/index.tsx"],"names":["React","useEffect","useState","useCallback","useMemo","useDispatch","BigNumber","NumberFormat","TransactionSubmitModal","Button","useStyles","getUSDCAddress","getUSDTAddress","getBUSDAddress","numberWithCommas","ETH_CHAIN_ID","PurchaseCurrency","getAccountBalance","connectWalletSuccess","useTypedSelector","useTokenBalance","useTokenAllowance","useUserPurchased","usePoolDepositAction","useTokenApprove","useAuth","withWidth","isWidthDown","isWidthUp","convertUnixTimeToDateTime","getIconCurrencyUsdt","useTokenSold","getEtherscanName","REGEX_NUMBER","MessageType","BuyTokenForm","props","styles","dispatch","input","setInput","openApproveModal","setApproveModal","openSubmitModal","setOpenSubmitModal","estimateTokens","setEstimateTokens","tokenAllowance","setTokenAllowance","undefined","tokenBalance","setTokenBalance","walletBalance","setWalletBalance","userPurchased","setUserPurchased","poolBalance","setPoolBalance","loadingPoolInfo","setLoadingPoolInfo","tokenDetails","rate","poolAddress","maximumBuy","purchasableCurrency","poolId","availablePurchase","ableToFetchFromBlockchain","isDeployed","minimumBuy","poolAmount","startBuyTimeInDate","endBuyTimeInDate","endJoinTimeInDate","tokenSold","setBuyTokenSuccess","isClaimable","currentUserTier","joinPoolSuccess","alreadyJoinPool","existedWinner","disableAllButton","networkAvailable","console","log","connectedAccount","wrongChain","appChainID","walletChainID","state","appNetwork","data","connector","etherscanName","deposit","tokenDepositLoading","tokenDepositTransaction","depositError","tokenDepositSuccess","amount","currencyIcon","currencyName","retrieveTokenAllowance","retrieveUserPurchased","getApproveToken","USDT","address","name","symbol","decimals","BUSD","USDC","ETH","tokenToApprove","approveToken","tokenApproveLoading","transactionHash","retrieveTokenBalance","firstBuy","localStorage","getItem","parsedFirstBuy","JSON","parse","err","message","connectedAccountFirstBuy","availableMaximumBuy","maxBuy","minus","multipliedBy","decimalPlaces","ROUND_FLOOR","gt","toFixed","retrieveTokenSold","totalUserTokenSold","poolErrorBeforeBuy","timeToShowMsg","Date","lt","type","error","enableApprove","purchasable","lte","gte","fetchUserBalance","accountBalance","_hex","div","pow","fetchPoolDetails","remainingAmount","fetchPoolDetailsBlockchain","fetchTokenPoolAllowance","handleWhenDepositSuccess","setItem","stringify","Object","assign","tokens","toNumber","tokenWithDecimal","handleInputChange","e","value","target","replaceAll","test","handleTokenDeposit","handleTokenApprove","buyTokenForm","buyTokenFormTitle","allowcationWrap","allowcationTitle","allocationContent","ROUND_CEIL","start_time","end_time","buyTokenInputForm","buyTokenInputLabel","width","parseFloat","toString","buyTokenInputWrapper","buyTokenInput","purchasableCurrencyMax","purchasableCurrencyIcon","buyTokenFee","buyTokenEstimate","buyTokenEstimateLabel","buyTokenEstimateAmount","poolErrorBuy","poolErrorBuyWarning","btnGroup","approveWarning"],"mappings":"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","sourcesContent":["import React, { Dispatch, SetStateAction, useEffect, useState, useCallback, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport BigNumber from 'bignumber.js';\nimport NumberFormat from 'react-number-format';\n\nimport TransactionSubmitModal from '../../../components/Base/TransactionSubmitModal';\nimport Button from '../Button';\nimport useStyles from './style';\n\nimport { getUSDCAddress, getUSDTAddress, getBUSDAddress } from '../../../utils/contractAddress/getAddresses';\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport { BSC_CHAIN_ID, ETH_CHAIN_ID } from '../../../constants/network';\nimport { PurchaseCurrency } from '../../../constants/purchasableCurrency';\nimport { TokenType } from '../../../hooks/useTokenDetails';\nimport getAccountBalance from '../../../utils/getAccountBalance';\nimport { connectWalletSuccess } from '../../../store/actions/wallet';\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useTokenAllowance from '../../../hooks/useTokenAllowance';\nimport useUserPurchased from '../hooks/useUserPurchased';\nimport usePoolDepositAction from '../hooks/usePoolDepositAction';\nimport useTokenApprove from '../../../hooks/useTokenApprove';\nimport useAuth from '../../../hooks/useAuth';\nimport { withWidth, isWidthDown, isWidthUp } from '@material-ui/core';\nimport moment from \"moment\";\nimport {\n  convertTimeToStringFormat,\n  convertTimeToStringFormatWithoutGMT,\n  convertUnixTimeToDateTime\n} from \"../../../utils/convertDate\";\nimport {getIconCurrencyUsdt} from \"../../../utils/usdt\";\nimport useTokenSold from \"../hooks/useTokenSold\";\nimport {getEtherscanName} from \"../../../utils/network\";\n\nconst REGEX_NUMBER = /^-?[0-9]{0,}[.]{0,1}[0-9]{0,6}$/;\n\ntype BuyTokenFormProps = {\n  tokenDetails: TokenType | undefined,\n  rate: number | undefined,\n  poolAddress: string | undefined;\n  maximumBuy: number;\n  minimumBuy: number;\n  poolAmount: number | undefined;\n  purchasableCurrency: string | undefined;\n  poolId: number | undefined;\n  joinTime: Date | undefined;\n  method: string | undefined;\n  availablePurchase: boolean | undefined;\n  ableToFetchFromBlockchain: boolean | undefined\n  minTier: number | undefined\n  isDeployed: boolean | undefined\n  endBuyTimeInDate: Date | undefined\n  startBuyTimeInDate: Date | undefined\n  endJoinTimeInDate: Date | undefined\n  tokenSold: string | undefined\n  setBuyTokenSuccess: Dispatch<SetStateAction<boolean>>\n  isClaimable: boolean | undefined\n  currentUserTier: any,\n  alreadyJoinPool: any,\n  joinPoolSuccess: boolean,\n  existedWinner: any,\n  disableAllButton: boolean,\n  networkAvailable: string,\n}\n\nenum MessageType {\n  error = 'error',\n  warning = 'warning'\n}\n\nconst BuyTokenForm: React.FC<BuyTokenFormProps> = (props: any) => {\n  const styles = useStyles();\n  const dispatch = useDispatch();\n\n  const [input, setInput] = useState(\"\");\n  const [openApproveModal, setApproveModal] = useState(false);\n  const [openSubmitModal, setOpenSubmitModal] = useState(false);\n  const [estimateTokens, setEstimateTokens] = useState<number>(0);\n  const [tokenAllowance, setTokenAllowance] = useState<number | undefined>(undefined);\n  const [tokenBalance, setTokenBalance] = useState<number>(0);\n  const [walletBalance, setWalletBalance] = useState<number>(0);\n  const [userPurchased, setUserPurchased] = useState<number>(0);\n  const [poolBalance, setPoolBalance] = useState<number>(0);\n  const [loadingPoolInfo, setLoadingPoolInfo] = useState<boolean>(false);\n\n  const {\n    tokenDetails,\n    rate,\n    poolAddress,\n    maximumBuy,\n    purchasableCurrency,\n    poolId,\n    availablePurchase,\n    ableToFetchFromBlockchain,\n    /* minTier, */\n    isDeployed,\n    minimumBuy,\n    poolAmount,\n    startBuyTimeInDate,\n    endBuyTimeInDate,\n    endJoinTimeInDate,\n    tokenSold,\n    setBuyTokenSuccess,\n    isClaimable,\n    currentUserTier,\n    joinPoolSuccess,\n    alreadyJoinPool,\n    existedWinner,\n    disableAllButton,\n    networkAvailable,\n} = props;\n\n  console.log('maximumBuy11', maximumBuy, rate);\n\n  const { connectedAccount, wrongChain } = useAuth();\n  /* const userTier = useTypedSelector(state => state.userTier).data; */\n  const { appChainID, walletChainID } = useTypedSelector(state => state.appNetwork).data;\n  const connector = useTypedSelector(state => state.connector).data;\n\n  const etherscanName = getEtherscanName({networkAvailable});\n  const {\n    deposit,\n    tokenDepositLoading,\n    tokenDepositTransaction,\n    depositError,\n    tokenDepositSuccess\n  } = usePoolDepositAction({ poolAddress, poolId, purchasableCurrency, amount: input, isClaimable, networkAvailable });\n\n  const { currencyIcon, currencyName } = getIconCurrencyUsdt({ purchasableCurrency, networkAvailable });\n  const { retrieveTokenAllowance } = useTokenAllowance();\n  const { retrieveUserPurchased } = useUserPurchased(tokenDetails, poolAddress, ableToFetchFromBlockchain);\n\n  const getApproveToken = useCallback((appChainID: string) => {\n    if (purchasableCurrency && purchasableCurrency === PurchaseCurrency.USDT) {\n      return {\n        address: getUSDTAddress(appChainID),\n        name: \"USDT\",\n        symbol: \"USDT\",\n        decimals: appChainID == ETH_CHAIN_ID ? 6 : 18\n      };\n    }\n\n    if (purchasableCurrency && purchasableCurrency === PurchaseCurrency.BUSD) {\n      return {\n        address: getBUSDAddress(appChainID),\n        name: \"BUSD\",\n        symbol: \"BUSD\",\n        decimals: 18\n      };\n    }\n\n    if (purchasableCurrency && purchasableCurrency === PurchaseCurrency.USDC) {\n      return {\n        address: getUSDCAddress(appChainID),\n        name: \"USDC\",\n        symbol: \"USDC\",\n        decimals: appChainID == ETH_CHAIN_ID ? 6 : 18\n      };\n    }\n\n    if (purchasableCurrency && purchasableCurrency === PurchaseCurrency.ETH) {\n      return {\n        address: \"0x00\",\n        name: 'ETH',\n        symbol: 'ETH',\n        decimals: 18\n      }\n    }\n  }, [purchasableCurrency, appChainID])\n\n  const tokenToApprove = getApproveToken(appChainID);\n\n  const { approveToken, tokenApproveLoading, transactionHash } = useTokenApprove(\n    tokenToApprove,\n    connectedAccount,\n    poolAddress,\n    false\n  );\n\n  const { retrieveTokenBalance } = useTokenBalance(tokenToApprove, connectedAccount);\n\n  // Check if user already buy ICO token at the first time or not ?\n  const firstBuy = localStorage.getItem('firstBuy') || undefined;\n  let parsedFirstBuy = {} as any;\n  if (firstBuy) {\n    try {\n      parsedFirstBuy = JSON.parse(firstBuy);\n    }\n    catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  // Check if user already buy at least minimum tokens at the first time\n  const connectedAccountFirstBuy =\n    connectedAccount\n    ? (\n       parsedFirstBuy[poolAddress] ? parsedFirstBuy[poolAddress][connectedAccount]: false\n    )\n    : false;\n\n  const availableMaximumBuy = useMemo(() => {\n    // Transform Maximum Buy in USDT tokens to ICO tokens by rate\n    const maxBuy = new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate))\n      .decimalPlaces(2, BigNumber.ROUND_FLOOR);\n\n    // Check if max buy greater than total ICO coins sold\n    if (maxBuy.gt(new BigNumber(tokenBalance))) {\n      return (new BigNumber(tokenBalance).gt(0))\n        ? new BigNumber(tokenBalance).decimalPlaces(2, BigNumber.ROUND_FLOOR).toFixed()\n        : '0';\n    }\n\n    return (new BigNumber(maxBuy).gt(0))\n      ? (maxBuy.decimalPlaces(2, BigNumber.ROUND_FLOOR).toFixed())\n      : '0';\n  }, [tokenBalance, maximumBuy, userPurchased, poolAmount, tokenSold, rate]);\n\n  const { retrieveTokenSold, tokenSold: totalUserTokenSold  } = useTokenSold(tokenDetails, poolAddress, ableToFetchFromBlockchain);\n  const poolErrorBeforeBuy = useMemo(() => {\n    const timeToShowMsg = new Date() > endJoinTimeInDate && new Date() < startBuyTimeInDate;\n\n    // if (\n    //   poolBalance\n    //   && poolAmount\n    //   && startBuyTimeInDate\n    //   && endJoinTimeInDate &&\n    //   new BigNumber(poolAmount).gt(0) &&\n    //   new BigNumber(poolBalance).lt(new BigNumber(poolAmount)) &&\n    //   timeToShowMsg\n    // ) {\n    //   return {\n    //     message: `This pool is not ready to buy, please contact the administrator for more information.`,\n    //     type: MessageType.warning\n    //   };\n    // }\n\n    if (minimumBuy && input && new BigNumber(input || 0).lt(minimumBuy) && !connectedAccountFirstBuy && new Date() > startBuyTimeInDate) {\n      return {\n        message: `The minimum amount you must trade is ${new BigNumber(minimumBuy).toFixed(2)} ${currencyName}.`,\n        type: MessageType.error\n      }\n    }\n\n    if (\n      input &&\n      new BigNumber(estimateTokens).gt(new BigNumber(poolAmount))\n    ) {\n      return {\n        message: `You can only buy  up to ${numberWithCommas(`${new BigNumber(poolAmount).minus(new BigNumber(totalUserTokenSold)).toFixed()}`)} ${tokenDetails?.symbol}.`,\n        type: MessageType.error\n      }\n    }\n\n    return;\n  }, [\n    minimumBuy,\n    estimateTokens,\n    poolBalance,\n    poolAmount,\n    userPurchased,\n    purchasableCurrency,\n    input,\n    startBuyTimeInDate,\n    endJoinTimeInDate,\n    connectedAccountFirstBuy\n  ]);\n\n  let enableApprove = false;\n\n  // Actually I don't know why i'm doing it right here :)))\n  if (tokenAllowance != null || tokenAllowance != undefined) {\n    if ((tokenAllowance <= 0 || new BigNumber(tokenAllowance).lt(new BigNumber(input)))\n    && (purchasableCurrency && purchasableCurrency !== PurchaseCurrency.ETH)\n    && !wrongChain && ableToFetchFromBlockchain && isDeployed\n    // && (alreadyJoinPool || joinPoolSuccess)\n    && existedWinner && !disableAllButton\n    )  {\n      enableApprove = true;\n    }\n  }\n\n  // Check whether current user's tier is valid or not\n  /* const validTier = new BigNumber(userTier).gte(minTier); */\n\n  // Check multiple conditions for purchasing time\n  const purchasable =\n     availablePurchase\n     && estimateTokens > 0\n     && new BigNumber(input).lte(new BigNumber(maximumBuy))\n     && !poolErrorBeforeBuy\n     && new BigNumber(input).lte(new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate)))\n     && new BigNumber(estimateTokens).lte(new BigNumber(poolAmount).minus(tokenSold))\n     && new BigNumber(tokenBalance).gte(new BigNumber(input))\n     && !wrongChain\n     && !disableAllButton\n     /* && validTier */\n     && ((purchasableCurrency !== PurchaseCurrency.ETH ? new BigNumber(tokenAllowance || 0).gt(0): true));\n\n  // Fetch User balance\n  const fetchUserBalance = useCallback(async () => {\n      if (appChainID && connectedAccount && connector) {\n        const accountBalance = await getAccountBalance(appChainID, walletChainID, connectedAccount as string, connector);\n\n        dispatch(\n          connectWalletSuccess(\n            connector,\n            [connectedAccount],\n            {\n              [connectedAccount]: new BigNumber(accountBalance._hex).div(new BigNumber(10).pow(18)).toFixed(5)\n            }\n          )\n        )\n      }\n  }, [connector, appChainID, walletChainID, connectedAccount]);\n\n  const fetchPoolDetails = useCallback(async () => {\n      if (tokenDetails && poolAddress && connectedAccount && tokenToApprove) {\n        setTokenAllowance(await retrieveTokenAllowance(tokenToApprove, connectedAccount, poolAddress) as number);\n        setUserPurchased(await retrieveUserPurchased(connectedAccount, poolAddress) as number);\n        setTokenBalance(await retrieveTokenBalance(tokenToApprove, connectedAccount) as number);\n        setWalletBalance(await retrieveTokenBalance(tokenDetails, connectedAccount) as number);\n        setPoolBalance(await retrieveTokenBalance(tokenDetails, poolAddress) as number);\n      }\n\n  }, [tokenDetails, connectedAccount, tokenToApprove, poolAddress]);\n\n  useEffect(() => {\n    if (maximumBuy && userPurchased && rate) {\n      const remainingAmount = new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate)).decimalPlaces(2, BigNumber.ROUND_FLOOR);\n      remainingAmount.gt(0) && setInput(remainingAmount.toFixed(2));\n    }\n\n    return () => {\n      setInput(\"\");\n    }\n  }, [maximumBuy, userPurchased, rate]);\n\n  useEffect(() => {\n    const fetchPoolDetailsBlockchain = async () => {\n      await fetchPoolDetails();\n      setLoadingPoolInfo(false);\n    }\n\n    loadingPoolInfo && fetchPoolDetailsBlockchain();\n  }, [loadingPoolInfo]);\n\n  // Handle for fetching pool general information 1 time\n  useEffect(() => {\n    const fetchTokenPoolAllowance = async () => {\n      try {\n        setLoadingPoolInfo(true);\n      } catch (err) {\n        setLoadingPoolInfo(false);\n      }\n    }\n\n    ableToFetchFromBlockchain && connectedAccount && fetchTokenPoolAllowance();\n  }, [connectedAccount, ableToFetchFromBlockchain]);\n\n  // Check if has any error when deposit => close modal\n  useEffect(() => {\n    if (depositError) {\n      setOpenSubmitModal(false);\n    }\n  }, [depositError]);\n\n  // Re-fetch user balance when deposit successful\n  useEffect(() => {\n    const handleWhenDepositSuccess = async () => {\n      setBuyTokenSuccess(true);\n      await fetchUserBalance();\n      await fetchPoolDetails();\n    }\n\n    tokenDepositSuccess && handleWhenDepositSuccess();\n  }, [tokenDepositSuccess]);\n\n  useEffect(() => {\n    if (tokenDepositTransaction) {\n      //  Clear input field and additional information field below and close modal\n      setInput(\"\");\n      setEstimateTokens(0);\n\n      if (!connectedAccountFirstBuy) {\n        localStorage.setItem(\"firstBuy\", JSON.stringify(Object.assign({}, {\n          ...parsedFirstBuy,\n          [poolAddress as string]: {\n            ...parsedFirstBuy[poolAddress],\n            [connectedAccount as string]: true\n          }\n        })));\n      }\n    }\n  }, [tokenDepositTransaction, connectedAccountFirstBuy]);\n\n  useEffect(() => {\n    if (input && rate && purchasableCurrency) {\n      const tokens = new BigNumber(input).multipliedBy(new BigNumber(1).div(rate)).toNumber()\n      const tokenWithDecimal = new BigNumber(tokens).decimalPlaces(6).toNumber();\n      console.log('tokens===>', tokens, tokenWithDecimal);\n      setEstimateTokens(tokenWithDecimal);\n    } else {\n      setEstimateTokens(0);\n    }\n  }, [input, purchasableCurrency, rate]);\n\n  const handleInputChange = async (e: any) => {\n    const value = e.target.value.replaceAll(\",\", \"\");\n    if (value === '' || REGEX_NUMBER.test(value)) {\n      setInput(value);\n    }\n  }\n\n  const handleTokenDeposit = async () => {\n    try {\n      if (purchasableCurrency && ableToFetchFromBlockchain) {\n        setOpenSubmitModal(true);\n        setBuyTokenSuccess(false);\n\n        // Call to smart contract to deposit token and refetch user balance\n        await deposit();\n      }\n    } catch (err) {\n      setOpenSubmitModal(false);\n    }\n  }\n\n  const handleTokenApprove = async () => {\n    try {\n      setApproveModal(true);\n      await approveToken();\n\n      if (tokenDetails && poolAddress && connectedAccount && tokenToApprove) {\n        setTokenAllowance(await retrieveTokenAllowance(tokenToApprove, connectedAccount, poolAddress) as number);\n        setTokenBalance(await retrieveTokenBalance(tokenToApprove, connectedAccount) as number);\n      }\n    } catch (err) {\n      setApproveModal(false);\n    }\n  }\n\n  console.log('poolAmount--maximumBuy:==========>', poolAmount, maximumBuy, userPurchased, rate);\n\n  return (\n    <div className={this.styles.buyTokenForm}>\n      {\n        <>\n          <p className={this.styles.buyTokenFormTitle}>\n            <div className={this.styles.allowcationWrap}>\n              <span className={this.styles.allowcationTitle}>Max Allocation: </span>\n              <span className={this.styles.allocationContent}>\n                {numberWithCommas(new BigNumber(maximumBuy).toFixed())} {currencyName}\n              </span>\n            </div>\n\n            <div className={this.styles.allowcationWrap}>\n              <span className={this.styles.allowcationTitle}>Have Bought: </span>\n              <span className={this.styles.allocationContent}>\n                {numberWithCommas(\n                  new BigNumber(userPurchased).multipliedBy(rate)\n                    .decimalPlaces(2, BigNumber.ROUND_CEIL) // Round UP with 2 decimal places: 1.369999 --> 1.37\n                    .toFixed()\n                )} {currencyName}\n              </span>\n            </div>\n\n            <div className={this.styles.allowcationWrap}>\n              <span className={this.styles.allowcationTitle}>Remaining: </span>\n              <span className={this.styles.allocationContent}>\n                {numberWithCommas(\n                  new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate)).lte(0)\n                    ? '0'\n                    : (\n                      new BigNumber(maximumBuy).minus(new BigNumber(userPurchased).multipliedBy(rate))\n                        .decimalPlaces(2, BigNumber.ROUND_FLOOR) // Round DOWN with 2 decimal places: 1.369999 --> 1.36\n                        .toFixed()\n                    )\n                )} {currencyName}\n              </span>\n            </div>\n\n            <div className={this.styles.allowcationWrap}>\n              <span className={this.styles.allowcationTitle}>Tier Buy Time: </span>\n              <span className={this.styles.allocationContent}>\n              {!!currentUserTier && !!currentUserTier.start_time && !!currentUserTier.end_time &&\n                <>\n                  { convertUnixTimeToDateTime(currentUserTier.start_time, 1) }\n                  {' '} to {' '}\n                  { convertUnixTimeToDateTime(currentUserTier.end_time, 1) }\n                </>\n              }\n              </span>\n            </div>\n\n          </p>\n        </>\n      }\n      <div className={this.styles.buyTokenInputForm}>\n        <p className={this.styles.buyTokenInputLabel}>\n          <span>Input</span>\n          {isWidthUp('sm', props.width) && <span>Your wallet balance:&nbsp;\n            {numberWithCommas(parseFloat(tokenBalance.toString()).toFixed(6))} &nbsp;\n            {currencyName}\n          </span>}\n          {isWidthDown('xs', props.width) && <span>Balance:&nbsp;\n            {numberWithCommas(parseFloat(tokenBalance.toString()).toFixed(6))} &nbsp;\n            {currencyName}\n          </span>}\n        </p>\n        <div className={this.styles.buyTokenInputWrapper}>\n\n          <NumberFormat\n            className={this.styles.buyTokenInput}\n            placeholder={'0'}\n            thousandSeparator={true}\n            onChange={handleInputChange}\n            decimalScale={6}\n            value={input}\n            defaultValue={maximumBuy || 0}\n            max={tokenBalance}\n            min={0}\n            maxLength={255}\n            disabled={wrongChain}\n          />\n          <span className={this.styles.purchasableCurrency}>\n            <button\n              className={this.styles.purchasableCurrencyMax}\n              onClick={\n                () => {\n                  setInput(\n                    new BigNumber(availableMaximumBuy).decimalPlaces(2, BigNumber.ROUND_FLOOR).toFixed()\n                  )\n                }\n              }\n            >\n              Max\n            </button>\n            <img src={currencyIcon} alt={purchasableCurrency} className={this.styles.purchasableCurrencyIcon} />\n            {currencyName}\n          </span>\n        </div>\n      </div>\n      <p className={this.styles.buyTokenFee}>\n        Your Balance: {numberWithCommas(`${walletBalance || 0}` )} {tokenDetails?.symbol}\n      </p>\n      <div className={this.styles.buyTokenEstimate}>\n        <p className={this.styles.buyTokenEstimateLabel}>You will get approximately</p>\n        <strong className={this.styles.buyTokenEstimateAmount}>{numberWithCommas(`${estimateTokens}`)} {tokenDetails?.symbol}</strong>\n      </div>\n\n      {\n        <p className={`${poolErrorBeforeBuy?.type === MessageType.error ? `${this.styles.poolErrorBuy}`: `${this.styles.poolErrorBuyWarning}`}`}>\n          {poolErrorBeforeBuy && poolErrorBeforeBuy.message}\n        </p>\n      }\n\n      <div className={this.styles.btnGroup}>\n        <Button\n        text={new BigNumber(tokenAllowance || 0).gt(0) ? 'Approved': 'Approve'}\n        backgroundColor={'#29C08A'}\n        disabled={!enableApprove}\n        onClick={handleTokenApprove}\n        loading={tokenApproveLoading}\n        />\n        <Button\n          text={'Buy'}\n          backgroundColor={'#3232DC'}\n          disabled={!purchasable}\n          onClick={handleTokenDeposit}\n          loading={tokenDepositLoading}\n        />\n      </div>\n\n      {purchasableCurrency !== PurchaseCurrency.ETH &&\n        <p className={this.styles.approveWarning}>{`You need to Approve once (and only once) before you can start purchasing.`}</p>\n      }\n\n      <TransactionSubmitModal\n        opened={openSubmitModal}\n        handleClose={() => { setOpenSubmitModal(false); }}\n        transactionHash={tokenDepositTransaction}\n      />\n      <TransactionSubmitModal\n        additionalText={`Please be patient and no need to approve again, you can check the transaction status on ${etherscanName}.`}\n        opened={openApproveModal}\n        handleClose={() => { setApproveModal(false); }}\n        transactionHash={transactionHash}\n      />\n    </div>\n  )\n}\n\nexport default withWidth()(BuyTokenForm);\n"]},"metadata":{},"sourceType":"module"}