{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ethers } from 'ethers';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { getContractInstance, SmartContractMethod } from '../services/web3';\nimport ERC20_ABI from '../abi/Erc20.json';\n\nconst useTokenDetails = (address, networkAvailable) => {\n  _s();\n\n  const [tokenDetails, setTokenDetails] = useState(undefined);\n  const [tokenDetailsLoading, setTokenDetailsLoading] = useState(false);\n  const {\n    appChainID\n  } = useSelector(state => state.appNetwork).data;\n  const connector = useTypedSelector(state => state.connector).data;\n  useEffect(() => {\n    const fetchTokenDetails = async address => {\n      setTokenDetailsLoading(true);\n      const contract = getContractInstance(ERC20_ABI, address, connector, appChainID, SmartContractMethod.Read, networkAvailable === 'eth');\n\n      if (contract) {\n        const symbolCall = contract.methods.symbol().call();\n        const decimalsCall = contract.methods.decimals().call();\n        const nameCall = contract.methods.name().call();\n        const [symbol, decimals, name] = await Promise.all([symbolCall, decimalsCall, nameCall]);\n        setTokenDetailsLoading(false);\n        setTokenDetails({\n          symbol,\n          name,\n          decimals: Number(decimals),\n          address\n        });\n      }\n    };\n\n    address && networkAvailable && ethers.utils.isAddress(address) && fetchTokenDetails(address);\n\n    if (address == 'TBD') {\n      setTokenDetails({\n        symbol: 'TBA',\n        name: 'TBA',\n        decimals: 18,\n        address: 'Token contract not available yet.'\n      });\n    }\n  }, [address, networkAvailable]);\n  return {\n    tokenDetails,\n    loading: tokenDetailsLoading\n  };\n};\n\n_s(useTokenDetails, \"3PgBgX0MFj09ArLYu8RTrzYazvw=\", false, function () {\n  return [useSelector, useTypedSelector];\n});\n\nexport default useTokenDetails;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useTokenDetails.ts"],"names":["useState","useEffect","useSelector","ethers","useTypedSelector","getContractInstance","SmartContractMethod","ERC20_ABI","useTokenDetails","address","networkAvailable","tokenDetails","setTokenDetails","undefined","tokenDetailsLoading","setTokenDetailsLoading","appChainID","state","appNetwork","data","connector","fetchTokenDetails","contract","Read","symbolCall","methods","symbol","call","decimalsCall","decimals","nameCall","name","Promise","all","Number","utils","isAddress","loading"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,QAAyD,kBAAzD;AACA,OAAOC,SAAP,MAAsB,mBAAtB;;AASA,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAkBC,gBAAlB,KAA+C;AAAA;;AACrE,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAwBa,SAAxB,CAAhD;AACA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDf,QAAQ,CAAU,KAAV,CAA9D;AAEA,QAAM;AAAEgB,IAAAA;AAAF,MAAkBd,WAAW,CAAEe,KAAD,IAAgBA,KAAK,CAACC,UAAvB,CAAX,CAA8CC,IAAtE;AACA,QAAMC,SAAS,GAAIhB,gBAAgB,CAACa,KAAK,IAAIA,KAAK,CAACG,SAAhB,CAAhB,CAA2CD,IAA9D;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,iBAAiB,GAAG,MAAOZ,OAAP,IAA2B;AACnDM,MAAAA,sBAAsB,CAAC,IAAD,CAAtB;AAEA,YAAMO,QAAQ,GAAGjB,mBAAmB,CAClCE,SADkC,EAEnCE,OAFmC,EAGnCW,SAHmC,EAInCJ,UAJmC,EAKnCV,mBAAmB,CAACiB,IALe,EAMnCb,gBAAgB,KAAK,KANc,CAApC;;AASA,UAAIY,QAAJ,EAAc;AACZ,cAAME,UAAU,GAAGF,QAAQ,CAACG,OAAT,CAAiBC,MAAjB,GAA0BC,IAA1B,EAAnB;AACA,cAAMC,YAAY,GAAGN,QAAQ,CAACG,OAAT,CAAiBI,QAAjB,GAA4BF,IAA5B,EAArB;AACA,cAAMG,QAAQ,GAAGR,QAAQ,CAACG,OAAT,CAAiBM,IAAjB,GAAwBJ,IAAxB,EAAjB;AAEA,cAAM,CAACD,MAAD,EAASG,QAAT,EAAmBE,IAAnB,IAA2B,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACT,UAAD,EAAaI,YAAb,EAA2BE,QAA3B,CAAZ,CAAvC;AAEAf,QAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACAH,QAAAA,eAAe,CAAC;AACdc,UAAAA,MADc;AAEdK,UAAAA,IAFc;AAGdF,UAAAA,QAAQ,EAAEK,MAAM,CAACL,QAAD,CAHF;AAIdpB,UAAAA;AAJc,SAAD,CAAf;AAMD;AACF,KA3BD;;AA6BAA,IAAAA,OAAO,IAAIC,gBAAX,IAA+BP,MAAM,CAACgC,KAAP,CAAaC,SAAb,CAAuB3B,OAAvB,CAA/B,IAAkEY,iBAAiB,CAACZ,OAAD,CAAnF;;AACA,QAAGA,OAAO,IAAI,KAAd,EAAqB;AACnBG,MAAAA,eAAe,CAAC;AACdc,QAAAA,MAAM,EAAE,KADM;AAEdK,QAAAA,IAAI,EAAE,KAFQ;AAGdF,QAAAA,QAAQ,EAAE,EAHI;AAIdpB,QAAAA,OAAO,EAAE;AAJK,OAAD,CAAf;AAMD;AACF,GAvCQ,EAuCN,CAACA,OAAD,EAAUC,gBAAV,CAvCM,CAAT;AAyCA,SAAO;AACLC,IAAAA,YADK;AAEL0B,IAAAA,OAAO,EAAEvB;AAFJ,GAAP;AAID,CApDD;;GAAMN,e;UAIoBN,W,EACLE,gB;;;AAiDrB,eAAeI,eAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ethers } from 'ethers';\n\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { getContractInstance, SmartContractMethod } from '../services/web3';\nimport ERC20_ABI from '../abi/Erc20.json';\n\nexport type TokenType = {\n  decimals: number;\n  symbol: string;\n  name: string;\n  address: string;\n}\n\nconst useTokenDetails = (address: string, networkAvailable: string) => {\n  const [tokenDetails, setTokenDetails] = useState<TokenType | undefined>(undefined);\n  const [tokenDetailsLoading, setTokenDetailsLoading] = useState<boolean>(false);\n\n  const { appChainID }  = useSelector((state: any) => state.appNetwork).data;\n  const connector  = useTypedSelector(state => state.connector).data;\n\n  useEffect(() => {\n    const fetchTokenDetails = async (address: string) => {\n      setTokenDetailsLoading(true);\n\n      const contract = getContractInstance(\n        ERC20_ABI,\n       address,\n       connector,\n       appChainID,\n       SmartContractMethod.Read,\n       networkAvailable === 'eth'\n      );\n\n      if (contract) {\n        const symbolCall = contract.methods.symbol().call();\n        const decimalsCall = contract.methods.decimals().call();\n        const nameCall = contract.methods.name().call();\n\n        const [symbol, decimals, name] = await Promise.all([symbolCall, decimalsCall, nameCall]);\n\n        setTokenDetailsLoading(false);\n        setTokenDetails({\n          symbol,\n          name,\n          decimals: Number(decimals),\n          address\n        });\n      }\n    }\n\n    address && networkAvailable && ethers.utils.isAddress(address) && fetchTokenDetails(address);\n    if(address == 'TBD') {\n      setTokenDetails({\n        symbol: 'TBA',\n        name: 'TBA',\n        decimals: 18,\n        address: 'Token contract not available yet.'\n      });\n    }\n  }, [address, networkAvailable]);\n\n  return {\n    tokenDetails,\n    loading: tokenDetailsLoading\n  }\n}\n\nexport default useTokenDetails;\n"]},"metadata":{},"sourceType":"module"}