{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport useFetch from './useFetch';\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nconst useGetAirdrop = payload => {\n  _s();\n\n  const campaignId = payload.campaignId;\n  const connectedAccount = payload.connectedAccount;\n  const [fetchDone, setFetchDone] = useState(false);\n  const {\n    loading,\n    error,\n    data\n  } = useFetch(`/user/get-airdrop/${campaignId}/${connectedAccount}`, false, {});\n  const airdrop = useMemo(() => {\n    // if (connectedAccount && data && !loading && !error && fetchDone)  {\n    //   return data;\n    // }\n    return data;\n  }, [data, loading, error, fetchDone, connectedAccount]);\n  useEffect(() => {\n    data && setFetchDone(true);\n  }, [connectedAccount]);\n  return {\n    airdrop,\n    loading: !fetchDone\n  };\n};\n\n_s(useGetAirdrop, \"nxdSuVQBQNYisthxwpmmFG62y50=\", false, function () {\n  return [useFetch];\n});\n\nexport default useGetAirdrop;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useGetAirdrop.ts"],"names":["useEffect","useMemo","useState","useFetch","BASE_URL","process","env","REACT_APP_API_BASE_URL","useGetAirdrop","payload","campaignId","connectedAccount","fetchDone","setFetchDone","loading","error","data","airdrop"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,OAAnB,EAA4BC,QAA5B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAA7B;;AAMA,MAAMC,aAAa,GAAIC,OAAD,IAAkB;AAAA;;AACtC,QAAMC,UAAU,GAAGD,OAAO,CAACC,UAA3B;AACA,QAAMC,gBAAgB,GAAGF,OAAO,CAACE,gBAAjC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM;AAAEY,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA4Bb,QAAQ,CAAO,qBAAoBO,UAAW,IAAGC,gBAAiB,EAA1D,EAA6D,KAA7D,EAAoE,EAApE,CAA1C;AAEA,QAAMM,OAAO,GAAGhB,OAAO,CAAC,MAAM;AAC5B;AACA;AACA;AACA,WAAOe,IAAP;AACD,GALsB,EAKpB,CAACA,IAAD,EAAOF,OAAP,EAAgBC,KAAhB,EAAuBH,SAAvB,EAAkCD,gBAAlC,CALoB,CAAvB;AAOAX,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,IAAI,IAAIH,YAAY,CAAC,IAAD,CAApB;AACD,GAFQ,EAEN,CAACF,gBAAD,CAFM,CAAT;AAIA,SAAQ;AACNM,IAAAA,OADM;AAENH,IAAAA,OAAO,EAAE,CAACF;AAFJ,GAAR;AAID,CArBD;;GAAMJ,a;UAI8BL,Q;;;AAmBpC,eAAeK,aAAf","sourcesContent":["import {useEffect, useMemo, useState} from 'react';\nimport useFetch from './useFetch';\n\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nexport type Account = {\n  email: ''\n}\n\nconst useGetAirdrop = (payload: any) => {\n  const campaignId = payload.campaignId;\n  const connectedAccount = payload.connectedAccount;\n  const [fetchDone, setFetchDone] = useState<boolean>(false);\n  const { loading, error, data }  = useFetch<any>(`/user/get-airdrop/${campaignId}/${connectedAccount}`, false, {});\n\n  const airdrop = useMemo(() => {\n    // if (connectedAccount && data && !loading && !error && fetchDone)  {\n    //   return data;\n    // }\n    return data;\n  }, [data, loading, error, fetchDone, connectedAccount]);\n\n  useEffect(() => {\n    data && setFetchDone(true);\n  }, [connectedAccount]);\n\n  return  {\n    airdrop,\n    loading: !fetchDone\n  }\n};\n\nexport default useGetAirdrop;\n"]},"metadata":{},"sourceType":"module"}