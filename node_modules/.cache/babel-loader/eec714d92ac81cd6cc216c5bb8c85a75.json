{"ast":null,"code":"import { ETH_CHAIN_ID } from '../constants/network';\nimport { NETWORK_AVAILABLE } from \"../constants\";\nconst ETHERSCAN_URL = process.env.REACT_APP_ETHERSCAN_BASE_URL || \"\";\nconst BCSSCAN_URL = process.env.REACT_APP_BSCSCAN_BASE_URL || \"\";\nexport const getEtherscanName = ({\n  networkAvailable\n}) => {\n  // console.log('etherscanName', networkAvailable);\n  if (networkAvailable === NETWORK_AVAILABLE.BSC) {\n    return 'Bscscan';\n  } else {\n    return 'Etherscan';\n  }\n};\nexport const getEtherscanTransactionLink = ({\n  appChainID,\n  transactionHash\n}) => {\n  return ETH_CHAIN_ID == appChainID ? `${ETHERSCAN_URL}/tx/${transactionHash}` : `${BCSSCAN_URL}/tx/${transactionHash}`;\n};\nexport const getEtherscanTransactionAddress = ({\n  appChainID,\n  address\n}) => {\n  return ETH_CHAIN_ID == appChainID ? `${ETHERSCAN_URL}/address/${address}` : `${BCSSCAN_URL}/address/${address}`;\n};","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/network.ts"],"names":["ETH_CHAIN_ID","NETWORK_AVAILABLE","ETHERSCAN_URL","process","env","REACT_APP_ETHERSCAN_BASE_URL","BCSSCAN_URL","REACT_APP_BSCSCAN_BASE_URL","getEtherscanName","networkAvailable","BSC","getEtherscanTransactionLink","appChainID","transactionHash","getEtherscanTransactionAddress","address"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,sBAA3B;AACA,SAAQC,iBAAR,QAAgC,cAAhC;AAEA,MAAMC,aAAa,GAAGC,OAAO,CAACC,GAAR,CAAYC,4BAAZ,IAA4C,EAAlE;AACA,MAAMC,WAAW,GAAGH,OAAO,CAACC,GAAR,CAAYG,0BAAZ,IAA0C,EAA9D;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAA6B;AAC3D;AACA,MAAIA,gBAAgB,KAAKR,iBAAiB,CAACS,GAA3C,EAAgD;AAC9C,WAAO,SAAP;AACD,GAFD,MAEO;AACL,WAAO,WAAP;AACD;AACF,CAPM;AASP,OAAO,MAAMC,2BAA2B,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAA0C;AACnF,SAAOb,YAAY,IAAIY,UAAhB,GAA8B,GAAEV,aAAc,OAAMW,eAAgB,EAApE,GAAyE,GAAEP,WAAY,OAAMO,eAAgB,EAApH;AACD,CAFM;AAIP,OAAO,MAAMC,8BAA8B,GAAG,CAAC;AAAEF,EAAAA,UAAF;AAAcG,EAAAA;AAAd,CAAD,KAAkC;AAC9E,SAAOf,YAAY,IAAIY,UAAhB,GAA8B,GAAEV,aAAc,YAAWa,OAAQ,EAAjE,GAAsE,GAAET,WAAY,YAAWS,OAAQ,EAA9G;AACD,CAFM","sourcesContent":["import {ETH_CHAIN_ID} from '../constants/network';\nimport {NETWORK_AVAILABLE} from \"../constants\";\n\nconst ETHERSCAN_URL = process.env.REACT_APP_ETHERSCAN_BASE_URL || \"\";\nconst BCSSCAN_URL = process.env.REACT_APP_BSCSCAN_BASE_URL || \"\";\n\nexport const getEtherscanName = ({networkAvailable}: any) => {\n  // console.log('etherscanName', networkAvailable);\n  if (networkAvailable === NETWORK_AVAILABLE.BSC) {\n    return 'Bscscan';\n  } else {\n    return 'Etherscan';\n  }\n};\n\nexport const getEtherscanTransactionLink = ({ appChainID, transactionHash }: any) => {\n  return ETH_CHAIN_ID == appChainID ? `${ETHERSCAN_URL}/tx/${transactionHash}` : `${BCSSCAN_URL}/tx/${transactionHash}`\n};\n\nexport const getEtherscanTransactionAddress = ({ appChainID, address }: any) => {\n  return ETH_CHAIN_ID == appChainID ? `${ETHERSCAN_URL}/address/${address}` : `${BCSSCAN_URL}/address/${address}`;\n};\n\n\n"]},"metadata":{},"sourceType":"module"}