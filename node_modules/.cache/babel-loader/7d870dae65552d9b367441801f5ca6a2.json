{"ast":null,"code":"import BigNumber from 'bignumber.js'; //@ts-ignore\n\nimport removeTrailingZeros from 'remove-trailing-zeros';\n\nvar commaNumber = require('comma-number');\n\nconst ARROW_LEFT_KEY_CODE = 37;\nconst ARROW_RIGHT_KEY_CODE = 39;\nconst BACKSPACE_KEY_CODE = 8;\nconst DELETE_KEY_CODE = 46;\nexport const DECIMAL_KEY_CODE = 190;\nconst A_KEY_CODE = 65;\nconst V_KEY_CODE = 86;\nconst C_KEY_CODE = 67;\nconst START_NUMBER_KEY_CODE = 48;\nconst END_NUMBER_KEY_CODE = 57;\nexport const INTEGER_NUMBER_KEY_CODE_LIST = [ARROW_LEFT_KEY_CODE, ARROW_RIGHT_KEY_CODE, BACKSPACE_KEY_CODE, DELETE_KEY_CODE];\nexport const FLOAT_NUMBER_KEY_CODE_LIST = [...INTEGER_NUMBER_KEY_CODE_LIST, DECIMAL_KEY_CODE];\nexport const formatToNumber = yourNumber => {\n  if (yourNumber && !isNaN(Number(yourNumber))) {\n    const yourNumberBig = new BigNumber(yourNumber).toString();\n\n    if (yourNumberBig.length !== yourNumber.length) {\n      return yourNumberBig;\n    }\n\n    return yourNumber;\n  }\n\n  return yourNumber;\n};\nexport const getShortNumberBuyDecimals = (balance, decimals = 8) => {\n  const balanceNumber = new BigNumber(balance).toString();\n\n  if (balanceNumber.includes('.')) {\n    const balanceSplit = balance.toString().split('.');\n    const decimalsString = balanceSplit.pop();\n\n    if (decimalsString.length > decimals) {\n      return new BigNumber(balance).toFormat(decimals);\n    }\n\n    return new BigNumber(balance).toFormat();\n    ;\n  }\n\n  return new BigNumber(balance).toFormat();\n  ;\n};\nexport const checkNumberByASCIIC = (event, isNotFloatNumber = false) => {\n  const keyCode = event.keyCode || event.which;\n  const keyCodeList = isNotFloatNumber ? INTEGER_NUMBER_KEY_CODE_LIST : FLOAT_NUMBER_KEY_CODE_LIST;\n\n  if (keyCodeList.includes(keyCode)) {\n    return true;\n  } // Allow: Ctrl+A,Ctrl+C,Ctrl+V, Command+A\n\n\n  if ((keyCode === A_KEY_CODE || keyCode === V_KEY_CODE || keyCode === C_KEY_CODE) && (event.ctrlKey === true || event.metaKey === true)) {\n    return true;\n  }\n\n  if (event.shiftKey) {\n    return false;\n  }\n\n  if (keyCode < START_NUMBER_KEY_CODE || keyCode > END_NUMBER_KEY_CODE) {\n    return false;\n  }\n\n  return true;\n};\nexport const isNotValidASCIINumber = (keyCode, decimalRequired = false) => {\n  const abnormalKeys = [ARROW_LEFT_KEY_CODE, ARROW_RIGHT_KEY_CODE, A_KEY_CODE, C_KEY_CODE, V_KEY_CODE];\n  decimalRequired && abnormalKeys.push(DECIMAL_KEY_CODE);\n\n  if (abnormalKeys.indexOf(keyCode) >= 0) {\n    return false;\n  }\n\n  if (keyCode === 229) {\n    return true;\n  }\n\n  return keyCode > 31 && (keyCode < 48 || keyCode > 57) && (keyCode < 96 || keyCode > 105);\n};\nexport const isPreventASCIICharacters = key => {\n  const abnormalKeys = ['arrowleft', 'arrowright', 'control', 'a', 'c', 'v'];\n  return abnormalKeys.indexOf(key.toLowerCase()) >= 0;\n};\nexport const replaceSpecialCharactersCopy = str => {\n  return str.replaceAll(/[.,\\s\\D]*/g, '');\n};\nexport const trimLeadingZeros = input => {\n  return input.replace(/^0+/, '');\n};\nexport const trimEndingZeros = input => {\n  return input.replace(/0+$/, '');\n};\nexport const trimLeadingZerosWithDecimal = input => {\n  if (input.includes('.')) {\n    let trimEndingZerosString = '';\n\n    if (input.startsWith('0.')) {\n      trimEndingZerosString = trimEndingZeros(input);\n    } else if (input.match(/^0{2,}\\./)) {\n      trimEndingZerosString = `0${trimEndingZeros(trimLeadingZeros(input))}`;\n    } else {\n      trimEndingZerosString = trimEndingZeros(trimLeadingZeros(input));\n    }\n\n    if (trimEndingZerosString.length > 0 && trimEndingZerosString.endsWith('.')) {\n      return trimEndingZerosString.split('').slice(0, -1).join('');\n    }\n\n    return trimEndingZerosString;\n  }\n\n  return trimLeadingZeros(input);\n};\nexport const getDigitsAfterDecimals = input => {\n  let totalDigits = 0;\n\n  if (input.includes('.')) {\n    const splittedDecimals = input.slice(input.indexOf('.') + 1, input.length);\n    totalDigits = splittedDecimals.length;\n  }\n\n  return totalDigits;\n};\n\nfunction format(num) {\n  const splittedStrs = num.split('.');\n  return splittedStrs[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + \".\" + splittedStrs[1];\n}\n\nexport function numberWithCommas(x = \"\", decimals = 6) {\n  x = typeof x === 'string' ? x : x.toFixed();\n  return removeTrailingZeros(commaNumber(new BigNumber(x).toFixed(decimals), \",\", \".\")); // }\n  // return format(x);\n}\nexport const nFormatter = (number, digits = 0) => {\n  const SI = [{\n    value: 1,\n    symbol: \"\"\n  }, {\n    value: 1E3,\n    symbol: \"k\"\n  }, {\n    value: 1E6,\n    symbol: \"M\"\n  }, {\n    value: 1E9,\n    symbol: \"G\"\n  }, {\n    value: 1E12,\n    symbol: \"T\"\n  }, {\n    value: 1E15,\n    symbol: \"P\"\n  }, {\n    value: 1E18,\n    symbol: \"E\"\n  }];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  const num = parseFloat(number);\n  let i;\n\n  for (i = SI.length - 1; i > 0; i--) {\n    if (num >= SI[i].value) {\n      break;\n    }\n  }\n\n  return (num / SI[i].value).toFixed(digits).replace(rx, \"$1\") + SI[i].symbol;\n};","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/formatNumber.ts"],"names":["BigNumber","removeTrailingZeros","commaNumber","require","ARROW_LEFT_KEY_CODE","ARROW_RIGHT_KEY_CODE","BACKSPACE_KEY_CODE","DELETE_KEY_CODE","DECIMAL_KEY_CODE","A_KEY_CODE","V_KEY_CODE","C_KEY_CODE","START_NUMBER_KEY_CODE","END_NUMBER_KEY_CODE","INTEGER_NUMBER_KEY_CODE_LIST","FLOAT_NUMBER_KEY_CODE_LIST","formatToNumber","yourNumber","isNaN","Number","yourNumberBig","toString","length","getShortNumberBuyDecimals","balance","decimals","balanceNumber","includes","balanceSplit","split","decimalsString","pop","toFormat","checkNumberByASCIIC","event","isNotFloatNumber","keyCode","which","keyCodeList","ctrlKey","metaKey","shiftKey","isNotValidASCIINumber","decimalRequired","abnormalKeys","push","indexOf","isPreventASCIICharacters","key","toLowerCase","replaceSpecialCharactersCopy","str","replaceAll","trimLeadingZeros","input","replace","trimEndingZeros","trimLeadingZerosWithDecimal","trimEndingZerosString","startsWith","match","endsWith","slice","join","getDigitsAfterDecimals","totalDigits","splittedDecimals","format","num","splittedStrs","numberWithCommas","x","toFixed","nFormatter","number","digits","SI","value","symbol","rx","parseFloat","i"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\n//@ts-ignore\nimport removeTrailingZeros from 'remove-trailing-zeros'\nvar commaNumber = require('comma-number');\n\nconst ARROW_LEFT_KEY_CODE = 37;\nconst ARROW_RIGHT_KEY_CODE = 39;\nconst BACKSPACE_KEY_CODE = 8;\nconst DELETE_KEY_CODE = 46;\nexport const DECIMAL_KEY_CODE = 190;\n\nconst A_KEY_CODE = 65;\nconst V_KEY_CODE = 86;\nconst C_KEY_CODE = 67;\n\nconst START_NUMBER_KEY_CODE = 48;\nconst END_NUMBER_KEY_CODE = 57;\n\nexport const INTEGER_NUMBER_KEY_CODE_LIST = [ARROW_LEFT_KEY_CODE, ARROW_RIGHT_KEY_CODE, BACKSPACE_KEY_CODE, DELETE_KEY_CODE];\nexport const FLOAT_NUMBER_KEY_CODE_LIST = [...INTEGER_NUMBER_KEY_CODE_LIST, DECIMAL_KEY_CODE];\n\nexport const formatToNumber = (yourNumber: any) => {\n  if (yourNumber && !isNaN(Number(yourNumber))) {\n    const yourNumberBig = new BigNumber(yourNumber).toString();\n    if (yourNumberBig.length !== yourNumber.length) {\n      return yourNumberBig;\n    }\n    return yourNumber;\n  }\n  return yourNumber;\n};\n\nexport const getShortNumberBuyDecimals = (balance: any, decimals: number = 8) => {\n  const balanceNumber = new BigNumber(balance).toString();\n  if (balanceNumber.includes('.')) {\n    const balanceSplit = balance.toString().split('.');\n    const decimalsString = balanceSplit.pop();\n    if (decimalsString.length > decimals) {\n      return new BigNumber(balance).toFormat(decimals);\n    }\n    return new BigNumber(balance).toFormat();;\n  }\n\n  return new BigNumber(balance).toFormat();;\n};\n\nexport const checkNumberByASCIIC = (event: any, isNotFloatNumber: boolean = false) => {\n  const keyCode = event.keyCode || event.which;\n\n  const keyCodeList = isNotFloatNumber ? INTEGER_NUMBER_KEY_CODE_LIST : FLOAT_NUMBER_KEY_CODE_LIST;\n  if (keyCodeList.includes(keyCode)) {\n    return true;\n  }\n\n  // Allow: Ctrl+A,Ctrl+C,Ctrl+V, Command+A\n  if ((keyCode === A_KEY_CODE || keyCode === V_KEY_CODE || keyCode === C_KEY_CODE) && (event.ctrlKey === true || event.metaKey === true)) {\n    return true;\n  }\n\n  if (event.shiftKey) {\n    return false;\n  }\n\n  if (keyCode < START_NUMBER_KEY_CODE || keyCode > END_NUMBER_KEY_CODE) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isNotValidASCIINumber = (keyCode: number, decimalRequired: boolean = false) => {\n  const abnormalKeys = [ARROW_LEFT_KEY_CODE, ARROW_RIGHT_KEY_CODE, A_KEY_CODE, C_KEY_CODE, V_KEY_CODE];\n\n  decimalRequired && abnormalKeys.push(DECIMAL_KEY_CODE);\n\n  if (abnormalKeys.indexOf(keyCode) >= 0) {\n    return false;\n  }\n\n  if (keyCode === 229) {\n    return true;\n  }\n\n  return keyCode > 31 && (keyCode < 48 || keyCode > 57) && (keyCode < 96 || keyCode > 105);\n};\n\nexport const isPreventASCIICharacters = (key: string) => {\n  const abnormalKeys = ['arrowleft', 'arrowright', 'control', 'a', 'c', 'v'];\n  return abnormalKeys.indexOf(key.toLowerCase()) >= 0;\n};\n\nexport const replaceSpecialCharactersCopy = (str: string) => {\n  return str.replaceAll(/[.,\\s\\D]*/g, '');\n}\n\nexport const trimLeadingZeros = (input: string): string => {\n  return input.replace(/^0+/, '');\n}\n\nexport const trimEndingZeros = (input: string): string => {\n  return input.replace(/0+$/, '');\n}\n\nexport const trimLeadingZerosWithDecimal = (input: string): string => {\n\n  if (input.includes('.')) {\n    let trimEndingZerosString: string = '';\n    \n    if (input.startsWith('0.')) {\n      trimEndingZerosString = trimEndingZeros(input);\n    } else if (input.match(/^0{2,}\\./)) {\n      trimEndingZerosString = `0${trimEndingZeros(trimLeadingZeros(input))}`\n    } else {\n      trimEndingZerosString = trimEndingZeros(trimLeadingZeros(input))\n    }\n\n    if (trimEndingZerosString.length > 0 && trimEndingZerosString.endsWith('.')) {\n      return trimEndingZerosString.split('').slice(0, -1).join('');\n    }\n\n    return trimEndingZerosString;\n  }\n\n  return trimLeadingZeros(input);\n};\n\nexport const getDigitsAfterDecimals = (input: string): number => {                                                   \n  let totalDigits = 0;                                                                                                \n                                                                                                                                                                                                                                        \n  if (input.includes('.')) {                                                                                          \n    const splittedDecimals = input.slice(input.indexOf('.') + 1, input.length);                                       \n                                                                                                                      \n    totalDigits = splittedDecimals.length;     \n  }                                                                       \n                                                                                                                      \n  return totalDigits;     \n}\n\nfunction format(num: string){\n  const splittedStrs = num.split('.');\n  return splittedStrs[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + \".\" + splittedStrs[1];\n}\n\nexport function numberWithCommas(x: string = \"\", decimals: number = 6) {\n  x = typeof x === 'string' ? x: (x as number).toFixed();\n  return removeTrailingZeros(commaNumber(new BigNumber(x).toFixed(decimals), \",\", \".\"));\n  // }\n\n  // return format(x);\n}\nexport const nFormatter = (number: string, digits: any = 0) => {\n  const SI = [\n    { value: 1, symbol: \"\" },\n    { value: 1E3, symbol: \"k\" },\n    { value: 1E6, symbol: \"M\" },\n    { value: 1E9, symbol: \"G\" },\n    { value: 1E12, symbol: \"T\" },\n    { value: 1E15, symbol: \"P\" },\n    { value: 1E18, symbol: \"E\" }\n  ];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  const num = parseFloat(number)\n  let i;\n  for (i = SI.length - 1; i > 0; i--) {\n    if (num >= SI[i].value) {\n      break;\n    }\n  }\n  return (num / SI[i].value).toFixed(digits).replace(rx, \"$1\") + SI[i].symbol;\n}\n"]},"metadata":{},"sourceType":"module"}