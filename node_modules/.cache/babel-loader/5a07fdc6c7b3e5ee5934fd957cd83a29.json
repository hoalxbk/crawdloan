{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { useWeb3React } from '@web3-react/core';\n\nconst useAuth = () => {\n  _s();\n\n  const {\n    active,\n    account,\n    chainId\n  } = useWeb3React();\n  const [isAuth, setIsAuth] = useState(false);\n  const walletsInfo = useTypedSelector(state => state.wallet).entities;\n  const connectorName = useTypedSelector(state => state.connector).data;\n  const {\n    appChainID\n  } = useTypedSelector(state => state.appNetwork).data;\n  const activeWallet = connectorName ? walletsInfo[connectorName] : \"\";\n  useEffect(() => {\n    if (active && activeWallet) {\n      setIsAuth(true);\n    } else {\n      setIsAuth(false);\n    }\n  }, [active, activeWallet]);\n  return {\n    isAuth,\n    connectedAccount: account,\n    wrongChain: appChainID != chainId\n  };\n};\n\n_s(useAuth, \"96QS4peVqdVTRZLSdMaoifn581c=\", false, function () {\n  return [useWeb3React, useTypedSelector, useTypedSelector, useTypedSelector];\n});\n\nexport default useAuth;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/useAuth.ts"],"names":["useState","useEffect","useTypedSelector","useWeb3React","useAuth","active","account","chainId","isAuth","setIsAuth","walletsInfo","state","wallet","entities","connectorName","connector","data","appChainID","appNetwork","activeWallet","connectedAccount","wrongChain"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,YAAT,QAA6B,kBAA7B;;AAQA,MAAMC,OAAO,GAAG,MAAkB;AAAA;;AAChC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA;AAAnB,MAAgCJ,YAAY,EAAlD;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAMU,WAAW,GAAGR,gBAAgB,CAACS,KAAK,IAAIA,KAAK,CAACC,MAAhB,CAAhB,CAAwCC,QAA5D;AACA,QAAMC,aAAa,GAAGZ,gBAAgB,CAACS,KAAK,IAAIA,KAAK,CAACI,SAAhB,CAAhB,CAA2CC,IAAjE;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAiBf,gBAAgB,CAAES,KAAD,IAAgBA,KAAK,CAACO,UAAvB,CAAhB,CAAmDF,IAA1E;AAEA,QAAMG,YAAY,GAAGL,aAAa,GAAGJ,WAAW,CAACI,aAAD,CAAd,GAA+B,EAAjE;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,MAAM,IAAIc,YAAd,EAA4B;AAC1BV,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAFD,MAEO;AACLA,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AACF,GANQ,EAMN,CAACJ,MAAD,EAASc,YAAT,CANM,CAAT;AAQA,SAAO;AAAEX,IAAAA,MAAF;AAAUY,IAAAA,gBAAgB,EAAEd,OAA5B;AAAqCe,IAAAA,UAAU,EAAEJ,UAAU,IAAIV;AAA/D,GAAP;AACD,CAnBD;;GAAMH,O;UACkCD,Y,EAGlBD,gB,EACEA,gB,EACCA,gB;;;AAezB,eAAeE,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { useWeb3React } from '@web3-react/core';\n\ntype ReturnType = {\n  isAuth: boolean,\n  connectedAccount: string | null | undefined;\n  wrongChain: boolean\n}\n\nconst useAuth = (): ReturnType => {\n  const { active, account, chainId }  = useWeb3React();\n  const [isAuth, setIsAuth] = useState(false);\n\n  const walletsInfo = useTypedSelector(state => state.wallet).entities;\n  const connectorName = useTypedSelector(state => state.connector).data;\n  const { appChainID } = useTypedSelector((state: any) => state.appNetwork).data;\n\n  const activeWallet = connectorName ? walletsInfo[connectorName]: \"\";\n  \n  useEffect(() => {\n    if (active && activeWallet) {\n      setIsAuth(true);\n    } else { \n      setIsAuth(false);\n    }\n  }, [active, activeWallet]);\n\n  return { isAuth, connectedAccount: account, wrongChain: appChainID != chainId };\n}\n\nexport default useAuth;\n"]},"metadata":{},"sourceType":"module"}