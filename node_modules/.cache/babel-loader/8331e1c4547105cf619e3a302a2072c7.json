{"ast":null,"code":"import _ from \"lodash\";\nimport moment from \"moment\";\nimport BigNumber from 'bignumber.js';\nimport { BUY_TYPE, POOL_IS_PRIVATE } from \"../constants\";\nimport { convertFromWei, getPoolContract } from \"../services/web3\";\nexport const checkIsFinishTime = campaignDetail => {\n  console.log('campaignDetail', campaignDetail);\n\n  const closeTime = _.get(campaignDetail, 'closeTime', '');\n\n  let isFinish = false;\n\n  if (closeTime) {\n    const closeTimeDate = moment.unix(parseInt(closeTime)).toDate();\n    const currentDate = new Date();\n\n    if (currentDate >= closeTimeDate) {\n      isFinish = true;\n    }\n  }\n\n  return isFinish;\n};\nexport const getTokenRemainingCanBuy = campaignDetail => {\n  if (!campaignDetail) return '0';\n\n  const tokenLeft = _.get(campaignDetail, 'tokenLeft', 0);\n\n  const tokenClaimed = _.get(campaignDetail, 'tokenClaimed', 0);\n\n  let remainTokenAvailable = new BigNumber(tokenLeft).plus(tokenClaimed);\n  return remainTokenAvailable.toFixed();\n};\nexport const checkIsBetweenCloseTimeAndReleaseTime = campaignDetail => {\n  const closeTime = _.get(campaignDetail, 'closeTime', '');\n\n  const releaseTime = _.get(campaignDetail, 'releaseTime', '');\n\n  let isBetween = false;\n\n  if (closeTime && releaseTime) {\n    const closeTimeDate = moment.unix(parseInt(closeTime)).toDate();\n    const releaseTimeDate = moment.unix(parseInt(releaseTime)).toDate();\n    const currentDate = new Date();\n\n    if (closeTimeDate <= currentDate && currentDate < releaseTimeDate) {\n      isBetween = true;\n    }\n  }\n\n  return isBetween;\n};\nexport const getAccessPoolText = pool => {\n  if (!pool) return '';\n  const isPrivate = (pool === null || pool === void 0 ? void 0 : pool.is_private) || (pool === null || pool === void 0 ? void 0 : pool.isPrivate);\n  const buyType = (pool === null || pool === void 0 ? void 0 : pool.buy_type) || (pool === null || pool === void 0 ? void 0 : pool.buyType) || (pool === null || pool === void 0 ? void 0 : pool.method);\n\n  if (isPrivate == POOL_IS_PRIVATE.PRIVATE) {\n    return 'Private';\n  }\n\n  return (buyType + '').toLowerCase() == BUY_TYPE.WHITELIST_LOTTERY ? \"Whitelist/Lottery\" : BUY_TYPE.FCFS.toUpperCase();\n};\nexport const calculateTokenSoldWhenFinish = totalSoldCoin => {\n  const result = new BigNumber(totalSoldCoin).minus(new BigNumber(totalSoldCoin).div(10000)).toFixed();\n  return result;\n};\nexport const getProgressWithPools = pool => {\n  let tokenSold = pool.tokenSold || pool.token_sold || '0';\n  let totalSoldCoin = pool.totalSoldCoin || pool.total_sold_coin || '0';\n  let progress = '0';\n  const isFinish = checkPoolIsFinish(pool);\n\n  if (isFinish) {\n    return {\n      progress: '100',\n      tokenSold: calculateTokenSoldWhenFinish(totalSoldCoin),\n      totalSoldCoin: totalSoldCoin\n    };\n  }\n\n  if (pool.id == 22) {\n    return {\n      progress: '100',\n      tokenSold: '500000',\n      totalSoldCoin: '500000'\n    };\n  } // Normal Case\n\n\n  if (new BigNumber(tokenSold).gt(totalSoldCoin)) {\n    // If tokenSold > totalSoldCoin ==> tokenSold = totalSoldCoin\n    tokenSold = totalSoldCoin;\n  }\n\n  progress = new BigNumber(tokenSold).div(totalSoldCoin).multipliedBy(100).toFixed();\n\n  if (new BigNumber(progress).lte(0)) {\n    progress = '0';\n  }\n\n  if (new BigNumber(progress).gt(99)) {\n    progress = '100';\n  }\n\n  return {\n    progress,\n    tokenSold,\n    totalSoldCoin\n  };\n};\nexport const checkPoolIsFinish = pool => {\n  const currentTime = moment().unix();\n  return pool.finish_time && currentTime > pool.finish_time;\n};\nexport const getTokenSold = async pool => {\n  let result = '0';\n\n  try {\n    const networkAvailable = pool.network_available || pool.networkAvailable;\n    const poolHash = pool.campaign_hash || pool.campaignHash;\n\n    if (poolHash == 'Token contract not available yet.') {\n      return '0';\n    }\n\n    const contract = getPoolContract({\n      networkAvailable,\n      poolHash\n    });\n\n    if (contract) {\n      result = await contract.methods.tokenSold().call();\n      result = convertFromWei(result.toString());\n    }\n  } catch (error) {\n    console.log(error);\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/utils/campaign.ts"],"names":["_","moment","BigNumber","BUY_TYPE","POOL_IS_PRIVATE","convertFromWei","getPoolContract","checkIsFinishTime","campaignDetail","console","log","closeTime","get","isFinish","closeTimeDate","unix","parseInt","toDate","currentDate","Date","getTokenRemainingCanBuy","tokenLeft","tokenClaimed","remainTokenAvailable","plus","toFixed","checkIsBetweenCloseTimeAndReleaseTime","releaseTime","isBetween","releaseTimeDate","getAccessPoolText","pool","isPrivate","is_private","buyType","buy_type","method","PRIVATE","toLowerCase","WHITELIST_LOTTERY","FCFS","toUpperCase","calculateTokenSoldWhenFinish","totalSoldCoin","result","minus","div","getProgressWithPools","tokenSold","token_sold","total_sold_coin","progress","checkPoolIsFinish","id","gt","multipliedBy","lte","currentTime","finish_time","getTokenSold","networkAvailable","network_available","poolHash","campaign_hash","campaignHash","contract","methods","call","toString","error"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport moment from \"moment\";\nimport BigNumber from 'bignumber.js';\nimport {BUY_TYPE, NFT_PLUS_AMOUNT_PRODUCTION, POOL_IS_PRIVATE} from \"../constants\";\nimport {convertFromWei, getPoolContract} from \"../services/web3\";\n\nexport const checkIsFinishTime = (campaignDetail: any): boolean => {\n\n  console.log('campaignDetail', campaignDetail);\n\n  const closeTime = _.get(campaignDetail, 'closeTime', '');\n  let isFinish = false;\n  if (closeTime) {\n    const closeTimeDate = moment.unix(parseInt(closeTime)).toDate();\n    const currentDate = new Date();\n    if (currentDate >= closeTimeDate) {\n      isFinish = true;\n    }\n  }\n\n  return isFinish;\n};\n\nexport const getTokenRemainingCanBuy = (campaignDetail: any): string => {\n  if (!campaignDetail) return '0';\n  const tokenLeft = _.get(campaignDetail, 'tokenLeft', 0);\n  const tokenClaimed = _.get(campaignDetail, 'tokenClaimed', 0);\n  let remainTokenAvailable = new BigNumber(tokenLeft).plus(tokenClaimed);\n\n  return remainTokenAvailable.toFixed();\n};\n\nexport const checkIsBetweenCloseTimeAndReleaseTime = (campaignDetail: any): boolean => {\n  const closeTime = _.get(campaignDetail, 'closeTime', '');\n  const releaseTime = _.get(campaignDetail, 'releaseTime', '');\n\n  let isBetween = false;\n  if (closeTime && releaseTime) {\n    const closeTimeDate = moment.unix(parseInt(closeTime)).toDate();\n    const releaseTimeDate = moment.unix(parseInt(releaseTime)).toDate();\n    const currentDate = new Date();\n    if (closeTimeDate <= currentDate && currentDate < releaseTimeDate) {\n      isBetween = true;\n    }\n  }\n\n  return isBetween;\n};\n\nexport const getAccessPoolText = (pool: any) => {\n  if (!pool) return '';\n  const isPrivate = pool?.is_private || pool?.isPrivate;\n  const buyType = pool?.buy_type || pool?.buyType || pool?.method;\n  if (isPrivate == POOL_IS_PRIVATE.PRIVATE) {\n    return 'Private';\n  }\n  return ((buyType + '').toLowerCase() == BUY_TYPE.WHITELIST_LOTTERY ? \"Whitelist/Lottery\" : BUY_TYPE.FCFS.toUpperCase());\n};\n\nexport const calculateTokenSoldWhenFinish = (totalSoldCoin: string | number) => {\n  const result = new BigNumber(totalSoldCoin).minus(\n    new BigNumber(totalSoldCoin).div(10000)\n  ).toFixed();\n  return result;\n};\n\nexport const getProgressWithPools = (pool: any) => {\n  let tokenSold = pool.tokenSold || pool.token_sold || '0';\n  let totalSoldCoin = pool.totalSoldCoin || pool.total_sold_coin || '0';\n  let progress = '0';\n\n  const isFinish = checkPoolIsFinish(pool);\n  if (isFinish) {\n    return {\n      progress: '100',\n      tokenSold: calculateTokenSoldWhenFinish(totalSoldCoin),\n      totalSoldCoin: totalSoldCoin,\n    }\n  }\n\n  if (pool.id == 22) {\n    return {\n      progress: '100',\n      tokenSold: '500000',\n      totalSoldCoin: '500000',\n    };\n  }\n\n  // Normal Case\n  if (new BigNumber(tokenSold).gt(totalSoldCoin)) { // If tokenSold > totalSoldCoin ==> tokenSold = totalSoldCoin\n    tokenSold = totalSoldCoin;\n  }\n  progress = new BigNumber(tokenSold).div(totalSoldCoin).multipliedBy(100).toFixed();\n\n  if (new BigNumber(progress).lte(0)) {\n    progress = '0';\n  }\n  if (new BigNumber(progress).gt(99)) {\n    progress = '100';\n  }\n\n  return {\n    progress,\n    tokenSold,\n    totalSoldCoin,\n  }\n};\n\nexport const checkPoolIsFinish = (pool: any) => {\n  const currentTime = moment().unix();\n  return (pool.finish_time && currentTime > pool.finish_time);\n};\n\nexport const getTokenSold = async (pool: any) => {\n  let result = '0';\n  try {\n    const networkAvailable = pool.network_available || pool.networkAvailable;\n    const poolHash = pool.campaign_hash || pool.campaignHash;\n    if (poolHash == 'Token contract not available yet.') {\n      return '0';\n    }\n\n    const contract = getPoolContract({ networkAvailable, poolHash });\n    if (contract) {\n      result = await contract.methods.tokenSold().call();\n      result = convertFromWei(result.toString());\n    }\n  } catch (error) {\n    console.log(error);\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}