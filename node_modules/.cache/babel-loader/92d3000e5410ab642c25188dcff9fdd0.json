{"ast":null,"code":"var _jsxFileName = \"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Login/InvestorLogin.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useWeb3React } from '@web3-react/core';\nimport { useDispatch } from 'react-redux';\nimport { TextField } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport { HashLoader } from 'react-spinners';\nimport { useForm } from 'react-hook-form';\nimport { AppContext } from '../../AppContext';\nimport { userActions } from '../../store/constants/user';\nimport { alertFailure } from '../../store/actions/alert';\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\nimport { disconnectWalletLayer2 } from '../../store/actions/wallet';\nimport { login, register as userRegister } from '../../store/actions/user';\nimport useStyles from './style';\nimport Button from '../../components/Base/Button';\nimport { userAlreadyExists } from '../../utils/user';\nimport InvestorLayout from \"../InvestorLayout/InvestorLayout\";\nimport TextTitle from \"../InvestorLayout/TextTitle\";\nimport useCommonStyle from '../../styles/CommonStyle';\nimport Logo from '../InvestorLayout/Logo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EMAIL_REGEX = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst InvestorLogin = props => {\n  _s();\n\n  const classes = useStyles();\n  const common = useCommonStyle();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    handleConnectorDisconnect\n  } = useContext(AppContext);\n  const [loadingUserExists, setLoadingUserExists] = useState(false);\n  const [userExists, setUserExists] = useState(false);\n  const {\n    loading: investorLoginLoading,\n    error\n  } = useTypedSelector(state => state.investor);\n  const {\n    loading: investorRegisterLoading\n  } = useTypedSelector(state => state.investorRegister);\n  const {\n    account: connectedAccount,\n    library\n  } = useWeb3React();\n  const {\n    register,\n    errors,\n    handleSubmit\n  } = useForm({\n    mode: 'onChange'\n  });\n\n  const renderErrorRequired = (errors, prop) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  };\n\n  useEffect(() => {\n    dispatch(alertFailure(error));\n    return () => {\n      dispatch({\n        type: userActions.INVESTOR_PURGE\n      });\n    };\n  }, [error]);\n  useEffect(() => {\n    const checkUserExists = async () => {\n      if (connectedAccount) {\n        setLoadingUserExists(true);\n        const userExists = await userAlreadyExists(connectedAccount, true);\n        setLoadingUserExists(false);\n        setUserExists(userExists);\n      }\n    };\n\n    connectedAccount ? checkUserExists() : history.push('/');\n    return () => {\n      const accessToken = localStorage.getItem(\"investor_access_token\");\n\n      if (!accessToken) {\n        dispatch(disconnectWalletLayer2());\n      }\n\n      if (!connectedAccount) {\n        handleConnectorDisconnect && handleConnectorDisconnect();\n      }\n    };\n  }, [connectedAccount, handleConnectorDisconnect]);\n\n  const handleFormSubmit = data => {\n    if (userExists) {\n      connectedAccount && library && dispatch(login(connectedAccount, library));\n    } else {\n      connectedAccount && library && dispatch(userRegister({\n        email: data.email,\n        address: connectedAccount,\n        library\n      }));\n    }\n  };\n\n  const render = () => {\n    if (loadingUserExists) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login__user-loading\",\n        style: {\n          height: 660,\n          maxHeight: 660,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flexDirection: 'column'\n        },\n        children: [/*#__PURE__*/_jsxDEV(HashLoader, {\n          color: '#3232DC'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"login__user-loading-text\",\n          style: {\n            textAlign: 'center',\n            color: '#999999'\n          },\n          children: \"Loading Ethereum Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextTitle, {\n          children: \"Wallet Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(handleFormSubmit),\n          className: classes.loginForm,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            id: \"standard-secondary\",\n            value: connectedAccount,\n            label: \"Current Ethereum Address\",\n            color: \"secondary\",\n            className: \"login__form-field\",\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), !userExists && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Email *\",\n              name: \"email\",\n              inputProps: {\n                maxLength: 100\n              },\n              inputRef: register({\n                required: true,\n                validate: {\n                  isValidEmail: value => {\n                    if (!EMAIL_REGEX.test(value)) {\n                      return 'Invalid email address';\n                    }\n\n                    return true;\n                  }\n                }\n              }),\n              color: \"secondary\",\n              className: \"login__form-field\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"login__form-error-message\",\n              children: errors.email && errors.email.type !== 'required' ? errors.email.message : renderErrorRequired(errors, 'email')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"login__form-desc login__form-privacy \" + common.nnn1424h,\n            children: [\"By clicking sign in you indicate that you have read and agree to our \", /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"Terms of Service\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 84\n            }, this), \" and \", /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"Privacy Policy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 112\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            label: userExists ? 'Sign in' : 'Sign up',\n            buttonType: \"primary\",\n            className: 'login__form-cta',\n            loading: investorLoginLoading || investorRegisterLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(InvestorLayout, {\n    children: render()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InvestorLogin, \"dq3zOU9AG+tng3TQM9oEXSijpr4=\", false, function () {\n  return [useStyles, useCommonStyle, useDispatch, useHistory, useTypedSelector, useTypedSelector, useWeb3React, useForm];\n});\n\n_c = InvestorLogin;\nexport default _c2 = withRouter(InvestorLogin);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InvestorLogin\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/Login/InvestorLogin.tsx"],"names":["React","useEffect","useState","useContext","useHistory","useWeb3React","useDispatch","TextField","withRouter","HashLoader","useForm","AppContext","userActions","alertFailure","useTypedSelector","disconnectWalletLayer2","login","register","userRegister","useStyles","Button","userAlreadyExists","InvestorLayout","TextTitle","useCommonStyle","Logo","EMAIL_REGEX","InvestorLogin","props","classes","common","dispatch","history","handleConnectorDisconnect","loadingUserExists","setLoadingUserExists","userExists","setUserExists","loading","investorLoginLoading","error","state","investor","investorRegisterLoading","investorRegister","account","connectedAccount","library","errors","handleSubmit","mode","renderErrorRequired","prop","type","INVESTOR_PURGE","checkUserExists","push","accessToken","localStorage","getItem","handleFormSubmit","data","email","address","render","height","maxHeight","display","alignItems","justifyContent","flexDirection","textAlign","color","loginForm","maxLength","required","validate","isValidEmail","value","test","message","nnn1424h"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useWeb3React } from '@web3-react/core';\nimport {useDispatch} from 'react-redux';\nimport {TextField} from '@material-ui/core';\nimport {withRouter} from 'react-router-dom';\nimport { HashLoader } from 'react-spinners';\nimport {useForm} from 'react-hook-form';\n\nimport { AppContext } from '../../AppContext';\nimport { userActions } from '../../store/constants/user';\nimport { alertFailure } from '../../store/actions/alert';\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\nimport { disconnectWalletLayer2 } from '../../store/actions/wallet';\nimport { login, register as userRegister } from '../../store/actions/user';\nimport useStyles from './style';\nimport Button from '../../components/Base/Button';\nimport {userAlreadyExists} from '../../utils/user';\nimport InvestorLayout from \"../InvestorLayout/InvestorLayout\";\nimport TextTitle from \"../InvestorLayout/TextTitle\";\nimport useCommonStyle from '../../styles/CommonStyle'\nimport Logo from '../InvestorLayout/Logo'\n\nconst EMAIL_REGEX = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst InvestorLogin: React.FC<any> = (props: any) => {\n  const classes = useStyles();\n  const common = useCommonStyle();\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const { handleConnectorDisconnect } = useContext(AppContext);\n  const [loadingUserExists, setLoadingUserExists] = useState(false);\n  const [userExists, setUserExists] = useState(false);\n  const { loading: investorLoginLoading, error } = useTypedSelector(state => state.investor);\n  const { loading: investorRegisterLoading } = useTypedSelector(state => state.investorRegister);\n  const { account:  connectedAccount, library } = useWeb3React();\n  const { register, errors, handleSubmit } = useForm({\n    mode: 'onChange'\n  });\n\n  const renderErrorRequired = (errors: any, prop: string) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  }\n\n  useEffect(() => {\n    dispatch(alertFailure(error));\n\n    return () => {\n      dispatch({ type: userActions.INVESTOR_PURGE });\n    }\n  }, [error]);\n\n  useEffect(() => {\n    const checkUserExists = async () => {\n      if (connectedAccount) {\n        setLoadingUserExists(true);\n\n        const userExists = await userAlreadyExists(connectedAccount, true);\n        setLoadingUserExists(false);\n\n        setUserExists(userExists);\n      }     \n    } \n\n    connectedAccount ? checkUserExists(): history.push('/');\n\n    return () => { \n      const accessToken = localStorage.getItem(\"investor_access_token\");\n      if (!accessToken) {\n        dispatch(disconnectWalletLayer2()); \n      }\n\n      if (!connectedAccount) {\n        handleConnectorDisconnect && handleConnectorDisconnect();\n      }\n    }\n  }, [connectedAccount, handleConnectorDisconnect]);\n\n  const handleFormSubmit = (data: any) => {\n    if (userExists) {\n      connectedAccount && library && dispatch(login(connectedAccount, library));\n    } else {\n      connectedAccount && library && dispatch(userRegister({ \n        email: data.email, \n        address: connectedAccount, \n        library \n      }));\n    }\n  }\n\n  const render = () => {\n    if (loadingUserExists) {\n      return (\n        <div className=\"login__user-loading\" style={{ height: 660, maxHeight: 660, display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column'}}>\n          <HashLoader color={'#3232DC'} />\n          <p className=\"login__user-loading-text\" style={{ textAlign: 'center', color: '#999999' }}>Loading Ethereum Wallet</p>\n        </div>\n       );\n    } else {\n      return (\n        <>\n          <Logo/>\n          <TextTitle>\n            Wallet Connected\n          </TextTitle>\n          <form onSubmit={handleSubmit(handleFormSubmit)} className={classes.loginForm}>\n            <TextField id=\"standard-secondary\" value={connectedAccount} label=\"Current Ethereum Address\" color=\"secondary\" className=\"login__form-field\" disabled />\n            {\n              !userExists && (\n                <>\n                  <TextField\n                    label=\"Email *\"\n                    name=\"email\"\n                    inputProps={{ maxLength: 100 }}\n                    inputRef={register({\n                      required: true,\n                      validate: {\n                        isValidEmail: value => {\n                          if (!EMAIL_REGEX.test(value)) {\n                            return 'Invalid email address';\n                          }\n\n                          return true;\n                        }\n                      }\n                    })}\n                    color=\"secondary\"\n                    className=\"login__form-field\"\n                    />\n                    <p className=\"login__form-error-message\">\n                    {\n                      errors.email && errors.email.type !== 'required' ? errors.email.message: renderErrorRequired(errors, 'email')\n                    }\n                  </p>\n                </>\n              )\n            }\n            <p className={\"login__form-desc login__form-privacy \" + common.nnn1424h}>\n              By clicking sign in you indicate that you have read and agree to our <a>Terms of Service</a> and <a>Privacy Policy</a>\n            </p>\n            <Button\n              label={userExists ? 'Sign in': 'Sign up'}\n              buttonType=\"primary\"\n              className={'login__form-cta'}\n              loading={investorLoginLoading || investorRegisterLoading}\n            />\n          </form>\n        </>\n      )\n    }\n  }\n\n  return (\n    <InvestorLayout>\n      {render()}\n    </InvestorLayout>\n  )\n\n};\n\nexport default withRouter(InvestorLogin);\n"]},"metadata":{},"sourceType":"module"}