{"ast":null,"code":"var _jsxFileName = \"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/ClaimToken/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Button from '../Button';\nimport Countdown from '../../../components/Base/Countdown';\nimport TransactionSubmitModal from '../../../components/Base/TransactionSubmitModal';\nimport useStyles from './style';\nimport useUserRemainTokensClaim from '../hooks/useUserRemainTokensClaim';\nimport useTokenClaim from '../hooks/useTokenClaim';\nimport { convertTimeToStringFormat } from '../../../utils/convertDate';\nimport { useDispatch } from \"react-redux\";\nimport { alertFailure } from \"../../../store/actions/alert\";\nimport ClaimInfo from \"./ClaimInfo\";\nimport useDetectClaimConfigApplying from \"../hooks/useDetectClaimConfigApplying\";\nimport BigNumber from \"bignumber.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ClaimToken = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const styles = useStyles();\n  const [openClaimModal, setOpenClaimModal] = useState(false);\n  const [userPurchased, setUserPurchased] = useState(0);\n  const [userClaimInfo, setUserClaimInfo] = useState();\n  const {\n    account: connectedAccount\n  } = useWeb3React();\n  const {\n    releaseTime,\n    poolDetails,\n    tokenDetails,\n    poolAddress,\n    poolId,\n    ableToFetchFromBlockchain,\n    buyTokenSuccess,\n    disableAllButton\n  } = props;\n  const nowTime = new Date();\n  const nowTimeUnix = new Date().getTime();\n  const {\n    claimToken,\n    setClaimTokenLoading,\n    transactionHash,\n    claimTokenSuccess,\n    loading,\n    error\n  } = useTokenClaim(poolAddress, poolId);\n  const {\n    retrieveClaimableTokens\n  } = useUserRemainTokensClaim(tokenDetails, poolAddress, ableToFetchFromBlockchain);\n  const availableClaim = releaseTime ? nowTime >= releaseTime : false;\n  useEffect(() => {\n    const fetchUserPurchased = async () => {\n      if (connectedAccount && poolAddress) {\n        const userClaimInformations = await retrieveClaimableTokens(connectedAccount, poolAddress);\n        console.log('userClaimInformations', userClaimInformations);\n        setUserClaimInfo(userClaimInformations);\n        setUserPurchased((userClaimInformations === null || userClaimInformations === void 0 ? void 0 : userClaimInformations.userPurchasedReturn) || 0);\n      }\n    };\n\n    (ableToFetchFromBlockchain || buyTokenSuccess) && fetchUserPurchased();\n  }, [connectedAccount, poolAddress, ableToFetchFromBlockchain, claimTokenSuccess, buyTokenSuccess]);\n  useEffect(() => {\n    if (error) {\n      setOpenClaimModal(false);\n      setClaimTokenLoading(false);\n    }\n  }, [error]);\n  const userPurchasedValue = (userClaimInfo === null || userClaimInfo === void 0 ? void 0 : userClaimInfo.userPurchased) || 0;\n  const userClaimed = (userClaimInfo === null || userClaimInfo === void 0 ? void 0 : userClaimInfo.userClaimed) || 0;\n  const {\n    currentClaim,\n    currentClaimIndex,\n    nextClaim,\n    nextClaimIndex,\n    maximumTokenClaimUtilNow\n  } = useDetectClaimConfigApplying(poolDetails, userPurchasedValue, userClaimed);\n\n  const validateClaimable = () => {\n    if (new BigNumber(userPurchased).lte(0)) {\n      dispatch(alertFailure('You not enough claimable token!'));\n      return false;\n    }\n\n    if (!availableClaim) {\n      dispatch(alertFailure('You can not claim token at current time!'));\n      return false;\n    }\n\n    if (nextClaim && new BigNumber(maximumTokenClaimUtilNow).lte(0)) {\n      dispatch(alertFailure('You can not claim token at current time!'));\n      return false;\n    }\n\n    if (!nextClaim && new BigNumber(maximumTokenClaimUtilNow).lte(0) // maximumTokenClaimUtilNow <= 0\n    ) {\n        dispatch(alertFailure('You not enough claimable token!'));\n        return false;\n      }\n\n    if (disableAllButton) {\n      dispatch(alertFailure('Please switch to correct network before Claim!'));\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleTokenClaim = async () => {\n    if (!validateClaimable()) {\n      return;\n    }\n\n    try {\n      setOpenClaimModal(true);\n      await claimToken();\n    } catch (err) {\n      setOpenClaimModal(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.poolDetailClaim,\n    children: [releaseTime && releaseTime >= nowTime && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.poolDetailClaimTitle,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: 'Token can claim from'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: releaseTime ? convertTimeToStringFormat(releaseTime || new Date()) : 'TBA'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Countdown, {\n        startDate: releaseTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(ClaimInfo, {\n      poolDetails: poolDetails,\n      tokenDetails: tokenDetails,\n      userClaimInfo: userClaimInfo,\n      releaseTime: releaseTime,\n      currentClaim: currentClaim,\n      currentClaimIndex: currentClaimIndex,\n      nextClaim: nextClaim,\n      nextClaimIndex: nextClaimIndex,\n      maximumTokenClaimUtilNow: maximumTokenClaimUtilNow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: 'Claim',\n      backgroundColor: '#3232DC' // disabled={!availableClaim || userPurchased <= 0 || disableAllButton}\n      ,\n      disabled: disableAllButton || !ableToFetchFromBlockchain // If network is not correct, disable Claim Button\n      ,\n      loading: loading,\n      onClick: handleTokenClaim\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionSubmitModal, {\n      opened: openClaimModal,\n      handleClose: () => {\n        setOpenClaimModal(false);\n        setClaimTokenLoading(false);\n      },\n      transactionHash: transactionHash,\n      networkAvailable: poolDetails === null || poolDetails === void 0 ? void 0 : poolDetails.networkAvailable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ClaimToken, \"w3ot8oi/cnEYtmcsZI8WIRKT5I8=\", false, function () {\n  return [useDispatch, useStyles, useWeb3React, useTokenClaim, useUserRemainTokensClaim, useDetectClaimConfigApplying];\n});\n\n_c = ClaimToken;\nexport default ClaimToken;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimToken\");","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/ClaimToken/index.tsx"],"names":["React","useState","useEffect","useWeb3React","Button","Countdown","TransactionSubmitModal","useStyles","useUserRemainTokensClaim","useTokenClaim","convertTimeToStringFormat","useDispatch","alertFailure","ClaimInfo","useDetectClaimConfigApplying","BigNumber","ClaimToken","props","dispatch","styles","openClaimModal","setOpenClaimModal","userPurchased","setUserPurchased","userClaimInfo","setUserClaimInfo","account","connectedAccount","releaseTime","poolDetails","tokenDetails","poolAddress","poolId","ableToFetchFromBlockchain","buyTokenSuccess","disableAllButton","nowTime","Date","nowTimeUnix","getTime","claimToken","setClaimTokenLoading","transactionHash","claimTokenSuccess","loading","error","retrieveClaimableTokens","availableClaim","fetchUserPurchased","userClaimInformations","console","log","userPurchasedReturn","userPurchasedValue","userClaimed","currentClaim","currentClaimIndex","nextClaim","nextClaimIndex","maximumTokenClaimUtilNow","validateClaimable","lte","handleTokenClaim","err","poolDetailClaim","poolDetailClaimTitle","networkAvailable"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Button from '../Button';\nimport Countdown from '../../../components/Base/Countdown';\nimport TransactionSubmitModal from '../../../components/Base/TransactionSubmitModal';\nimport useStyles from './style';\n\nimport { TokenType } from '../../../hooks/useTokenDetails';\nimport useUserRemainTokensClaim from '../hooks/useUserRemainTokensClaim';\nimport useTokenClaim from '../hooks/useTokenClaim';\nimport { convertTimeToStringFormat } from '../../../utils/convertDate';\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport {useDispatch} from \"react-redux\";\nimport {alertFailure} from \"../../../store/actions/alert\";\nimport ClaimInfo from \"./ClaimInfo\";\nimport useDetectClaimConfigApplying from \"../hooks/useDetectClaimConfigApplying\";\nimport BigNumber from \"bignumber.js\";\n\ntype ClaimTokenProps = {\n  releaseTime: Date | undefined\n  tokenDetails: TokenType | undefined\n  poolAddress: string | undefined\n  ableToFetchFromBlockchain: boolean | undefined\n  buyTokenSuccess: boolean | undefined\n  poolId: number | undefined;\n  disableAllButton: boolean;\n  poolDetails: any;\n}\n\nconst ClaimToken: React.FC<ClaimTokenProps> = (props: ClaimTokenProps) => {\n  const dispatch = useDispatch();\n  const styles = useStyles();\n\n  const [openClaimModal, setOpenClaimModal] = useState<boolean>(false);\n  const [userPurchased, setUserPurchased] = useState<number>(0);\n  const [userClaimInfo, setUserClaimInfo] = useState<any>();\n\n  const { account: connectedAccount } = useWeb3React();\n  const {\n    releaseTime,\n    poolDetails,\n    tokenDetails,\n    poolAddress,\n    poolId,\n    ableToFetchFromBlockchain,\n    buyTokenSuccess,\n    disableAllButton\n  } = props;\n\n  const nowTime = new Date();\n  const nowTimeUnix = new Date().getTime();\n  const { claimToken, setClaimTokenLoading, transactionHash, claimTokenSuccess, loading, error } = useTokenClaim(poolAddress, poolId);\n  const { retrieveClaimableTokens } = useUserRemainTokensClaim(tokenDetails, poolAddress, ableToFetchFromBlockchain);\n  const availableClaim = releaseTime ? nowTime >= releaseTime: false;\n\n  useEffect(() => {\n    const fetchUserPurchased  = async () => {\n      if (connectedAccount && poolAddress) {\n\n        const userClaimInformations = await retrieveClaimableTokens(connectedAccount, poolAddress);\n        console.log('userClaimInformations', userClaimInformations);\n        setUserClaimInfo(userClaimInformations);\n\n        setUserPurchased(\n          (userClaimInformations?.userPurchasedReturn || 0) as number\n        );\n      }\n    }\n\n    (ableToFetchFromBlockchain || buyTokenSuccess) && fetchUserPurchased();\n  }, [connectedAccount, poolAddress, ableToFetchFromBlockchain, claimTokenSuccess, buyTokenSuccess]);\n\n  useEffect(() => {\n    if (error) {\n      setOpenClaimModal(false);\n      setClaimTokenLoading(false);\n    }\n  }, [error]);\n\n\n  const userPurchasedValue = userClaimInfo?.userPurchased || 0;\n  const userClaimed = userClaimInfo?.userClaimed || 0;\n  const {\n    currentClaim,\n    currentClaimIndex,\n    nextClaim,\n    nextClaimIndex,\n    maximumTokenClaimUtilNow,\n  } = useDetectClaimConfigApplying(\n    poolDetails,\n    userPurchasedValue,\n    userClaimed\n  );\n\n  const validateClaimable = () => {\n    if (new BigNumber(userPurchased).lte(0)) {\n      dispatch(alertFailure('You not enough claimable token!'));\n      return false;\n    }\n\n    if (!availableClaim) {\n      dispatch(alertFailure('You can not claim token at current time!'));\n      return false;\n    }\n\n    if (nextClaim &&\n      (new BigNumber(maximumTokenClaimUtilNow).lte(0))\n    ) {\n      dispatch(alertFailure('You can not claim token at current time!'));\n      return false;\n    }\n\n    if (!nextClaim &&\n      (new BigNumber(maximumTokenClaimUtilNow).lte(0)) // maximumTokenClaimUtilNow <= 0\n    ) {\n      dispatch(alertFailure('You not enough claimable token!'));\n      return false;\n    }\n\n    if (disableAllButton) {\n      dispatch(alertFailure('Please switch to correct network before Claim!'));\n      return false;\n    }\n    return true;\n  };\n\n  const handleTokenClaim = async () => {\n    if (!validateClaimable()) {\n      return ;\n    }\n    try {\n      setOpenClaimModal(true);\n      await claimToken();\n    } catch (err) {\n      setOpenClaimModal(false);\n    }\n  }\n\n\n  return (\n    <div className={styles.poolDetailClaim}>\n\n      {releaseTime && releaseTime >= nowTime &&\n        <>\n          <p className={styles.poolDetailClaimTitle}>\n            <span>{'Token can claim from'}</span>\n            <strong>{releaseTime ? convertTimeToStringFormat(releaseTime || new Date()) : 'TBA'}</strong>\n          </p>\n          <Countdown startDate={releaseTime} />\n        </>\n      }\n\n      {/*<div className={styles.poolDetailClaimInfo}>*/}\n      {/*  <div className={styles.poolDetailClaimInfoBlock}>*/}\n      {/*    <span>You can claim</span>*/}\n      {/*    <span>{numberWithCommas(`${userPurchased}`)} {tokenDetails?.symbol}</span>*/}\n      {/*  </div>*/}\n      {/*</div>*/}\n\n      <ClaimInfo\n        poolDetails={poolDetails}\n        tokenDetails={tokenDetails}\n        userClaimInfo={userClaimInfo}\n        releaseTime={releaseTime}\n\n        currentClaim={currentClaim}\n        currentClaimIndex={currentClaimIndex}\n        nextClaim={nextClaim}\n        nextClaimIndex={nextClaimIndex}\n        maximumTokenClaimUtilNow={maximumTokenClaimUtilNow}\n      />\n\n      <Button\n        text={'Claim'}\n        backgroundColor={'#3232DC'}\n        // disabled={!availableClaim || userPurchased <= 0 || disableAllButton}\n        disabled={disableAllButton || !ableToFetchFromBlockchain} // If network is not correct, disable Claim Button\n        loading={loading}\n        onClick={handleTokenClaim}\n      />\n\n      <TransactionSubmitModal\n        opened={openClaimModal}\n        handleClose={() => { setOpenClaimModal(false); setClaimTokenLoading(false)}}\n        transactionHash={transactionHash}\n        networkAvailable={poolDetails?.networkAvailable}\n      />\n    </div>\n  )\n}\n\nexport default ClaimToken;\n"]},"metadata":{},"sourceType":"module"}