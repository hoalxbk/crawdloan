{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\nimport { getContractInstance, SmartContractMethod } from '../../../services/web3';\nimport Pool_ABI from '../../../abi/Pool.json';\n\nconst useUserPurchased = (tokenDetails, poolAddress, ableToFetchFromBlockchain) => {\n  _s();\n\n  const [userPurchasedLoading, setUserPurchasedLoading] = useState(false);\n  const {\n    appChainID\n  } = useTypedSelector(state => state.appNetwork).data;\n  const connector = useTypedSelector(state => state.connector).data;\n  const retrieveUserPurchased = useCallback(async (userAddress, poolAddress) => {\n    try {\n      if (userAddress && poolAddress && tokenDetails && ableToFetchFromBlockchain && ethers.utils.isAddress(userAddress) && ethers.utils.isAddress(poolAddress)) {\n        setUserPurchasedLoading(true);\n        const contract = getContractInstance(Pool_ABI, poolAddress, connector, appChainID, SmartContractMethod.Read);\n\n        if (contract) {\n          const userPurchased = await contract.methods.userPurchased(userAddress).call();\n          const userPurchasedReturn = new BigNumber(userPurchased).div(new BigNumber(10).pow(tokenDetails.decimals)).toFixed();\n          return userPurchasedReturn;\n        }\n\n        return 0;\n      }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }, [appChainID, connector, poolAddress, ableToFetchFromBlockchain]);\n  return {\n    userPurchasedLoading,\n    retrieveUserPurchased\n  };\n};\n\n_s(useUserPurchased, \"GGN+xxbTl4tFDOIUrN/eYSrtVO0=\", false, function () {\n  return [useTypedSelector, useTypedSelector];\n});\n\nexport default useUserPurchased;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useUserPurchased.ts"],"names":["useState","useCallback","ethers","BigNumber","useTypedSelector","getContractInstance","SmartContractMethod","Pool_ABI","useUserPurchased","tokenDetails","poolAddress","ableToFetchFromBlockchain","userPurchasedLoading","setUserPurchasedLoading","appChainID","state","appNetwork","data","connector","retrieveUserPurchased","userAddress","utils","isAddress","contract","Read","userPurchased","methods","call","userPurchasedReturn","div","pow","decimals","toFixed","err","console","log","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAGA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAAQC,mBAAR,EAA6BC,mBAA7B,QAAwD,wBAAxD;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMC,gBAAgB,GAAG,CACvBC,YADuB,EAEvBC,WAFuB,EAGvBC,yBAHuB,KAIpB;AAAA;;AACH,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDb,QAAQ,CAAU,KAAV,CAAhE;AAEA,QAAM;AAAEc,IAAAA;AAAF,MAAiBV,gBAAgB,CAACW,KAAK,IAAKA,KAAK,CAACC,UAAjB,CAAhB,CAA6CC,IAApE;AACA,QAAMC,SAAS,GAAId,gBAAgB,CAACW,KAAK,IAAIA,KAAK,CAACG,SAAhB,CAAhB,CAA2CD,IAA9D;AAEA,QAAME,qBAAqB,GAAGlB,WAAW,CAAC,OAAOmB,WAAP,EAA4BV,WAA5B,KAAoD;AAC5F,QAAI;AACF,UAAIU,WAAW,IAAIV,WAAf,IAA8BD,YAA9B,IAA8CE,yBAA9C,IACGT,MAAM,CAACmB,KAAP,CAAaC,SAAb,CAAuBF,WAAvB,CADH,IAEGlB,MAAM,CAACmB,KAAP,CAAaC,SAAb,CAAuBZ,WAAvB,CAFP,EAGK;AACAG,QAAAA,uBAAuB,CAAC,IAAD,CAAvB;AAEA,cAAMU,QAAQ,GAAGlB,mBAAmB,CAACE,QAAD,EAAWG,WAAX,EAAwBQ,SAAxB,EAAmCJ,UAAnC,EAA+CR,mBAAmB,CAACkB,IAAnE,CAApC;;AAEA,YAAID,QAAJ,EAAc;AACZ,gBAAME,aAAa,GAAG,MAAMF,QAAQ,CAACG,OAAT,CAAiBD,aAAjB,CAA+BL,WAA/B,EAA4CO,IAA5C,EAA5B;AACA,gBAAMC,mBAAmB,GAAG,IAAIzB,SAAJ,CAAcsB,aAAd,EAA6BI,GAA7B,CAAiC,IAAI1B,SAAJ,CAAc,EAAd,EAAkB2B,GAAlB,CAAsBrB,YAAY,CAACsB,QAAnC,CAAjC,EAA+EC,OAA/E,EAA5B;AAEA,iBAAOJ,mBAAP;AACD;;AAED,eAAO,CAAP;AACD;AACL,KAlBD,CAkBE,OAAOK,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;AACD;AACF,GAtBwC,EAsBtC,CAACtB,UAAD,EAAaI,SAAb,EAAwBR,WAAxB,EAAqCC,yBAArC,CAtBsC,CAAzC;AAwBA,SAAO;AACLC,IAAAA,oBADK;AAELO,IAAAA;AAFK,GAAP;AAID,CAtCD;;GAAMX,gB;UAOmBJ,gB,EACJA,gB;;;AAgCrB,eAAeI,gBAAf","sourcesContent":["import { useState, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\n\nimport { TokenType } from '../../../hooks/useTokenDetails';\nimport { useTypedSelector } from '../../../hooks/useTypedSelector';\nimport{ getContractInstance, SmartContractMethod } from '../../../services/web3';\nimport Pool_ABI from '../../../abi/Pool.json';\n\nconst useUserPurchased = (\n  tokenDetails: TokenType | undefined, \n  poolAddress: string | undefined,\n  ableToFetchFromBlockchain: boolean | undefined\n) => {\n  const [userPurchasedLoading, setUserPurchasedLoading] = useState<boolean>(false);\n\n  const { appChainID } = useTypedSelector(state  => state.appNetwork).data;\n  const connector  = useTypedSelector(state => state.connector).data;\n\n  const retrieveUserPurchased = useCallback(async (userAddress: string, poolAddress: string) => {\n    try {\n      if (userAddress && poolAddress && tokenDetails && ableToFetchFromBlockchain \n          && ethers.utils.isAddress(userAddress) \n          && ethers.utils.isAddress(poolAddress) \n         ) {\n           setUserPurchasedLoading(true);\n\n           const contract = getContractInstance(Pool_ABI, poolAddress, connector, appChainID, SmartContractMethod.Read); \n\n           if (contract) {\n             const userPurchased = await contract.methods.userPurchased(userAddress).call();\n             const userPurchasedReturn = new BigNumber(userPurchased).div(new BigNumber(10).pow(tokenDetails.decimals)).toFixed();\n\n             return userPurchasedReturn;\n           }\n\n           return 0;\n         }\n    } catch (err) {\n      console.log(err.message);\n    }\n  }, [appChainID, connector, poolAddress, ableToFetchFromBlockchain]);\n\n  return {\n    userPurchasedLoading,\n    retrieveUserPurchased\n  }\n}\n\nexport default useUserPurchased;\n"]},"metadata":{},"sourceType":"module"}