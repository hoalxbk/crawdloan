{"ast":null,"code":"var _jsxFileName = \"/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ForgotPassword/InvestorForgotPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TextField } from '@material-ui/core';\nimport { withRouter, Link } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { alertFailure, alertSuccess } from '../../store/actions/alert';\nimport { BaseRequest } from '../../request/Request';\nimport useStyles from './style';\nimport { apiRoute, publicRoute } from \"../../utils\";\nimport InvestorLayout from \"../InvestorLayout/InvestorLayout\";\nimport TextTitle from \"../InvestorLayout/TextTitle\";\nimport TextSubTitle from \"../InvestorLayout/TextSubTitle\";\nimport Button from \"../../components/Base/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst getMessageParams = (isInvestor = false) => {\n  const msgSignature = MESSAGE_INVESTOR_SIGNATURE;\n  return [{\n    type: 'string',\n    // Any valid solidity type\n    name: 'Message',\n    // Any string label you want\n    value: msgSignature // The value to sign\n\n  }];\n};\n\nconst loginLogo = '/images/login-logo.png';\n\nconst InvestorForgotPassword = props => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    data: loginInvestor\n  } = useSelector(state => state.investor);\n  const {\n    data: ethAddress\n  } = useSelector(state => state.userConnect);\n  const [resetPasswordLoading, setResetPasswordLoading] = useState(false);\n  const {\n    register,\n    errors,\n    handleSubmit\n  } = useForm({\n    mode: 'onChange'\n  });\n\n  const renderErrorRequired = (errors, prop) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (loginInvestor) {\n      props.history.push('/');\n    }\n  }, [loginInvestor, props.history]);\n\n  const handleFormSubmit = async data => {\n    setResetPasswordLoading(true);\n    const windowObj = window;\n    const {\n      ethereum\n    } = windowObj;\n    await ethereum.sendAsync({\n      method: 'eth_signTypedData',\n      params: [getMessageParams(true), ethAddress],\n      from: ethAddress\n    }, async function (err, result) {\n      if (err || result.error) {\n        const errMsg = err.message || result.error.message;\n        dispatch(alertFailure(errMsg));\n        setResetPasswordLoading(false);\n        return;\n      }\n\n      let url = apiRoute('/forgot-password');\n      const baseRequest = new BaseRequest();\n      const response = await baseRequest.post(url, {\n        signature: result.result,\n        email: data.email,\n        wallet_address: ethAddress\n      });\n      const resObj = await response.json();\n\n      if ((resObj === null || resObj === void 0 ? void 0 : resObj.status) !== 200) {\n        dispatch(alertFailure(resObj.message));\n      } else {\n        dispatch(alertSuccess('Request successful, please check your inbox.'));\n      }\n\n      setResetPasswordLoading(false);\n    });\n  };\n\n  const render = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TextTitle, {\n        children: \"Forgot Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextSubTitle, {\n        children: \"Enter your email address below to reset password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(handleFormSubmit),\n        className: \"login__form\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          name: \"email\",\n          label: \"Email\",\n          inputRef: register({\n            required: true\n          }),\n          inputProps: {\n            maxLength: 255\n          },\n          color: \"secondary\",\n          className: \"login__form-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"login__form-error-message\",\n          children: renderErrorRequired(errors, 'email')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          className: \"login__form-desc login__form-forgot-password\",\n          to: publicRoute('/login'),\n          children: \"Sign in ?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          className: \"login__form-desc login__form-forgot-password\",\n          to: publicRoute('/register'),\n          children: \"Sign up ?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          label: 'Submit',\n          buttonType: \"primary\",\n          className: 'login__form-cta',\n          loading: resetPasswordLoading,\n          disabled: resetPasswordLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(InvestorLayout, {\n    children: render()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InvestorForgotPassword, \"49E42foBlTITrrJrOBChCo0K+rI=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useForm];\n});\n\n_c = InvestorForgotPassword;\nexport default _c2 = withRouter(InvestorForgotPassword);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InvestorForgotPassword\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/ForgotPassword/InvestorForgotPassword.tsx"],"names":["React","useState","useEffect","useSelector","useDispatch","TextField","withRouter","Link","useForm","alertFailure","alertSuccess","BaseRequest","useStyles","apiRoute","publicRoute","InvestorLayout","TextTitle","TextSubTitle","Button","MESSAGE_INVESTOR_SIGNATURE","process","env","REACT_APP_MESSAGE_INVESTOR_SIGNATURE","getMessageParams","isInvestor","msgSignature","type","name","value","loginLogo","InvestorForgotPassword","props","classes","dispatch","data","loginInvestor","state","investor","ethAddress","userConnect","resetPasswordLoading","setResetPasswordLoading","register","errors","handleSubmit","mode","renderErrorRequired","prop","history","push","handleFormSubmit","windowObj","window","ethereum","sendAsync","method","params","from","err","result","error","errMsg","message","url","baseRequest","response","post","signature","email","wallet_address","resObj","json","status","render","required","maxLength"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { TextField, CircularProgress } from '@material-ui/core';\nimport Container from '@material-ui/core/Container';\nimport {withRouter, useParams, Link} from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\n\nimport { alertFailure, alertSuccess } from '../../store/actions/alert';\nimport { BaseRequest } from '../../request/Request';\nimport useStyles from './style';\nimport {adminRoute, apiRoute, publicRoute} from \"../../utils\";\nimport InvestorLayout from \"../InvestorLayout/InvestorLayout\";\nimport TextTitle from \"../InvestorLayout/TextTitle\";\nimport TextSubTitle from \"../InvestorLayout/TextSubTitle\";\nimport Button from \"../../components/Base/Button\";\n\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst getMessageParams = (isInvestor: boolean = false) => {\n  const msgSignature = MESSAGE_INVESTOR_SIGNATURE;\n\n  return [{\n    type: 'string',      // Any valid solidity type\n    name: 'Message',     // Any string label you want\n    value: msgSignature  // The value to sign\n  }]\n};\n\nconst loginLogo = '/images/login-logo.png';\n\nconst InvestorForgotPassword: React.FC<any> = (props: any) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const { data: loginInvestor } = useSelector((state: any) => state.investor);\n  const { data: ethAddress } = useSelector((state: any) => state.userConnect);\n  const [resetPasswordLoading, setResetPasswordLoading] = useState(false);\n\n  const { register, errors, handleSubmit } = useForm({\n    mode: 'onChange'\n  });\n\n  const renderErrorRequired = (errors: any, prop: string) => {\n    if (errors[prop]) {\n      if (errors[prop].type === \"required\") {\n        return 'This field is required';\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (loginInvestor) {\n      props.history.push('/');\n    }\n  }, [loginInvestor, props.history]);\n\n  const handleFormSubmit = async (data: any) =>  {\n    setResetPasswordLoading(true);\n\n    const windowObj = window as any;\n    const { ethereum } = windowObj;\n\n     await ethereum.sendAsync({\n          method: 'eth_signTypedData',\n          params: [getMessageParams(true), ethAddress],\n          from: ethAddress,\n      }, async function(err: Error, result: any) {\n        if (err || result.error) {\n           const errMsg = err.message || result.error.message\n           dispatch(alertFailure(errMsg));\n           setResetPasswordLoading(false);\n            return;\n        }\n\n        let url = apiRoute('/forgot-password');\n        const baseRequest = new BaseRequest();\n        const response = await baseRequest.post(url, {\n          signature: result.result,\n          email: data.email,\n          wallet_address: ethAddress,\n        }) as any;\n\n        const resObj = await response.json();\n\n       if (resObj?.status !== 200) {\n         dispatch(alertFailure(resObj.message));\n       } else {\n         dispatch(alertSuccess('Request successful, please check your inbox.'));\n       }\n\n        setResetPasswordLoading(false);\n      })\n  }\n\n  const render = () => {\n    return (\n      <>\n        <TextTitle>\n          Forgot Password\n        </TextTitle>\n        <TextSubTitle>\n          Enter your email address below to reset password\n        </TextSubTitle>\n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"login__form\">\n          <TextField\n            name=\"email\"\n            label=\"Email\"\n            inputRef={register({ required: true })}\n            inputProps={{ maxLength: 255 }}\n            color=\"secondary\"\n            className=\"login__form-field\"\n          />\n          <p className=\"login__form-error-message\">\n          {\n            renderErrorRequired(errors, 'email')\n          }\n          </p>\n          <Link className=\"login__form-desc login__form-forgot-password\" to={publicRoute('/login')}>Sign in ?</Link>\n          <Link className=\"login__form-desc login__form-forgot-password\" to={publicRoute('/register')}>Sign up ?</Link>\n\n          <Button\n            label={'Submit'}\n            buttonType=\"primary\"\n            className={'login__form-cta'}\n            loading={resetPasswordLoading}\n            disabled={resetPasswordLoading}\n          />\n\n        </form>\n      </>\n    )\n  }\n\n\n  return (\n    <InvestorLayout>\n      {render()}\n    </InvestorLayout>\n  )\n};\n\nexport default withRouter(InvestorForgotPassword);\n"]},"metadata":{},"sourceType":"module"}