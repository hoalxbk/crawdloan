{"ast":null,"code":"/**\r\n * Jdenticon 3.1.0\r\n * http://jdenticon.com\r\n *\r\n * Built: 2020-12-12T13:51:48.709Z\r\n * \r\n * MIT License\r\n * \r\n * Copyright (c) 2014-2020 Daniel Mester Pirttijärvi\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\n\n/**\r\n * Parses a substring of the hash as a number.\r\n * @param {number} startPosition \r\n * @param {number=} octets\r\n */\nfunction parseHex(hash, startPosition, octets) {\n  return parseInt(hash.substr(startPosition, octets), 16);\n}\n\nfunction decToHex(v) {\n  v |= 0; // Ensure integer value\n\n  return v < 0 ? \"00\" : v < 16 ? \"0\" + v.toString(16) : v < 256 ? v.toString(16) : \"ff\";\n}\n\nfunction hueToRgb(m1, m2, h) {\n  h = h < 0 ? h + 6 : h > 6 ? h - 6 : h;\n  return decToHex(255 * (h < 1 ? m1 + (m2 - m1) * h : h < 3 ? m2 : h < 4 ? m1 + (m2 - m1) * (4 - h) : m1));\n}\n/**\r\n * @param {string} color  Color value to parse. Currently hexadecimal strings on the format #rgb[a] and #rrggbb[aa] are supported.\r\n * @returns {string}\r\n */\n\n\nfunction parseColor(color) {\n  if (/^#[0-9a-f]{3,8}$/i.test(color)) {\n    let result;\n    const colorLength = color.length;\n\n    if (colorLength < 6) {\n      const r = color[1],\n            g = color[2],\n            b = color[3],\n            a = color[4] || \"\";\n      result = \"#\" + r + r + g + g + b + b + a + a;\n    }\n\n    if (colorLength == 7 || colorLength > 8) {\n      result = color;\n    }\n\n    return result;\n  }\n}\n/**\r\n * Converts a hexadecimal color to a CSS3 compatible color.\r\n * @param {string} hexColor  Color on the format \"#RRGGBB\" or \"#RRGGBBAA\"\r\n * @returns {string}\r\n */\n\n\nfunction toCss3Color(hexColor) {\n  const a = parseHex(hexColor, 7, 2);\n  let result;\n\n  if (isNaN(a)) {\n    result = hexColor;\n  } else {\n    const r = parseHex(hexColor, 1, 2),\n          g = parseHex(hexColor, 3, 2),\n          b = parseHex(hexColor, 5, 2);\n    result = \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + (a / 255).toFixed(2) + \")\";\n  }\n\n  return result;\n}\n/**\r\n * Converts an HSL color to a hexadecimal RGB color.\r\n * @param {number} hue  Hue in range [0, 1]\r\n * @param {number} saturation  Saturation in range [0, 1]\r\n * @param {number} lightness  Lightness in range [0, 1]\r\n * @returns {string}\r\n */\n\n\nfunction hsl(hue, saturation, lightness) {\n  // Based on http://www.w3.org/TR/2011/REC-css3-color-20110607/#hsl-color\n  let result;\n\n  if (saturation == 0) {\n    const partialHex = decToHex(lightness * 255);\n    result = partialHex + partialHex + partialHex;\n  } else {\n    const m2 = lightness <= 0.5 ? lightness * (saturation + 1) : lightness + saturation - lightness * saturation,\n          m1 = lightness * 2 - m2;\n    result = hueToRgb(m1, m2, hue * 6 + 2) + hueToRgb(m1, m2, hue * 6) + hueToRgb(m1, m2, hue * 6 - 2);\n  }\n\n  return \"#\" + result;\n}\n/**\r\n * Converts an HSL color to a hexadecimal RGB color. This function will correct the lightness for the \"dark\" hues\r\n * @param {number} hue  Hue in range [0, 1]\r\n * @param {number} saturation  Saturation in range [0, 1]\r\n * @param {number} lightness  Lightness in range [0, 1]\r\n * @returns {string}\r\n */\n\n\nfunction correctedHsl(hue, saturation, lightness) {\n  // The corrector specifies the perceived middle lightness for each hue\n  const correctors = [0.55, 0.5, 0.5, 0.46, 0.6, 0.55, 0.55],\n        corrector = correctors[hue * 6 + 0.5 | 0]; // Adjust the input lightness relative to the corrector\n\n  lightness = lightness < 0.5 ? lightness * corrector * 2 : corrector + (lightness - 0.5) * (1 - corrector) * 2;\n  return hsl(hue, saturation, lightness);\n} // In the future we can replace `GLOBAL` with `globalThis`, but for now use the old school global detection for\n// backward compatibility.\n\n\nconst GLOBAL = typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : {};\n/**\r\n * @typedef {Object} ParsedConfiguration\r\n * @property {number} colorSaturation\r\n * @property {number} grayscaleSaturation\r\n * @property {string} backColor\r\n * @property {number} iconPadding\r\n * @property {function(number):number} hue\r\n * @property {function(number):number} colorLightness\r\n * @property {function(number):number} grayscaleLightness\r\n */\n\nconst CONFIG_PROPERTIES = {\n  V\n  /*GLOBAL*/\n  : \"jdenticon_config\",\n  n\n  /*MODULE*/\n  : \"config\"\n};\nvar rootConfigurationHolder = {};\n/**\r\n * Sets a new icon style configuration. The new configuration is not merged with the previous one. * \r\n * @param {Object} newConfiguration - New configuration object.\r\n */\n\nfunction configure(newConfiguration) {\n  if (arguments.length) {\n    rootConfigurationHolder[CONFIG_PROPERTIES.n\n    /*MODULE*/\n    ] = newConfiguration;\n  }\n\n  return rootConfigurationHolder[CONFIG_PROPERTIES.n\n  /*MODULE*/\n  ];\n}\n/**\r\n * Gets the normalized current Jdenticon color configuration. Missing fields have default values.\r\n * @param {Object|number|undefined} paddingOrLocalConfig - Configuration passed to the called API method. A\r\n *    local configuration overrides the global configuration in it entirety. This parameter can for backward\r\n *    compatibility also contain a padding value. A padding value only overrides the global padding, not the\r\n *    entire global configuration.\r\n * @param {number} defaultPadding - Padding used if no padding is specified in neither the configuration nor\r\n *    explicitly to the API method.\r\n * @returns {ParsedConfiguration}\r\n */\n\n\nfunction getConfiguration(paddingOrLocalConfig, defaultPadding) {\n  const configObject = typeof paddingOrLocalConfig == \"object\" && paddingOrLocalConfig || rootConfigurationHolder[CONFIG_PROPERTIES.n\n  /*MODULE*/\n  ] || GLOBAL[CONFIG_PROPERTIES.V\n  /*GLOBAL*/\n  ] || {},\n        lightnessConfig = configObject[\"lightness\"] || {},\n        // In versions < 2.1.0 there was no grayscale saturation -\n  // saturation was the color saturation.\n  saturation = configObject[\"saturation\"] || {},\n        colorSaturation = \"color\" in saturation ? saturation[\"color\"] : saturation,\n        grayscaleSaturation = saturation[\"grayscale\"],\n        backColor = configObject[\"backColor\"],\n        padding = configObject[\"padding\"];\n  /**\r\n   * Creates a lightness range.\r\n   */\n\n  function lightness(configName, defaultRange) {\n    let range = lightnessConfig[configName]; // Check if the lightness range is an array-like object. This way we ensure the\n    // array contain two values at the same time.\n\n    if (!(range && range.length > 1)) {\n      range = defaultRange;\n    }\n    /**\r\n     * Gets a lightness relative the specified value in the specified lightness range.\r\n     */\n\n\n    return function (value) {\n      value = range[0] + value * (range[1] - range[0]);\n      return value < 0 ? 0 : value > 1 ? 1 : value;\n    };\n  }\n  /**\r\n   * Gets a hue allowed by the configured hue restriction,\r\n   * provided the originally computed hue.\r\n   */\n\n\n  function hueFunction(originalHue) {\n    const hueConfig = configObject[\"hues\"];\n    let hue; // Check if 'hues' is an array-like object. This way we also ensure that\n    // the array is not empty, which would mean no hue restriction.\n\n    if (hueConfig && hueConfig.length > 0) {\n      // originalHue is in the range [0, 1]\n      // Multiply with 0.999 to change the range to [0, 1) and then truncate the index.\n      hue = hueConfig[0 | 0.999 * originalHue * hueConfig.length];\n    }\n\n    return typeof hue == \"number\" ? // A hue was specified. We need to convert the hue from\n    // degrees on any turn - e.g. 746° is a perfectly valid hue -\n    // to turns in the range [0, 1).\n    (hue / 360 % 1 + 1) % 1 : // No hue configured => use original hue\n    originalHue;\n  }\n\n  return {\n    W\n    /*hue*/\n    : hueFunction,\n    o\n    /*colorSaturation*/\n    : typeof colorSaturation == \"number\" ? colorSaturation : 0.5,\n    D\n    /*grayscaleSaturation*/\n    : typeof grayscaleSaturation == \"number\" ? grayscaleSaturation : 0,\n    p\n    /*colorLightness*/\n    : lightness(\"color\", [0.4, 0.8]),\n    F\n    /*grayscaleLightness*/\n    : lightness(\"grayscale\", [0.3, 0.9]),\n    G\n    /*backColor*/\n    : parseColor(backColor),\n    X\n    /*iconPadding*/\n    : typeof paddingOrLocalConfig == \"number\" ? paddingOrLocalConfig : typeof padding == \"number\" ? padding : defaultPadding\n  };\n}\n/**\r\n * Represents a point.\r\n */\n\n\nclass Point {\n  /**\r\n   * @param {number} x \r\n   * @param {number} y \r\n   */\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n}\n/**\r\n * Translates and rotates a point before being passed on to the canvas context. This was previously done by the canvas context itself, \r\n * but this caused a rendering issue in Chrome on sizes > 256 where the rotation transformation of inverted paths was not done properly.\r\n */\n\n\nclass Transform {\n  /**\r\n   * @param {number} x The x-coordinate of the upper left corner of the transformed rectangle.\r\n   * @param {number} y The y-coordinate of the upper left corner of the transformed rectangle.\r\n   * @param {number} size The size of the transformed rectangle.\r\n   * @param {number} rotation Rotation specified as 0 = 0 rad, 1 = 0.5π rad, 2 = π rad, 3 = 1.5π rad\r\n   */\n  constructor(x, y, size, rotation) {\n    this.q\n    /*_x*/\n    = x;\n    this.t\n    /*_y*/\n    = y;\n    this.H\n    /*_size*/\n    = size;\n    this.Y\n    /*_rotation*/\n    = rotation;\n  }\n  /**\r\n   * Transforms the specified point based on the translation and rotation specification for this Transform.\r\n   * @param {number} x x-coordinate\r\n   * @param {number} y y-coordinate\r\n   * @param {number=} w The width of the transformed rectangle. If greater than 0, this will ensure the returned point is of the upper left corner of the transformed rectangle.\r\n   * @param {number=} h The height of the transformed rectangle. If greater than 0, this will ensure the returned point is of the upper left corner of the transformed rectangle.\r\n   */\n\n\n  I\n  /*transformIconPoint*/\n  (x, y, w, h) {\n    const right = this.q\n    /*_x*/\n    + this.H\n    /*_size*/\n    ,\n          bottom = this.t\n    /*_y*/\n    + this.H\n    /*_size*/\n    ,\n          rotation = this.Y\n    /*_rotation*/\n    ;\n    return rotation === 1 ? new Point(right - y - (h || 0), this.t\n    /*_y*/\n    + x) : rotation === 2 ? new Point(right - x - (w || 0), bottom - y - (h || 0)) : rotation === 3 ? new Point(this.q\n    /*_x*/\n    + y, bottom - x - (w || 0)) : new Point(this.q\n    /*_x*/\n    + x, this.t\n    /*_y*/\n    + y);\n  }\n\n}\n\nconst NO_TRANSFORM = new Transform(0, 0, 0, 0);\n/**\r\n * Provides helper functions for rendering common basic shapes.\r\n */\n\nclass Graphics {\n  /**\r\n   * @param {Renderer} renderer \r\n   */\n  constructor(renderer) {\n    /**\r\n     * @type {Renderer}\r\n     * @private\r\n     */\n    this.J\n    /*_renderer*/\n    = renderer;\n    /**\r\n     * @type {Transform}\r\n     */\n\n    this.u\n    /*currentTransform*/\n    = NO_TRANSFORM;\n  }\n  /**\r\n   * Adds a polygon to the underlying renderer.\r\n   * @param {Array<number>} points The points of the polygon clockwise on the format [ x0, y0, x1, y1, ..., xn, yn ]\r\n   * @param {boolean=} invert Specifies if the polygon will be inverted.\r\n   */\n\n\n  g\n  /*addPolygon*/\n  (points, invert) {\n    const di = invert ? -2 : 2,\n          transformedPoints = [];\n\n    for (let i = invert ? points.length - 2 : 0; i < points.length && i >= 0; i += di) {\n      transformedPoints.push(this.u\n      /*currentTransform*/\n      .I\n      /*transformIconPoint*/\n      (points[i], points[i + 1]));\n    }\n\n    this.J\n    /*_renderer*/\n    .g\n    /*addPolygon*/\n    (transformedPoints);\n  }\n  /**\r\n   * Adds a polygon to the underlying renderer.\r\n   * Source: http://stackoverflow.com/a/2173084\r\n   * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the entire ellipse.\r\n   * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the entire ellipse.\r\n   * @param {number} size The size of the ellipse.\r\n   * @param {boolean=} invert Specifies if the ellipse will be inverted.\r\n   */\n\n\n  h\n  /*addCircle*/\n  (x, y, size, invert) {\n    const p = this.u\n    /*currentTransform*/\n    .I\n    /*transformIconPoint*/\n    (x, y, size, size);\n    this.J\n    /*_renderer*/\n    .h\n    /*addCircle*/\n    (p, size, invert);\n  }\n  /**\r\n   * Adds a rectangle to the underlying renderer.\r\n   * @param {number} x The x-coordinate of the upper left corner of the rectangle.\r\n   * @param {number} y The y-coordinate of the upper left corner of the rectangle.\r\n   * @param {number} w The width of the rectangle.\r\n   * @param {number} h The height of the rectangle.\r\n   * @param {boolean=} invert Specifies if the rectangle will be inverted.\r\n   */\n\n\n  i\n  /*addRectangle*/\n  (x, y, w, h, invert) {\n    this.g\n    /*addPolygon*/\n    ([x, y, x + w, y, x + w, y + h, x, y + h], invert);\n  }\n  /**\r\n   * Adds a right triangle to the underlying renderer.\r\n   * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the triangle.\r\n   * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the triangle.\r\n   * @param {number} w The width of the triangle.\r\n   * @param {number} h The height of the triangle.\r\n   * @param {number} r The rotation of the triangle (clockwise). 0 = right corner of the triangle in the lower left corner of the bounding rectangle.\r\n   * @param {boolean=} invert Specifies if the triangle will be inverted.\r\n   */\n\n\n  j\n  /*addTriangle*/\n  (x, y, w, h, r, invert) {\n    const points = [x + w, y, x + w, y + h, x, y + h, x, y];\n    points.splice((r || 0) % 4 * 2, 2);\n    this.g\n    /*addPolygon*/\n    (points, invert);\n  }\n  /**\r\n   * Adds a rhombus to the underlying renderer.\r\n   * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the rhombus.\r\n   * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the rhombus.\r\n   * @param {number} w The width of the rhombus.\r\n   * @param {number} h The height of the rhombus.\r\n   * @param {boolean=} invert Specifies if the rhombus will be inverted.\r\n   */\n\n\n  K\n  /*addRhombus*/\n  (x, y, w, h, invert) {\n    this.g\n    /*addPolygon*/\n    ([x + w / 2, y, x + w, y + h / 2, x + w / 2, y + h, x, y + h / 2], invert);\n  }\n\n}\n/**\r\n * @param {number} index\r\n * @param {Graphics} g\r\n * @param {number} cell\r\n * @param {number} positionIndex\r\n */\n\n\nfunction centerShape(index, g, cell, positionIndex) {\n  index = index % 14;\n  let k, m, w, h, inner, outer;\n  !index ? (k = cell * 0.42, g.g\n  /*addPolygon*/\n  ([0, 0, cell, 0, cell, cell - k * 2, cell - k, cell, 0, cell])) : index == 1 ? (w = 0 | cell * 0.5, h = 0 | cell * 0.8, g.j\n  /*addTriangle*/\n  (cell - w, 0, w, h, 2)) : index == 2 ? (w = 0 | cell / 3, g.i\n  /*addRectangle*/\n  (w, w, cell - w, cell - w)) : index == 3 ? (inner = cell * 0.1, // Use fixed outer border widths in small icons to ensure the border is drawn\n  outer = cell < 6 ? 1 : cell < 8 ? 2 : 0 | cell * 0.25, inner = inner > 1 ? 0 | inner : // large icon => truncate decimals\n  inner > 0.5 ? 1 : // medium size icon => fixed width\n  inner, // small icon => anti-aliased border\n  g.i\n  /*addRectangle*/\n  (outer, outer, cell - inner - outer, cell - inner - outer)) : index == 4 ? (m = 0 | cell * 0.15, w = 0 | cell * 0.5, g.h\n  /*addCircle*/\n  (cell - w - m, cell - w - m, w)) : index == 5 ? (inner = cell * 0.1, outer = inner * 4, // Align edge to nearest pixel in large icons\n  outer > 3 && (outer = 0 | outer), g.i\n  /*addRectangle*/\n  (0, 0, cell, cell), g.g\n  /*addPolygon*/\n  ([outer, outer, cell - inner, outer, outer + (cell - outer - inner) / 2, cell - inner], true)) : index == 6 ? g.g\n  /*addPolygon*/\n  ([0, 0, cell, 0, cell, cell * 0.7, cell * 0.4, cell * 0.4, cell * 0.7, cell, 0, cell]) : index == 7 ? g.j\n  /*addTriangle*/\n  (cell / 2, cell / 2, cell / 2, cell / 2, 3) : index == 8 ? (g.i\n  /*addRectangle*/\n  (0, 0, cell, cell / 2), g.i\n  /*addRectangle*/\n  (0, cell / 2, cell / 2, cell / 2), g.j\n  /*addTriangle*/\n  (cell / 2, cell / 2, cell / 2, cell / 2, 1)) : index == 9 ? (inner = cell * 0.14, // Use fixed outer border widths in small icons to ensure the border is drawn\n  outer = cell < 4 ? 1 : cell < 6 ? 2 : 0 | cell * 0.35, inner = cell < 8 ? inner : // small icon => anti-aliased border\n  0 | inner, // large icon => truncate decimals\n  g.i\n  /*addRectangle*/\n  (0, 0, cell, cell), g.i\n  /*addRectangle*/\n  (outer, outer, cell - outer - inner, cell - outer - inner, true)) : index == 10 ? (inner = cell * 0.12, outer = inner * 3, g.i\n  /*addRectangle*/\n  (0, 0, cell, cell), g.h\n  /*addCircle*/\n  (outer, outer, cell - inner - outer, true)) : index == 11 ? g.j\n  /*addTriangle*/\n  (cell / 2, cell / 2, cell / 2, cell / 2, 3) : index == 12 ? (m = cell * 0.25, g.i\n  /*addRectangle*/\n  (0, 0, cell, cell), g.K\n  /*addRhombus*/\n  (m, m, cell - m, cell - m, true)) : // 13\n  !positionIndex && (m = cell * 0.4, w = cell * 1.2, g.h\n  /*addCircle*/\n  (m, m, w));\n}\n/**\r\n * @param {number} index\r\n * @param {Graphics} g\r\n * @param {number} cell\r\n */\n\n\nfunction outerShape(index, g, cell) {\n  index = index % 4;\n  let m;\n  !index ? g.j\n  /*addTriangle*/\n  (0, 0, cell, cell, 0) : index == 1 ? g.j\n  /*addTriangle*/\n  (0, cell / 2, cell, cell / 2, 0) : index == 2 ? g.K\n  /*addRhombus*/\n  (0, 0, cell, cell) : ( // 3\n  m = cell / 6, g.h\n  /*addCircle*/\n  (m, m, cell - 2 * m));\n}\n/**\r\n * Gets a set of identicon color candidates for a specified hue and config.\r\n * @param {number} hue\r\n * @param {ParsedConfiguration} config\r\n */\n\n\nfunction colorTheme(hue, config) {\n  hue = config.W\n  /*hue*/\n  (hue);\n  return [// Dark gray\n  correctedHsl(hue, config.D\n  /*grayscaleSaturation*/\n  , config.F\n  /*grayscaleLightness*/\n  (0)), // Mid color\n  correctedHsl(hue, config.o\n  /*colorSaturation*/\n  , config.p\n  /*colorLightness*/\n  (0.5)), // Light gray\n  correctedHsl(hue, config.D\n  /*grayscaleSaturation*/\n  , config.F\n  /*grayscaleLightness*/\n  (1)), // Light color\n  correctedHsl(hue, config.o\n  /*colorSaturation*/\n  , config.p\n  /*colorLightness*/\n  (1)), // Dark color\n  correctedHsl(hue, config.o\n  /*colorSaturation*/\n  , config.p\n  /*colorLightness*/\n  (0))];\n}\n/**\r\n * Draws an identicon to a specified renderer.\r\n * @param {Renderer} renderer\r\n * @param {string} hash\r\n * @param {Object|number=} config\r\n */\n\n\nfunction iconGenerator(renderer, hash, config) {\n  const parsedConfig = getConfiguration(config, 0.08); // Set background color\n\n  if (parsedConfig.G\n  /*backColor*/\n  ) {\n      renderer.m\n      /*setBackground*/\n      (parsedConfig.G\n      /*backColor*/\n      );\n    } // Calculate padding and round to nearest integer\n\n\n  let size = renderer.k\n  /*iconSize*/\n  ;\n  const padding = 0.5 + size * parsedConfig.X\n  /*iconPadding*/\n  | 0;\n  size -= padding * 2;\n  const graphics = new Graphics(renderer); // Calculate cell size and ensure it is an integer\n\n  const cell = 0 | size / 4; // Since the cell size is integer based, the actual icon will be slightly smaller than specified => center icon\n\n  const x = 0 | padding + size / 2 - cell * 2;\n  const y = 0 | padding + size / 2 - cell * 2;\n\n  function renderShape(colorIndex, shapes, index, rotationIndex, positions) {\n    const shapeIndex = parseHex(hash, index, 1);\n    let r = rotationIndex ? parseHex(hash, rotationIndex, 1) : 0;\n    renderer.L\n    /*beginShape*/\n    (availableColors[selectedColorIndexes[colorIndex]]);\n\n    for (let i = 0; i < positions.length; i++) {\n      graphics.u\n      /*currentTransform*/\n      = new Transform(x + positions[i][0] * cell, y + positions[i][1] * cell, cell, r++ % 4);\n      shapes(shapeIndex, graphics, cell, i);\n    }\n\n    renderer.M\n    /*endShape*/\n    ();\n  } // AVAILABLE COLORS\n\n\n  const hue = parseHex(hash, -7) / 0xfffffff,\n        // Available colors for this icon\n  availableColors = colorTheme(hue, parsedConfig),\n        // The index of the selected colors\n  selectedColorIndexes = [];\n  let index;\n\n  function isDuplicate(values) {\n    if (values.indexOf(index) >= 0) {\n      for (let i = 0; i < values.length; i++) {\n        if (selectedColorIndexes.indexOf(values[i]) >= 0) {\n          return true;\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < 3; i++) {\n    index = parseHex(hash, 8 + i, 1) % availableColors.length;\n\n    if (isDuplicate([0, 4]) || // Disallow dark gray and dark color combo\n    isDuplicate([2, 3])) {\n      // Disallow light gray and light color combo\n      index = 1;\n    }\n\n    selectedColorIndexes.push(index);\n  } // ACTUAL RENDERING\n  // Sides\n\n\n  renderShape(0, outerShape, 2, 3, [[1, 0], [2, 0], [2, 3], [1, 3], [0, 1], [3, 1], [3, 2], [0, 2]]); // Corners\n\n  renderShape(1, outerShape, 4, 5, [[0, 0], [3, 0], [3, 3], [0, 3]]); // Center\n\n  renderShape(2, centerShape, 1, null, [[1, 1], [2, 1], [2, 2], [1, 2]]);\n  renderer.finish();\n}\n/**\r\n * Computes a SHA1 hash for any value and returns it as a hexadecimal string.\r\n * \r\n * This function is optimized for minimal code size and rather short messages.\r\n * \r\n * @param {string} message \r\n */\n\n\nfunction sha1(message) {\n  const HASH_SIZE_HALF_BYTES = 40;\n  const BLOCK_SIZE_WORDS = 16; // Variables\n  // `var` is used to be able to minimize the number of `var` keywords.\n\n  var i = 0,\n      f = 0,\n      // Use `encodeURI` to UTF8 encode the message without any additional libraries\n  // We could use `unescape` + `encodeURI` to minimize the code, but that would be slightly risky\n  // since `unescape` is deprecated.\n  urlEncodedMessage = encodeURI(message) + \"%80\",\n      // trailing '1' bit padding\n  // This can be changed to a preallocated Uint32Array array for greater performance and larger code size\n  data = [],\n      dataSize,\n      hashBuffer = [],\n      a = 0x67452301,\n      b = 0xefcdab89,\n      c = ~a,\n      d = ~b,\n      e = 0xc3d2e1f0,\n      hash = [a, b, c, d, e],\n      blockStartIndex = 0,\n      hexHash = \"\";\n  /**\r\n   * Rotates the value a specified number of bits to the left.\r\n   * @param {number} value  Value to rotate\r\n   * @param {number} shift  Bit count to shift.\r\n   */\n\n  function rotl(value, shift) {\n    return value << shift | value >>> 32 - shift;\n  } // Message data\n\n\n  for (; i < urlEncodedMessage.length; f++) {\n    data[f >> 2] = data[f >> 2] | (urlEncodedMessage[i] == \"%\" // Percent encoded byte\n    ? parseInt(urlEncodedMessage.substring(i + 1, i += 3), 16) // Unencoded byte\n    : urlEncodedMessage.charCodeAt(i++)) << // Read bytes in reverse order (big endian words)\n    (3 - (f & 3)) * 8;\n  } // f is now the length of the utf8 encoded message\n  // 7 = 8 bytes (64 bit) for message size, -1 to round down\n  // >> 6 = integer division with block size\n\n\n  dataSize = ((f + 7 >> 6) + 1) * BLOCK_SIZE_WORDS; // Message size in bits.\n  // SHA1 uses a 64 bit integer to represent the size, but since we only support short messages only the least\n  // significant 32 bits are set. -8 is for the '1' bit padding byte.\n\n  data[dataSize - 1] = f * 8 - 8; // Compute hash\n\n  for (; blockStartIndex < dataSize; blockStartIndex += BLOCK_SIZE_WORDS) {\n    for (i = 0; i < 80; i++) {\n      f = rotl(a, 5) + e + ( // Ch\n      i < 20 ? (b & c ^ ~b & d) + 0x5a827999 : // Parity\n      i < 40 ? (b ^ c ^ d) + 0x6ed9eba1 : // Maj\n      i < 60 ? (b & c ^ b & d ^ c & d) + 0x8f1bbcdc : // Parity\n      (b ^ c ^ d) + 0xca62c1d6) + (hashBuffer[i] = i < BLOCK_SIZE_WORDS // Bitwise OR is used to coerse `undefined` to 0\n      ? data[blockStartIndex + i] | 0 : rotl(hashBuffer[i - 3] ^ hashBuffer[i - 8] ^ hashBuffer[i - 14] ^ hashBuffer[i - 16], 1));\n      e = d;\n      d = c;\n      c = rotl(b, 30);\n      b = a;\n      a = f;\n    }\n\n    hash[0] = a = hash[0] + a | 0;\n    hash[1] = b = hash[1] + b | 0;\n    hash[2] = c = hash[2] + c | 0;\n    hash[3] = d = hash[3] + d | 0;\n    hash[4] = e = hash[4] + e | 0;\n  } // Format hex hash\n\n\n  for (i = 0; i < HASH_SIZE_HALF_BYTES; i++) {\n    hexHash += ( // Get word (2^3 half-bytes per word)\n    hash[i >> 3] >>> // Append half-bytes in reverse order\n    (7 - (i & 7)) * 4 & // Clamp to half-byte\n    0xf).toString(16);\n  }\n\n  return hexHash;\n}\n/**\r\n * Inputs a value that might be a valid hash string for Jdenticon and returns it \r\n * if it is determined valid, otherwise a falsy value is returned.\r\n */\n\n\nfunction isValidHash(hashCandidate) {\n  return /^[0-9a-f]{11,}$/i.test(hashCandidate) && hashCandidate;\n}\n/**\r\n * Computes a hash for the specified value. Currently SHA1 is used. This function\r\n * always returns a valid hash.\r\n */\n\n\nfunction computeHash(value) {\n  return sha1(value == null ? \"\" : \"\" + value);\n}\n/**\r\n * Renderer redirecting drawing commands to a canvas context.\r\n * @implements {Renderer}\r\n */\n\n\nclass CanvasRenderer {\n  /**\r\n   * @param {number=} iconSize\r\n   */\n  constructor(ctx, iconSize) {\n    const canvas = ctx.canvas;\n    const width = canvas.width;\n    const height = canvas.height;\n    ctx.save();\n\n    if (!iconSize) {\n      iconSize = Math.min(width, height);\n      ctx.translate((width - iconSize) / 2 | 0, (height - iconSize) / 2 | 0);\n    }\n    /**\r\n     * @private\r\n     */\n\n\n    this.l\n    /*_ctx*/\n    = ctx;\n    this.k\n    /*iconSize*/\n    = iconSize;\n    ctx.clearRect(0, 0, iconSize, iconSize);\n  }\n  /**\r\n   * Fills the background with the specified color.\r\n   * @param {string} fillColor  Fill color on the format #rrggbb[aa].\r\n   */\n\n\n  m\n  /*setBackground*/\n  (fillColor) {\n    const ctx = this.l\n    /*_ctx*/\n    ;\n    const iconSize = this.k\n    /*iconSize*/\n    ;\n    ctx.fillStyle = toCss3Color(fillColor);\n    ctx.fillRect(0, 0, iconSize, iconSize);\n  }\n  /**\r\n   * Marks the beginning of a new shape of the specified color. Should be ended with a call to endShape.\r\n   * @param {string} fillColor Fill color on format #rrggbb[aa].\r\n   */\n\n\n  L\n  /*beginShape*/\n  (fillColor) {\n    const ctx = this.l\n    /*_ctx*/\n    ;\n    ctx.fillStyle = toCss3Color(fillColor);\n    ctx.beginPath();\n  }\n  /**\r\n   * Marks the end of the currently drawn shape. This causes the queued paths to be rendered on the canvas.\r\n   */\n\n\n  M\n  /*endShape*/\n  () {\n    this.l\n    /*_ctx*/\n    .fill();\n  }\n  /**\r\n   * Adds a polygon to the rendering queue.\r\n   * @param points An array of Point objects.\r\n   */\n\n\n  g\n  /*addPolygon*/\n  (points) {\n    const ctx = this.l\n    /*_ctx*/\n    ;\n    ctx.moveTo(points[0].x, points[0].y);\n\n    for (let i = 1; i < points.length; i++) {\n      ctx.lineTo(points[i].x, points[i].y);\n    }\n\n    ctx.closePath();\n  }\n  /**\r\n   * Adds a circle to the rendering queue.\r\n   * @param {Point} point The upper left corner of the circle bounding box.\r\n   * @param {number} diameter The diameter of the circle.\r\n   * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n   */\n\n\n  h\n  /*addCircle*/\n  (point, diameter, counterClockwise) {\n    const ctx = this.l\n    /*_ctx*/\n    ,\n          radius = diameter / 2;\n    ctx.moveTo(point.x + radius, point.y + radius);\n    ctx.arc(point.x + radius, point.y + radius, radius, 0, Math.PI * 2, counterClockwise);\n    ctx.closePath();\n  }\n  /**\r\n   * Called when the icon has been completely drawn.\r\n   */\n\n\n  finish() {\n    this.l\n    /*_ctx*/\n    .restore();\n  }\n\n}\n/**\r\n * Draws an identicon to a context.\r\n * @param {CanvasRenderingContext2D} ctx - Canvas context on which the icon will be drawn at location (0, 0).\r\n * @param {*} hashOrValue - A hexadecimal hash string or any value that will be hashed by Jdenticon.\r\n * @param {number} size - Icon size in pixels.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compatibility a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\n\n\nfunction drawIcon(ctx, hashOrValue, size, config) {\n  if (!ctx) {\n    throw new Error(\"No canvas specified.\");\n  }\n\n  iconGenerator(new CanvasRenderer(ctx, size), isValidHash(hashOrValue) || computeHash(hashOrValue), config);\n}\n/**\r\n * Prepares a measure to be used as a measure in an SVG path, by\r\n * rounding the measure to a single decimal. This reduces the file\r\n * size of the generated SVG with more than 50% in some cases.\r\n */\n\n\nfunction svgValue(value) {\n  return (value * 10 + 0.5 | 0) / 10;\n}\n/**\r\n * Represents an SVG path element.\r\n */\n\n\nclass SvgPath {\n  constructor() {\n    /**\r\n     * This property holds the data string (path.d) of the SVG path.\r\n     * @type {string}\r\n     */\n    this.v\n    /*dataString*/\n    = \"\";\n  }\n  /**\r\n   * Adds a polygon with the current fill color to the SVG path.\r\n   * @param points An array of Point objects.\r\n   */\n\n\n  g\n  /*addPolygon*/\n  (points) {\n    let dataString = \"\";\n\n    for (let i = 0; i < points.length; i++) {\n      dataString += (i ? \"L\" : \"M\") + svgValue(points[i].x) + \" \" + svgValue(points[i].y);\n    }\n\n    this.v\n    /*dataString*/\n    += dataString + \"Z\";\n  }\n  /**\r\n   * Adds a circle with the current fill color to the SVG path.\r\n   * @param {Point} point The upper left corner of the circle bounding box.\r\n   * @param {number} diameter The diameter of the circle.\r\n   * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n   */\n\n\n  h\n  /*addCircle*/\n  (point, diameter, counterClockwise) {\n    const sweepFlag = counterClockwise ? 0 : 1,\n          svgRadius = svgValue(diameter / 2),\n          svgDiameter = svgValue(diameter),\n          svgArc = \"a\" + svgRadius + \",\" + svgRadius + \" 0 1,\" + sweepFlag + \" \";\n    this.v\n    /*dataString*/\n    += \"M\" + svgValue(point.x) + \" \" + svgValue(point.y + diameter / 2) + svgArc + svgDiameter + \",0\" + svgArc + -svgDiameter + \",0\";\n  }\n\n}\n/**\r\n * Renderer producing SVG output.\r\n * @implements {Renderer}\r\n */\n\n\nclass SvgRenderer {\n  /**\r\n   * @param {SvgElement|SvgWriter} target \r\n   */\n  constructor(target) {\n    /**\r\n     * @type {SvgPath}\r\n     * @private\r\n     */\n    this.A\n    /*_path*/\n    ;\n    /**\r\n     * @type {Object.<string,SvgPath>}\r\n     * @private\r\n     */\n\n    this.B\n    /*_pathsByColor*/\n    = {};\n    /**\r\n     * @type {SvgElement|SvgWriter}\r\n     * @private\r\n     */\n\n    this.N\n    /*_target*/\n    = target;\n    /**\r\n     * @type {number}\r\n     */\n\n    this.k\n    /*iconSize*/\n    = target.k\n    /*iconSize*/\n    ;\n  }\n  /**\r\n   * Fills the background with the specified color.\r\n   * @param {string} fillColor  Fill color on the format #rrggbb[aa].\r\n   */\n\n\n  m\n  /*setBackground*/\n  (fillColor) {\n    const match = /^(#......)(..)?/.exec(fillColor),\n          opacity = match[2] ? parseHex(match[2], 0) / 255 : 1;\n    this.N\n    /*_target*/\n    .m\n    /*setBackground*/\n    (match[1], opacity);\n  }\n  /**\r\n   * Marks the beginning of a new shape of the specified color. Should be ended with a call to endShape.\r\n   * @param {string} color Fill color on format #xxxxxx.\r\n   */\n\n\n  L\n  /*beginShape*/\n  (color) {\n    this.A\n    /*_path*/\n    = this.B\n    /*_pathsByColor*/\n    [color] || (this.B\n    /*_pathsByColor*/\n    [color] = new SvgPath());\n  }\n  /**\r\n   * Marks the end of the currently drawn shape.\r\n   */\n\n\n  M\n  /*endShape*/\n  () {}\n  /**\r\n   * Adds a polygon with the current fill color to the SVG.\r\n   * @param points An array of Point objects.\r\n   */\n\n\n  g\n  /*addPolygon*/\n  (points) {\n    this.A\n    /*_path*/\n    .g\n    /*addPolygon*/\n    (points);\n  }\n  /**\r\n   * Adds a circle with the current fill color to the SVG.\r\n   * @param {Point} point The upper left corner of the circle bounding box.\r\n   * @param {number} diameter The diameter of the circle.\r\n   * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n   */\n\n\n  h\n  /*addCircle*/\n  (point, diameter, counterClockwise) {\n    this.A\n    /*_path*/\n    .h\n    /*addCircle*/\n    (point, diameter, counterClockwise);\n  }\n  /**\r\n   * Called when the icon has been completely drawn.\r\n   */\n\n\n  finish() {\n    const pathsByColor = this.B\n    /*_pathsByColor*/\n    ;\n\n    for (let color in pathsByColor) {\n      // hasOwnProperty cannot be shadowed in pathsByColor\n      // eslint-disable-next-line no-prototype-builtins\n      if (pathsByColor.hasOwnProperty(color)) {\n        this.N\n        /*_target*/\n        .O\n        /*appendPath*/\n        (color, pathsByColor[color].v\n        /*dataString*/\n        );\n      }\n    }\n  }\n\n}\n\nconst SVG_CONSTANTS = {\n  P\n  /*XMLNS*/\n  : \"http://www.w3.org/2000/svg\",\n  R\n  /*WIDTH*/\n  : \"width\",\n  S\n  /*HEIGHT*/\n  : \"height\"\n};\n/**\r\n * Renderer producing SVG output.\r\n */\n\nclass SvgWriter {\n  /**\r\n   * @param {number} iconSize - Icon width and height in pixels.\r\n   */\n  constructor(iconSize) {\n    /**\r\n     * @type {number}\r\n     */\n    this.k\n    /*iconSize*/\n    = iconSize;\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\n\n    this.C\n    /*_s*/\n    = '<svg xmlns=\"' + SVG_CONSTANTS.P\n    /*XMLNS*/\n    + '\" width=\"' + iconSize + '\" height=\"' + iconSize + '\" viewBox=\"0 0 ' + iconSize + ' ' + iconSize + '\">';\n  }\n  /**\r\n   * Fills the background with the specified color.\r\n   * @param {string} fillColor  Fill color on the format #rrggbb.\r\n   * @param {number} opacity  Opacity in the range [0.0, 1.0].\r\n   */\n\n\n  m\n  /*setBackground*/\n  (fillColor, opacity) {\n    if (opacity) {\n      this.C\n      /*_s*/\n      += '<rect width=\"100%\" height=\"100%\" fill=\"' + fillColor + '\" opacity=\"' + opacity.toFixed(2) + '\"/>';\n    }\n  }\n  /**\r\n   * Writes a path to the SVG string.\r\n   * @param {string} color Fill color on format #rrggbb.\r\n   * @param {string} dataString The SVG path data string.\r\n   */\n\n\n  O\n  /*appendPath*/\n  (color, dataString) {\n    this.C\n    /*_s*/\n    += '<path fill=\"' + color + '\" d=\"' + dataString + '\"/>';\n  }\n  /**\r\n   * Gets the rendered image as an SVG string.\r\n   */\n\n\n  toString() {\n    return this.C\n    /*_s*/\n    + \"</svg>\";\n  }\n\n}\n/**\r\n * Draws an identicon as an SVG string.\r\n * @param {*} hashOrValue - A hexadecimal hash string or any value that will be hashed by Jdenticon.\r\n * @param {number} size - Icon size in pixels.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compatibility a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n * @returns {string} SVG string\r\n */\n\n\nfunction toSvg(hashOrValue, size, config) {\n  const writer = new SvgWriter(size);\n  iconGenerator(new SvgRenderer(writer), isValidHash(hashOrValue) || computeHash(hashOrValue), config);\n  return writer.toString();\n}\n\nconst ICON_TYPE_SVG = 1;\nconst ICON_TYPE_CANVAS = 2;\nconst ATTRIBUTES = {\n  Z\n  /*HASH*/\n  : \"data-jdenticon-hash\",\n  T\n  /*VALUE*/\n  : \"data-jdenticon-value\"\n};\nconst documentQuerySelectorAll =\n/** @type {!Function} */\ntypeof document !== \"undefined\" && document.querySelectorAll.bind(document);\n\nfunction getIdenticonType(el) {\n  if (el) {\n    const tagName = el[\"tagName\"];\n\n    if (/^svg$/i.test(tagName)) {\n      return ICON_TYPE_SVG;\n    }\n\n    if (/^canvas$/i.test(tagName) && \"getContext\" in el) {\n      return ICON_TYPE_CANVAS;\n    }\n  }\n}\n/**\r\n * Creates a new element and adds it to the specified parent.\r\n * @param {Element} parentNode\r\n * @param {string} name\r\n * @param {...(string|number)} keyValuePairs\r\n */\n\n\nfunction SvgElement_append(parentNode, name, ...keyValuePairs) {\n  const el = document.createElementNS(SVG_CONSTANTS.P\n  /*XMLNS*/\n  , name);\n\n  for (let i = 0; i + 1 < keyValuePairs.length; i += 2) {\n    el.setAttribute(\n    /** @type {string} */\n    keyValuePairs[i],\n    /** @type {string} */\n    keyValuePairs[i + 1]);\n  }\n\n  parentNode.appendChild(el);\n}\n/**\r\n * Renderer producing SVG output.\r\n */\n\n\nclass SvgElement {\n  /**\r\n   * @param {Element} element - Target element\r\n   */\n  constructor(element) {\n    // Don't use the clientWidth and clientHeight properties on SVG elements\n    // since Firefox won't serve a proper value of these properties on SVG\n    // elements (https://bugzilla.mozilla.org/show_bug.cgi?id=874811)\n    // Instead use 100px as a hardcoded size (the svg viewBox will rescale \n    // the icon to the correct dimensions)\n    const iconSize = this.k\n    /*iconSize*/\n    = Math.min(Number(element.getAttribute(SVG_CONSTANTS.R\n    /*WIDTH*/\n    )) || 100, Number(element.getAttribute(SVG_CONSTANTS.S\n    /*HEIGHT*/\n    )) || 100);\n    /**\r\n     * @type {Element}\r\n     * @private\r\n     */\n\n    this.U\n    /*_el*/\n    = element; // Clear current SVG child elements\n\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    } // Set viewBox attribute to ensure the svg scales nicely.\n\n\n    element.setAttribute(\"viewBox\", \"0 0 \" + iconSize + \" \" + iconSize);\n    element.setAttribute(\"preserveAspectRatio\", \"xMidYMid meet\");\n  }\n  /**\r\n   * Fills the background with the specified color.\r\n   * @param {string} fillColor  Fill color on the format #rrggbb.\r\n   * @param {number} opacity  Opacity in the range [0.0, 1.0].\r\n   */\n\n\n  m\n  /*setBackground*/\n  (fillColor, opacity) {\n    if (opacity) {\n      SvgElement_append(this.U\n      /*_el*/\n      , \"rect\", SVG_CONSTANTS.R\n      /*WIDTH*/\n      , \"100%\", SVG_CONSTANTS.S\n      /*HEIGHT*/\n      , \"100%\", \"fill\", fillColor, \"opacity\", opacity);\n    }\n  }\n  /**\r\n   * Appends a path to the SVG element.\r\n   * @param {string} color Fill color on format #xxxxxx.\r\n   * @param {string} dataString The SVG path data string.\r\n   */\n\n\n  O\n  /*appendPath*/\n  (color, dataString) {\n    SvgElement_append(this.U\n    /*_el*/\n    , \"path\", \"fill\", color, \"d\", dataString);\n  }\n\n}\n/**\r\n * Updates the identicon in the specified `<canvas>` or `<svg>` elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<svg>` or `<canvas>`, or a CSS selector to such an element.\r\n * @param {*=} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\n\n\nfunction update(el, hashOrValue, config) {\n  renderDomElement(el, hashOrValue, config, function (el, iconType) {\n    if (iconType) {\n      return iconType == ICON_TYPE_SVG ? new SvgRenderer(new SvgElement(el)) : new CanvasRenderer(\n      /** @type {HTMLCanvasElement} */\n      el.getContext(\"2d\"));\n    }\n  });\n}\n/**\r\n * Updates the identicon in the specified `<canvas>` elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<canvas>`, or a CSS selector to such an element.\r\n * @param {*=} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\n\n\nfunction updateCanvas(el, hashOrValue, config) {\n  renderDomElement(el, hashOrValue, config, function (el, iconType) {\n    if (iconType == ICON_TYPE_CANVAS) {\n      return new CanvasRenderer(\n      /** @type {HTMLCanvasElement} */\n      el.getContext(\"2d\"));\n    }\n  });\n}\n/**\r\n * Updates the identicon in the specified `<svg>` elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<svg>`, or a CSS selector to such an element.\r\n * @param {*=} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\n\n\nfunction updateSvg(el, hashOrValue, config) {\n  renderDomElement(el, hashOrValue, config, function (el, iconType) {\n    if (iconType == ICON_TYPE_SVG) {\n      return new SvgRenderer(new SvgElement(el));\n    }\n  });\n}\n/**\r\n * Updates the identicon in the specified canvas or svg elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<svg>` or `<canvas>`, or a CSS selector to such an element.\r\n * @param {*} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number|undefined} config\r\n * @param {function(Element,number):Renderer} rendererFactory - Factory function for creating an icon renderer.\r\n */\n\n\nfunction renderDomElement(el, hashOrValue, config, rendererFactory) {\n  if (typeof el === \"string\") {\n    if (documentQuerySelectorAll) {\n      const elements = documentQuerySelectorAll(el);\n\n      for (let i = 0; i < elements.length; i++) {\n        renderDomElement(elements[i], hashOrValue, config, rendererFactory);\n      }\n    }\n\n    return;\n  } // Hash selection. The result from getValidHash or computeHash is \n  // accepted as a valid hash.\n\n\n  const hash = // 1. Explicit valid hash\n  isValidHash(hashOrValue) || // 2. Explicit value (`!= null` catches both null and undefined)\n  hashOrValue != null && computeHash(hashOrValue) || // 3. `data-jdenticon-hash` attribute\n  isValidHash(el.getAttribute(ATTRIBUTES.Z\n  /*HASH*/\n  )) || // 4. `data-jdenticon-value` attribute. \n  // We want to treat an empty attribute as an empty value. \n  // Some browsers return empty string even if the attribute \n  // is not specified, so use hasAttribute to determine if \n  // the attribute is specified.\n  el.hasAttribute(ATTRIBUTES.T\n  /*VALUE*/\n  ) && computeHash(el.getAttribute(ATTRIBUTES.T\n  /*VALUE*/\n  ));\n\n  if (!hash) {\n    // No hash specified. Don't render an icon.\n    return;\n  }\n\n  const renderer = rendererFactory(el, getIdenticonType(el));\n\n  if (renderer) {\n    // Draw icon\n    iconGenerator(renderer, hash, config);\n  }\n} // This file is compiled to dist/jdenticon-module.mjs\n\n/**\r\n * Specifies the version of the Jdenticon package in use.\r\n * @type {string}\r\n */\n\n\nconst version = \"3.1.0\";\n/**\r\n * Specifies which bundle of Jdenticon that is used.\r\n * @type {string}\r\n */\n\nconst bundle = \"browser-esm\";\nexport { bundle, configure, drawIcon, toSvg, update, updateCanvas, updateSvg, version };","map":{"version":3,"sources":["replacement/1","src/common/parseHex.js","src/renderer/color.js","src/common/global.js","src/common/configuration.js","src/renderer/point.js","src/renderer/transform.js","src/renderer/graphics.js","src/renderer/shapes.js","src/renderer/colorTheme.js","src/renderer/iconGenerator.js","src/common/sha1.js","src/common/hashUtils.js","src/renderer/canvas/canvasRenderer.js","src/apis/drawIcon.js","src/renderer/svg/svgPath.js","src/renderer/svg/svgRenderer.js","src/renderer/svg/constants.js","src/renderer/svg/svgWriter.js","src/apis/toSvg.js","src/common/dom.js","src/renderer/svg/svgElement.js","src/apis/update.js","src/browser-esm.js"],"names":["GLOBAL","MODULE","hue","colorSaturation","grayscaleSaturation","colorLightness","grayscaleLightness","backColor","iconPadding","_x","_y","_size","_rotation","transformIconPoint","_renderer","currentTransform","addPolygon","addCircle","addRectangle","addTriangle","addRhombus","setBackground","iconSize","beginShape","endShape","_ctx","dataString","_path","_pathsByColor","_target","appendPath","XMLNS","WIDTH","HEIGHT","_s","HASH","VALUE","_el"],"mappings":"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","sourcesContent":["/**\r\n * Jdenticon 3.1.0\r\n * http://jdenticon.com\r\n *\r\n * Built: 2020-12-12T13:51:48.709Z\r\n * \r\n * MIT License\r\n * \r\n * Copyright (c) 2014-2020 Daniel Mester Pirttijärvi\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\n/**\r\n * Parses a substring of the hash as a number.\r\n * @param {number} startPosition \r\n * @param {number=} octets\r\n */\r\nexport function parseHex(hash, startPosition, octets) {\r\n    return parseInt(hash.substr(startPosition, octets), 16);\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { parseHex } from \"../common/parseHex\";\r\n\r\nfunction decToHex(v) {\r\n    v |= 0; // Ensure integer value\r\n    return v < 0 ? \"00\" :\r\n        v < 16 ? \"0\" + v.toString(16) :\r\n        v < 256 ? v.toString(16) :\r\n        \"ff\";\r\n}\r\n\r\nfunction hueToRgb(m1, m2, h) {\r\n    h = h < 0 ? h + 6 : h > 6 ? h - 6 : h;\r\n    return decToHex(255 * (\r\n        h < 1 ? m1 + (m2 - m1) * h :\r\n        h < 3 ? m2 :\r\n        h < 4 ? m1 + (m2 - m1) * (4 - h) :\r\n        m1));\r\n}\r\n\r\n/**\r\n * @param {number} r Red channel [0, 255]\r\n * @param {number} g Green channel [0, 255]\r\n * @param {number} b Blue channel [0, 255]\r\n */\r\nexport function rgb(r, g, b) {\r\n    return \"#\" + decToHex(r) + decToHex(g) + decToHex(b);\r\n}\r\n\r\n/**\r\n * @param {string} color  Color value to parse. Currently hexadecimal strings on the format #rgb[a] and #rrggbb[aa] are supported.\r\n * @returns {string}\r\n */\r\nexport function parseColor(color) {\r\n    if (/^#[0-9a-f]{3,8}$/i.test(color)) {\r\n        let result;\r\n        const colorLength = color.length;\r\n\r\n        if (colorLength < 6) {\r\n            const r = color[1],\r\n                  g = color[2],\r\n                  b = color[3],\r\n                  a = color[4] || \"\";\r\n            result = \"#\" + r + r + g + g + b + b + a + a;\r\n        }\r\n        if (colorLength == 7 || colorLength > 8) {\r\n            result = color;\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Converts a hexadecimal color to a CSS3 compatible color.\r\n * @param {string} hexColor  Color on the format \"#RRGGBB\" or \"#RRGGBBAA\"\r\n * @returns {string}\r\n */\r\nexport function toCss3Color(hexColor) {\r\n    const a = parseHex(hexColor, 7, 2);\r\n    let result;\r\n\r\n    if (isNaN(a)) {\r\n        result = hexColor;\r\n    } else {\r\n        const r = parseHex(hexColor, 1, 2),\r\n            g = parseHex(hexColor, 3, 2),\r\n            b = parseHex(hexColor, 5, 2);\r\n        result = \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + (a / 255).toFixed(2) + \")\";\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Converts an HSL color to a hexadecimal RGB color.\r\n * @param {number} hue  Hue in range [0, 1]\r\n * @param {number} saturation  Saturation in range [0, 1]\r\n * @param {number} lightness  Lightness in range [0, 1]\r\n * @returns {string}\r\n */\r\nexport function hsl(hue, saturation, lightness) {\r\n    // Based on http://www.w3.org/TR/2011/REC-css3-color-20110607/#hsl-color\r\n    let result;\r\n\r\n    if (saturation == 0) {\r\n        const partialHex = decToHex(lightness * 255);\r\n        result = partialHex + partialHex + partialHex;\r\n    }\r\n    else {\r\n        const m2 = lightness <= 0.5 ? lightness * (saturation + 1) : lightness + saturation - lightness * saturation,\r\n              m1 = lightness * 2 - m2;\r\n        result =\r\n            hueToRgb(m1, m2, hue * 6 + 2) +\r\n            hueToRgb(m1, m2, hue * 6) +\r\n            hueToRgb(m1, m2, hue * 6 - 2);\r\n    }\r\n\r\n    return \"#\" + result;\r\n}\r\n\r\n/**\r\n * Converts an HSL color to a hexadecimal RGB color. This function will correct the lightness for the \"dark\" hues\r\n * @param {number} hue  Hue in range [0, 1]\r\n * @param {number} saturation  Saturation in range [0, 1]\r\n * @param {number} lightness  Lightness in range [0, 1]\r\n * @returns {string}\r\n */\r\nexport function correctedHsl(hue, saturation, lightness) {\r\n    // The corrector specifies the perceived middle lightness for each hue\r\n    const correctors = [ 0.55, 0.5, 0.5, 0.46, 0.6, 0.55, 0.55 ],\r\n          corrector = correctors[(hue * 6 + 0.5) | 0];\r\n    \r\n    // Adjust the input lightness relative to the corrector\r\n    lightness = lightness < 0.5 ? lightness * corrector * 2 : corrector + (lightness - 0.5) * (1 - corrector) * 2;\r\n    \r\n    return hsl(hue, saturation, lightness);\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\n// In the future we can replace `GLOBAL` with `globalThis`, but for now use the old school global detection for\r\n// backward compatibility.\r\n\r\nexport const GLOBAL = \r\n    typeof window !== \"undefined\" ? window :\r\n    typeof self !== \"undefined\" ? self :\r\n    typeof global !== \"undefined\" ? global :\r\n    {};\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { parseColor } from \"../renderer/color\";\r\nimport { GLOBAL } from \"./global\";\r\n\r\n/**\r\n * @typedef {Object} ParsedConfiguration\r\n * @property {number} colorSaturation\r\n * @property {number} grayscaleSaturation\r\n * @property {string} backColor\r\n * @property {number} iconPadding\r\n * @property {function(number):number} hue\r\n * @property {function(number):number} colorLightness\r\n * @property {function(number):number} grayscaleLightness\r\n */\r\n\r\nexport const CONFIG_PROPERTIES = {\r\n    GLOBAL: \"jdenticon_config\",\r\n    MODULE: \"config\",\r\n};\r\n\r\nvar rootConfigurationHolder = {};\r\n\r\n/**\r\n * Defines the deprecated `config` property on the root Jdenticon object. When the property is set a warning is \r\n * printed in the console. To minimize bundle size, this is only used in Node bundles.\r\n * @param {!Object} rootObject \r\n */\r\nexport function defineConfigPropertyWithWarn(rootObject) {\r\n    Object.defineProperty(rootObject, CONFIG_PROPERTIES.MODULE, {\r\n        configurable: true,\r\n        get: () => rootConfigurationHolder[CONFIG_PROPERTIES.MODULE],\r\n        set: newConfiguration => {\r\n            rootConfigurationHolder[CONFIG_PROPERTIES.MODULE] = newConfiguration;\r\n            console.warn(\"jdenticon.config is deprecated. Use jdenticon.configure() instead.\");\r\n        },\r\n    });\r\n}\r\n\r\n/**\r\n * Defines the deprecated `config` property on the root Jdenticon object without printing a warning in the console\r\n * when it is being used.\r\n * @param {!Object} rootObject \r\n */\r\nexport function defineConfigProperty(rootObject) {\r\n    rootConfigurationHolder = rootObject;\r\n}\r\n\r\n/**\r\n * Sets a new icon style configuration. The new configuration is not merged with the previous one. * \r\n * @param {Object} newConfiguration - New configuration object.\r\n */\r\nexport function configure(newConfiguration) {\r\n    if (arguments.length) {\r\n        rootConfigurationHolder[CONFIG_PROPERTIES.MODULE] = newConfiguration;\r\n    }\r\n    return rootConfigurationHolder[CONFIG_PROPERTIES.MODULE];\r\n}\r\n\r\n/**\r\n * Gets the normalized current Jdenticon color configuration. Missing fields have default values.\r\n * @param {Object|number|undefined} paddingOrLocalConfig - Configuration passed to the called API method. A\r\n *    local configuration overrides the global configuration in it entirety. This parameter can for backward\r\n *    compatibility also contain a padding value. A padding value only overrides the global padding, not the\r\n *    entire global configuration.\r\n * @param {number} defaultPadding - Padding used if no padding is specified in neither the configuration nor\r\n *    explicitly to the API method.\r\n * @returns {ParsedConfiguration}\r\n */\r\nexport function getConfiguration(paddingOrLocalConfig, defaultPadding) {\r\n    const configObject = \r\n            typeof paddingOrLocalConfig == \"object\" && paddingOrLocalConfig ||\r\n            rootConfigurationHolder[CONFIG_PROPERTIES.MODULE] ||\r\n            GLOBAL[CONFIG_PROPERTIES.GLOBAL] ||\r\n            { },\r\n\r\n        lightnessConfig = configObject[\"lightness\"] || { },\r\n        \r\n        // In versions < 2.1.0 there was no grayscale saturation -\r\n        // saturation was the color saturation.\r\n        saturation = configObject[\"saturation\"] || { },\r\n        colorSaturation = \"color\" in saturation ? saturation[\"color\"] : saturation,\r\n        grayscaleSaturation = saturation[\"grayscale\"],\r\n\r\n        backColor = configObject[\"backColor\"],\r\n        padding = configObject[\"padding\"];\r\n    \r\n    /**\r\n     * Creates a lightness range.\r\n     */\r\n    function lightness(configName, defaultRange) {\r\n        let range = lightnessConfig[configName];\r\n        \r\n        // Check if the lightness range is an array-like object. This way we ensure the\r\n        // array contain two values at the same time.\r\n        if (!(range && range.length > 1)) {\r\n            range = defaultRange;\r\n        }\r\n\r\n        /**\r\n         * Gets a lightness relative the specified value in the specified lightness range.\r\n         */\r\n        return function (value) {\r\n            value = range[0] + value * (range[1] - range[0]);\r\n            return value < 0 ? 0 : value > 1 ? 1 : value;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets a hue allowed by the configured hue restriction,\r\n     * provided the originally computed hue.\r\n     */\r\n    function hueFunction(originalHue) {\r\n        const hueConfig = configObject[\"hues\"];\r\n        let hue;\r\n        \r\n        // Check if 'hues' is an array-like object. This way we also ensure that\r\n        // the array is not empty, which would mean no hue restriction.\r\n        if (hueConfig && hueConfig.length > 0) {\r\n            // originalHue is in the range [0, 1]\r\n            // Multiply with 0.999 to change the range to [0, 1) and then truncate the index.\r\n            hue = hueConfig[0 | (0.999 * originalHue * hueConfig.length)];\r\n        }\r\n\r\n        return typeof hue == \"number\" ?\r\n            \r\n            // A hue was specified. We need to convert the hue from\r\n            // degrees on any turn - e.g. 746° is a perfectly valid hue -\r\n            // to turns in the range [0, 1).\r\n            ((((hue / 360) % 1) + 1) % 1) :\r\n\r\n            // No hue configured => use original hue\r\n            originalHue;\r\n    }\r\n        \r\n    return {\r\n        hue: hueFunction,\r\n        colorSaturation: typeof colorSaturation == \"number\" ? colorSaturation : 0.5,\r\n        grayscaleSaturation: typeof grayscaleSaturation == \"number\" ? grayscaleSaturation : 0,\r\n        colorLightness: lightness(\"color\", [0.4, 0.8]),\r\n        grayscaleLightness: lightness(\"grayscale\", [0.3, 0.9]),\r\n        backColor: parseColor(backColor),\r\n        iconPadding: \r\n            typeof paddingOrLocalConfig == \"number\" ? paddingOrLocalConfig : \r\n            typeof padding == \"number\" ? padding : \r\n            defaultPadding\r\n    }\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\n/**\r\n * Represents a point.\r\n */\r\nexport class Point {\r\n    /**\r\n     * @param {number} x \r\n     * @param {number} y \r\n     */\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { Point } from \"./point\";\r\n\r\n/**\r\n * Translates and rotates a point before being passed on to the canvas context. This was previously done by the canvas context itself, \r\n * but this caused a rendering issue in Chrome on sizes > 256 where the rotation transformation of inverted paths was not done properly.\r\n */\r\nexport class Transform {\r\n    /**\r\n     * @param {number} x The x-coordinate of the upper left corner of the transformed rectangle.\r\n     * @param {number} y The y-coordinate of the upper left corner of the transformed rectangle.\r\n     * @param {number} size The size of the transformed rectangle.\r\n     * @param {number} rotation Rotation specified as 0 = 0 rad, 1 = 0.5π rad, 2 = π rad, 3 = 1.5π rad\r\n     */\r\n    constructor(x, y, size, rotation) {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._size = size;\r\n        this._rotation = rotation;\r\n    }\r\n\r\n    /**\r\n     * Transforms the specified point based on the translation and rotation specification for this Transform.\r\n     * @param {number} x x-coordinate\r\n     * @param {number} y y-coordinate\r\n     * @param {number=} w The width of the transformed rectangle. If greater than 0, this will ensure the returned point is of the upper left corner of the transformed rectangle.\r\n     * @param {number=} h The height of the transformed rectangle. If greater than 0, this will ensure the returned point is of the upper left corner of the transformed rectangle.\r\n     */\r\n    transformIconPoint(x, y, w, h) {\r\n        const right = this._x + this._size,\r\n              bottom = this._y + this._size,\r\n              rotation = this._rotation;\r\n        return rotation === 1 ? new Point(right - y - (h || 0), this._y + x) :\r\n               rotation === 2 ? new Point(right - x - (w || 0), bottom - y - (h || 0)) :\r\n               rotation === 3 ? new Point(this._x + y, bottom - x - (w || 0)) :\r\n               new Point(this._x + x, this._y + y);\r\n    }\r\n}\r\n\r\nexport const NO_TRANSFORM = new Transform(0, 0, 0, 0);\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { NO_TRANSFORM } from \"./transform\";\r\n\r\n/**\r\n * @typedef {import(\"./renderer\").Renderer} Renderer\r\n * @typedef {import(\"./transform\").Transform} Transform\r\n */\r\n\r\n/**\r\n * Provides helper functions for rendering common basic shapes.\r\n */\r\nexport class Graphics {\r\n    /**\r\n     * @param {Renderer} renderer \r\n     */\r\n    constructor(renderer) {\r\n        /**\r\n         * @type {Renderer}\r\n         * @private\r\n         */\r\n        this._renderer = renderer;\r\n\r\n        /**\r\n         * @type {Transform}\r\n         */\r\n        this.currentTransform = NO_TRANSFORM;\r\n    }\r\n\r\n    /**\r\n     * Adds a polygon to the underlying renderer.\r\n     * @param {Array<number>} points The points of the polygon clockwise on the format [ x0, y0, x1, y1, ..., xn, yn ]\r\n     * @param {boolean=} invert Specifies if the polygon will be inverted.\r\n     */\r\n    addPolygon(points, invert) {\r\n        const di = invert ? -2 : 2,\r\n              transformedPoints = [];\r\n        \r\n        for (let i = invert ? points.length - 2 : 0; i < points.length && i >= 0; i += di) {\r\n            transformedPoints.push(this.currentTransform.transformIconPoint(points[i], points[i + 1]));\r\n        }\r\n        \r\n        this._renderer.addPolygon(transformedPoints);\r\n    }\r\n    \r\n    /**\r\n     * Adds a polygon to the underlying renderer.\r\n     * Source: http://stackoverflow.com/a/2173084\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the entire ellipse.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the entire ellipse.\r\n     * @param {number} size The size of the ellipse.\r\n     * @param {boolean=} invert Specifies if the ellipse will be inverted.\r\n     */\r\n    addCircle(x, y, size, invert) {\r\n        const p = this.currentTransform.transformIconPoint(x, y, size, size);\r\n        this._renderer.addCircle(p, size, invert);\r\n    }\r\n\r\n    /**\r\n     * Adds a rectangle to the underlying renderer.\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle.\r\n     * @param {number} w The width of the rectangle.\r\n     * @param {number} h The height of the rectangle.\r\n     * @param {boolean=} invert Specifies if the rectangle will be inverted.\r\n     */\r\n    addRectangle(x, y, w, h, invert) {\r\n        this.addPolygon([\r\n            x, y, \r\n            x + w, y,\r\n            x + w, y + h,\r\n            x, y + h\r\n        ], invert);\r\n    }\r\n\r\n    /**\r\n     * Adds a right triangle to the underlying renderer.\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the triangle.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the triangle.\r\n     * @param {number} w The width of the triangle.\r\n     * @param {number} h The height of the triangle.\r\n     * @param {number} r The rotation of the triangle (clockwise). 0 = right corner of the triangle in the lower left corner of the bounding rectangle.\r\n     * @param {boolean=} invert Specifies if the triangle will be inverted.\r\n     */\r\n    addTriangle(x, y, w, h, r, invert) {\r\n        const points = [\r\n            x + w, y, \r\n            x + w, y + h, \r\n            x, y + h,\r\n            x, y\r\n        ];\r\n        points.splice(((r || 0) % 4) * 2, 2);\r\n        this.addPolygon(points, invert);\r\n    }\r\n\r\n    /**\r\n     * Adds a rhombus to the underlying renderer.\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the rhombus.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the rhombus.\r\n     * @param {number} w The width of the rhombus.\r\n     * @param {number} h The height of the rhombus.\r\n     * @param {boolean=} invert Specifies if the rhombus will be inverted.\r\n     */\r\n    addRhombus(x, y, w, h, invert) {\r\n        this.addPolygon([\r\n            x + w / 2, y,\r\n            x + w, y + h / 2,\r\n            x + w / 2, y + h,\r\n            x, y + h / 2\r\n        ], invert);\r\n    }\r\n}","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\n/**\r\n * @param {number} index\r\n * @param {Graphics} g\r\n * @param {number} cell\r\n * @param {number} positionIndex\r\n * @typedef {import('./graphics').Graphics} Graphics\r\n */\r\nexport function centerShape(index, g, cell, positionIndex) {\r\n    index = index % 14;\r\n\r\n    let k, m, w, h, inner, outer;\r\n\r\n    !index ? (\r\n        k = cell * 0.42,\r\n        g.addPolygon([\r\n            0, 0,\r\n            cell, 0,\r\n            cell, cell - k * 2,\r\n            cell - k, cell,\r\n            0, cell\r\n        ])) :\r\n\r\n    index == 1 ? (\r\n        w = 0 | (cell * 0.5), \r\n        h = 0 | (cell * 0.8),\r\n\r\n        g.addTriangle(cell - w, 0, w, h, 2)) :\r\n\r\n    index == 2 ? (\r\n        w = 0 | (cell / 3),\r\n        g.addRectangle(w, w, cell - w, cell - w)) :\r\n\r\n    index == 3 ? (\r\n        inner = cell * 0.1,\r\n        // Use fixed outer border widths in small icons to ensure the border is drawn\r\n        outer = \r\n            cell < 6 ? 1 :\r\n            cell < 8 ? 2 :\r\n            (0 | (cell * 0.25)),\r\n        \r\n        inner = \r\n            inner > 1 ? (0 | inner) : // large icon => truncate decimals\r\n            inner > 0.5 ? 1 :         // medium size icon => fixed width\r\n            inner,                    // small icon => anti-aliased border\r\n\r\n        g.addRectangle(outer, outer, cell - inner - outer, cell - inner - outer)) :\r\n\r\n    index == 4 ? (\r\n        m = 0 | (cell * 0.15),\r\n        w = 0 | (cell * 0.5),\r\n        g.addCircle(cell - w - m, cell - w - m, w)) :\r\n\r\n    index == 5 ? (\r\n        inner = cell * 0.1,\r\n        outer = inner * 4,\r\n\r\n        // Align edge to nearest pixel in large icons\r\n        outer > 3 && (outer = 0 | outer),\r\n        \r\n        g.addRectangle(0, 0, cell, cell),\r\n        g.addPolygon([\r\n            outer, outer,\r\n            cell - inner, outer,\r\n            outer + (cell - outer - inner) / 2, cell - inner\r\n        ], true)) :\r\n\r\n    index == 6 ? \r\n        g.addPolygon([\r\n            0, 0,\r\n            cell, 0,\r\n            cell, cell * 0.7,\r\n            cell * 0.4, cell * 0.4,\r\n            cell * 0.7, cell,\r\n            0, cell\r\n        ]) :\r\n\r\n    index == 7 ? \r\n        g.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 3) :\r\n\r\n    index == 8 ? (\r\n        g.addRectangle(0, 0, cell, cell / 2),\r\n        g.addRectangle(0, cell / 2, cell / 2, cell / 2),\r\n        g.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 1)) :\r\n\r\n    index == 9 ? (\r\n        inner = cell * 0.14,\r\n        // Use fixed outer border widths in small icons to ensure the border is drawn\r\n        outer = \r\n            cell < 4 ? 1 :\r\n            cell < 6 ? 2 :\r\n            (0 | (cell * 0.35)),\r\n\r\n        inner = \r\n            cell < 8 ? inner : // small icon => anti-aliased border\r\n            (0 | inner),       // large icon => truncate decimals\r\n\r\n        g.addRectangle(0, 0, cell, cell),\r\n        g.addRectangle(outer, outer, cell - outer - inner, cell - outer - inner, true)) :\r\n\r\n    index == 10 ? (\r\n        inner = cell * 0.12,\r\n        outer = inner * 3,\r\n\r\n        g.addRectangle(0, 0, cell, cell),\r\n        g.addCircle(outer, outer, cell - inner - outer, true)) :\r\n\r\n    index == 11 ? \r\n        g.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 3) :\r\n\r\n    index == 12 ? (\r\n        m = cell * 0.25,\r\n        g.addRectangle(0, 0, cell, cell),\r\n        g.addRhombus(m, m, cell - m, cell - m, true)) :\r\n\r\n    // 13\r\n    (\r\n        !positionIndex && (\r\n            m = cell * 0.4, w = cell * 1.2,\r\n            g.addCircle(m, m, w)\r\n        )\r\n    );\r\n}\r\n\r\n/**\r\n * @param {number} index\r\n * @param {Graphics} g\r\n * @param {number} cell\r\n */\r\nexport function outerShape(index, g, cell) {\r\n    index = index % 4;\r\n\r\n    let m;\r\n\r\n    !index ?\r\n        g.addTriangle(0, 0, cell, cell, 0) :\r\n        \r\n    index == 1 ?\r\n        g.addTriangle(0, cell / 2, cell, cell / 2, 0) :\r\n\r\n    index == 2 ?\r\n        g.addRhombus(0, 0, cell, cell) :\r\n\r\n    // 3\r\n    (\r\n        m = cell / 6,\r\n        g.addCircle(m, m, cell - 2 * m)\r\n    );\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { correctedHsl } from \"./color\";\r\n\r\n/**\r\n * Gets a set of identicon color candidates for a specified hue and config.\r\n * @param {number} hue\r\n * @param {import(\"../common/configuration\").ParsedConfiguration} config\r\n */\r\nexport function colorTheme(hue, config) {\r\n    hue = config.hue(hue);\r\n    return [\r\n        // Dark gray\r\n        correctedHsl(hue, config.grayscaleSaturation, config.grayscaleLightness(0)),\r\n        // Mid color\r\n        correctedHsl(hue, config.colorSaturation, config.colorLightness(0.5)),\r\n        // Light gray\r\n        correctedHsl(hue, config.grayscaleSaturation, config.grayscaleLightness(1)),\r\n        // Light color\r\n        correctedHsl(hue, config.colorSaturation, config.colorLightness(1)),\r\n        // Dark color\r\n        correctedHsl(hue, config.colorSaturation, config.colorLightness(0))\r\n    ];\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { Transform } from \"./transform\";\r\nimport { Graphics } from \"./graphics\";\r\nimport { centerShape, outerShape } from \"./shapes\";\r\nimport { colorTheme } from \"./colorTheme\";\r\nimport { parseHex } from \"../common/parseHex\";\r\nimport { getConfiguration } from \"../common/configuration\";\r\n     \r\n/**\r\n * Draws an identicon to a specified renderer.\r\n * @param {import('./renderer').Renderer} renderer\r\n * @param {string} hash\r\n * @param {Object|number=} config\r\n */\r\nexport function iconGenerator(renderer, hash, config) {\r\n    const parsedConfig = getConfiguration(config, 0.08);\r\n\r\n    // Set background color\r\n    if (parsedConfig.backColor) {\r\n        renderer.setBackground(parsedConfig.backColor);\r\n    }\r\n    \r\n    // Calculate padding and round to nearest integer\r\n    let size = renderer.iconSize;\r\n    const padding = (0.5 + size * parsedConfig.iconPadding) | 0;\r\n    size -= padding * 2;\r\n    \r\n    const graphics = new Graphics(renderer);\r\n    \r\n    // Calculate cell size and ensure it is an integer\r\n    const cell = 0 | (size / 4);\r\n    \r\n    // Since the cell size is integer based, the actual icon will be slightly smaller than specified => center icon\r\n    const x = 0 | (padding + size / 2 - cell * 2);\r\n    const y = 0 | (padding + size / 2 - cell * 2);\r\n\r\n    function renderShape(colorIndex, shapes, index, rotationIndex, positions) {\r\n        const shapeIndex = parseHex(hash, index, 1);\r\n        let r = rotationIndex ? parseHex(hash, rotationIndex, 1) : 0;\r\n        \r\n        renderer.beginShape(availableColors[selectedColorIndexes[colorIndex]]);\r\n        \r\n        for (let i = 0; i < positions.length; i++) {\r\n            graphics.currentTransform = new Transform(x + positions[i][0] * cell, y + positions[i][1] * cell, cell, r++ % 4);\r\n            shapes(shapeIndex, graphics, cell, i);\r\n        }\r\n        \r\n        renderer.endShape();\r\n    }\r\n\r\n    // AVAILABLE COLORS\r\n    const hue = parseHex(hash, -7) / 0xfffffff,\r\n    \r\n          // Available colors for this icon\r\n          availableColors = colorTheme(hue, parsedConfig),\r\n\r\n          // The index of the selected colors\r\n          selectedColorIndexes = [];\r\n\r\n    let index;\r\n\r\n    function isDuplicate(values) {\r\n        if (values.indexOf(index) >= 0) {\r\n            for (let i = 0; i < values.length; i++) {\r\n                if (selectedColorIndexes.indexOf(values[i]) >= 0) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n        index = parseHex(hash, 8 + i, 1) % availableColors.length;\r\n        if (isDuplicate([0, 4]) || // Disallow dark gray and dark color combo\r\n            isDuplicate([2, 3])) { // Disallow light gray and light color combo\r\n            index = 1;\r\n        }\r\n        selectedColorIndexes.push(index);\r\n    }\r\n\r\n    // ACTUAL RENDERING\r\n    // Sides\r\n    renderShape(0, outerShape, 2, 3, [[1, 0], [2, 0], [2, 3], [1, 3], [0, 1], [3, 1], [3, 2], [0, 2]]);\r\n    // Corners\r\n    renderShape(1, outerShape, 4, 5, [[0, 0], [3, 0], [3, 3], [0, 3]]);\r\n    // Center\r\n    renderShape(2, centerShape, 1, null, [[1, 1], [2, 1], [2, 2], [1, 2]]);\r\n    \r\n    renderer.finish();\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\n/**\r\n * Computes a SHA1 hash for any value and returns it as a hexadecimal string.\r\n * \r\n * This function is optimized for minimal code size and rather short messages.\r\n * \r\n * @param {string} message \r\n */\r\nexport function sha1(message) {\r\n    const HASH_SIZE_HALF_BYTES = 40;\r\n    const BLOCK_SIZE_WORDS = 16;\r\n\r\n    // Variables\r\n    // `var` is used to be able to minimize the number of `var` keywords.\r\n    var i = 0,\r\n        f = 0,\r\n    \r\n        // Use `encodeURI` to UTF8 encode the message without any additional libraries\r\n        // We could use `unescape` + `encodeURI` to minimize the code, but that would be slightly risky\r\n        // since `unescape` is deprecated.\r\n        urlEncodedMessage = encodeURI(message) + \"%80\", // trailing '1' bit padding\r\n        \r\n        // This can be changed to a preallocated Uint32Array array for greater performance and larger code size\r\n        data = [],\r\n        dataSize,\r\n        \r\n        hashBuffer = [],\r\n\r\n        a = 0x67452301,\r\n        b = 0xefcdab89,\r\n        c = ~a,\r\n        d = ~b,\r\n        e = 0xc3d2e1f0,\r\n        hash = [a, b, c, d, e],\r\n\r\n        blockStartIndex = 0,\r\n        hexHash = \"\";\r\n\r\n    /**\r\n     * Rotates the value a specified number of bits to the left.\r\n     * @param {number} value  Value to rotate\r\n     * @param {number} shift  Bit count to shift.\r\n     */\r\n    function rotl(value, shift) {\r\n        return (value << shift) | (value >>> (32 - shift));\r\n    }\r\n\r\n    // Message data\r\n    for ( ; i < urlEncodedMessage.length; f++) {\r\n        data[f >> 2] = data[f >> 2] |\r\n            (\r\n                (\r\n                    urlEncodedMessage[i] == \"%\"\r\n                        // Percent encoded byte\r\n                        ? parseInt(urlEncodedMessage.substring(i + 1, i += 3), 16)\r\n                        // Unencoded byte\r\n                        : urlEncodedMessage.charCodeAt(i++)\r\n                )\r\n\r\n                // Read bytes in reverse order (big endian words)\r\n                << ((3 - (f & 3)) * 8)\r\n            );\r\n    }\r\n\r\n    // f is now the length of the utf8 encoded message\r\n    // 7 = 8 bytes (64 bit) for message size, -1 to round down\r\n    // >> 6 = integer division with block size\r\n    dataSize = (((f + 7) >> 6) + 1) * BLOCK_SIZE_WORDS;\r\n\r\n    // Message size in bits.\r\n    // SHA1 uses a 64 bit integer to represent the size, but since we only support short messages only the least\r\n    // significant 32 bits are set. -8 is for the '1' bit padding byte.\r\n    data[dataSize - 1] = f * 8 - 8;\r\n    \r\n    // Compute hash\r\n    for ( ; blockStartIndex < dataSize; blockStartIndex += BLOCK_SIZE_WORDS) {\r\n        for (i = 0; i < 80; i++) {\r\n            f = rotl(a, 5) + e + (\r\n                    // Ch\r\n                    i < 20 ? ((b & c) ^ ((~b) & d)) + 0x5a827999 :\r\n                    \r\n                    // Parity\r\n                    i < 40 ? (b ^ c ^ d) + 0x6ed9eba1 :\r\n                    \r\n                    // Maj\r\n                    i < 60 ? ((b & c) ^ (b & d) ^ (c & d)) + 0x8f1bbcdc :\r\n                    \r\n                    // Parity\r\n                    (b ^ c ^ d) + 0xca62c1d6\r\n                ) + ( \r\n                    hashBuffer[i] = i < BLOCK_SIZE_WORDS\r\n                        // Bitwise OR is used to coerse `undefined` to 0\r\n                        ? (data[blockStartIndex + i] | 0)\r\n                        : rotl(hashBuffer[i - 3] ^ hashBuffer[i - 8] ^ hashBuffer[i - 14] ^ hashBuffer[i - 16], 1)\r\n                );\r\n\r\n            e = d;\r\n            d = c;\r\n            c = rotl(b, 30);\r\n            b = a;\r\n            a = f;\r\n        }\r\n\r\n        hash[0] = a = ((hash[0] + a) | 0);\r\n        hash[1] = b = ((hash[1] + b) | 0);\r\n        hash[2] = c = ((hash[2] + c) | 0);\r\n        hash[3] = d = ((hash[3] + d) | 0);\r\n        hash[4] = e = ((hash[4] + e) | 0);\r\n    }\r\n\r\n    // Format hex hash\r\n    for (i = 0; i < HASH_SIZE_HALF_BYTES; i++) {\r\n        hexHash += (\r\n            (\r\n                // Get word (2^3 half-bytes per word)\r\n                hash[i >> 3] >>>\r\n\r\n                // Append half-bytes in reverse order\r\n                ((7 - (i & 7)) * 4)\r\n            ) \r\n            // Clamp to half-byte\r\n            & 0xf\r\n        ).toString(16);\r\n    }\r\n\r\n    return hexHash;\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { sha1 } from \"./sha1\";\r\n\r\n/**\r\n * Inputs a value that might be a valid hash string for Jdenticon and returns it \r\n * if it is determined valid, otherwise a falsy value is returned.\r\n */\r\nexport function isValidHash(hashCandidate) {\r\n    return /^[0-9a-f]{11,}$/i.test(hashCandidate) && hashCandidate;\r\n}\r\n\r\n/**\r\n * Computes a hash for the specified value. Currently SHA1 is used. This function\r\n * always returns a valid hash.\r\n */\r\nexport function computeHash(value) {\r\n    return sha1(value == null ? \"\" : \"\" + value);\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { toCss3Color } from \"../color\";\r\n\r\n/**\r\n * @typedef {import(\"../renderer\").Renderer} Renderer\r\n * @typedef {import('../point').Point} Point\r\n */\r\n\r\n/**\r\n * Renderer redirecting drawing commands to a canvas context.\r\n * @implements {Renderer}\r\n */\r\nexport class CanvasRenderer {\r\n    /**\r\n     * @param {number=} iconSize\r\n     */\r\n    constructor(ctx, iconSize) {\r\n        const canvas = ctx.canvas; \r\n        const width = canvas.width;\r\n        const height = canvas.height;\r\n        \r\n        ctx.save();\r\n        \r\n        if (!iconSize) {\r\n            iconSize = Math.min(width, height);\r\n            \r\n            ctx.translate(\r\n                ((width - iconSize) / 2) | 0,\r\n                ((height - iconSize) / 2) | 0);\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        this._ctx = ctx;\r\n        this.iconSize = iconSize;\r\n        \r\n        ctx.clearRect(0, 0, iconSize, iconSize);\r\n    }\r\n\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb[aa].\r\n     */\r\n    setBackground(fillColor) {\r\n        const ctx = this._ctx;\r\n        const iconSize = this.iconSize;\r\n\r\n        ctx.fillStyle = toCss3Color(fillColor);\r\n        ctx.fillRect(0, 0, iconSize, iconSize);\r\n    }\r\n\r\n    /**\r\n     * Marks the beginning of a new shape of the specified color. Should be ended with a call to endShape.\r\n     * @param {string} fillColor Fill color on format #rrggbb[aa].\r\n     */\r\n    beginShape(fillColor) {\r\n        const ctx = this._ctx;\r\n        ctx.fillStyle = toCss3Color(fillColor);\r\n        ctx.beginPath();\r\n    }\r\n\r\n    /**\r\n     * Marks the end of the currently drawn shape. This causes the queued paths to be rendered on the canvas.\r\n     */\r\n    endShape() {\r\n        this._ctx.fill();\r\n    }\r\n\r\n    /**\r\n     * Adds a polygon to the rendering queue.\r\n     * @param points An array of Point objects.\r\n     */\r\n    addPolygon(points) {\r\n        const ctx = this._ctx;\r\n        ctx.moveTo(points[0].x, points[0].y);\r\n        for (let i = 1; i < points.length; i++) {\r\n            ctx.lineTo(points[i].x, points[i].y);\r\n        }\r\n        ctx.closePath();\r\n    }\r\n\r\n    /**\r\n     * Adds a circle to the rendering queue.\r\n     * @param {Point} point The upper left corner of the circle bounding box.\r\n     * @param {number} diameter The diameter of the circle.\r\n     * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n     */\r\n    addCircle(point, diameter, counterClockwise) {\r\n        const ctx = this._ctx,\r\n              radius = diameter / 2;\r\n        ctx.moveTo(point.x + radius, point.y + radius);\r\n        ctx.arc(point.x + radius, point.y + radius, radius, 0, Math.PI * 2, counterClockwise);\r\n        ctx.closePath();\r\n    }\r\n\r\n    /**\r\n     * Called when the icon has been completely drawn.\r\n     */\r\n    finish() {\r\n        this._ctx.restore();\r\n    }\r\n}\r\n","import { iconGenerator } from \"../renderer/iconGenerator\";\r\nimport { isValidHash, computeHash } from \"../common/hashUtils\";\r\nimport { CanvasRenderer } from \"../renderer/canvas/canvasRenderer\";\r\n\r\n/**\r\n * Draws an identicon to a context.\r\n * @param {CanvasRenderingContext2D} ctx - Canvas context on which the icon will be drawn at location (0, 0).\r\n * @param {*} hashOrValue - A hexadecimal hash string or any value that will be hashed by Jdenticon.\r\n * @param {number} size - Icon size in pixels.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compatibility a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nexport function drawIcon(ctx, hashOrValue, size, config) {\r\n    if (!ctx) {\r\n        throw new Error(\"No canvas specified.\");\r\n    }\r\n    \r\n    iconGenerator(new CanvasRenderer(ctx, size), \r\n        isValidHash(hashOrValue) || computeHash(hashOrValue), \r\n        config);\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\n/**\r\n * Prepares a measure to be used as a measure in an SVG path, by\r\n * rounding the measure to a single decimal. This reduces the file\r\n * size of the generated SVG with more than 50% in some cases.\r\n */\r\nfunction svgValue(value) {\r\n    return ((value * 10 + 0.5) | 0) / 10;\r\n}\r\n\r\n/**\r\n * Represents an SVG path element.\r\n */\r\nexport class SvgPath {\r\n    constructor() {\r\n        /**\r\n         * This property holds the data string (path.d) of the SVG path.\r\n         * @type {string}\r\n         */\r\n        this.dataString = \"\";\r\n    }\r\n\r\n    /**\r\n     * Adds a polygon with the current fill color to the SVG path.\r\n     * @param points An array of Point objects.\r\n     */\r\n    addPolygon(points) {\r\n        let dataString = \"\";\r\n        for (let i = 0; i < points.length; i++) {\r\n            dataString += (i ? \"L\" : \"M\") + svgValue(points[i].x) + \" \" + svgValue(points[i].y);\r\n        }\r\n        this.dataString += dataString + \"Z\";\r\n    }\r\n\r\n    /**\r\n     * Adds a circle with the current fill color to the SVG path.\r\n     * @param {import('../point').Point} point The upper left corner of the circle bounding box.\r\n     * @param {number} diameter The diameter of the circle.\r\n     * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n     */\r\n    addCircle(point, diameter, counterClockwise) {\r\n        const sweepFlag = counterClockwise ? 0 : 1,\r\n              svgRadius = svgValue(diameter / 2),\r\n              svgDiameter = svgValue(diameter),\r\n              svgArc = \"a\" + svgRadius + \",\" + svgRadius + \" 0 1,\" + sweepFlag + \" \";\r\n            \r\n        this.dataString += \r\n            \"M\" + svgValue(point.x) + \" \" + svgValue(point.y + diameter / 2) +\r\n            svgArc + svgDiameter + \",0\" + \r\n            svgArc + (-svgDiameter) + \",0\";\r\n    }\r\n}\r\n\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { SvgPath } from \"./svgPath\";\r\nimport { parseHex } from \"../../common/parseHex\";\r\n\r\n/**\r\n * @typedef {import(\"../point\").Point} Point\r\n * @typedef {import(\"../renderer\").Renderer} Renderer\r\n * @typedef {import(\"./svgElement\").SvgElement} SvgElement\r\n * @typedef {import(\"./svgWriter\").SvgWriter} SvgWriter\r\n */\r\n\r\n/**\r\n * Renderer producing SVG output.\r\n * @implements {Renderer}\r\n */\r\nexport class SvgRenderer {\r\n    /**\r\n     * @param {SvgElement|SvgWriter} target \r\n     */\r\n    constructor(target) {\r\n        /**\r\n         * @type {SvgPath}\r\n         * @private\r\n         */\r\n        this._path;\r\n\r\n        /**\r\n         * @type {Object.<string,SvgPath>}\r\n         * @private\r\n         */\r\n        this._pathsByColor = { };\r\n\r\n        /**\r\n         * @type {SvgElement|SvgWriter}\r\n         * @private\r\n         */\r\n        this._target = target;\r\n\r\n        /**\r\n         * @type {number}\r\n         */\r\n        this.iconSize = target.iconSize;\r\n    }\r\n\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb[aa].\r\n     */\r\n    setBackground(fillColor) {\r\n        const match = /^(#......)(..)?/.exec(fillColor),\r\n              opacity = match[2] ? parseHex(match[2], 0) / 255 : 1;\r\n        this._target.setBackground(match[1], opacity);\r\n    }\r\n\r\n    /**\r\n     * Marks the beginning of a new shape of the specified color. Should be ended with a call to endShape.\r\n     * @param {string} color Fill color on format #xxxxxx.\r\n     */\r\n    beginShape(color) {\r\n        this._path = this._pathsByColor[color] || (this._pathsByColor[color] = new SvgPath());\r\n    }\r\n\r\n    /**\r\n     * Marks the end of the currently drawn shape.\r\n     */\r\n    endShape() { }\r\n\r\n    /**\r\n     * Adds a polygon with the current fill color to the SVG.\r\n     * @param points An array of Point objects.\r\n     */\r\n    addPolygon(points) {\r\n        this._path.addPolygon(points);\r\n    }\r\n\r\n    /**\r\n     * Adds a circle with the current fill color to the SVG.\r\n     * @param {Point} point The upper left corner of the circle bounding box.\r\n     * @param {number} diameter The diameter of the circle.\r\n     * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n     */\r\n    addCircle(point, diameter, counterClockwise) {\r\n        this._path.addCircle(point, diameter, counterClockwise);\r\n    }\r\n\r\n    /**\r\n     * Called when the icon has been completely drawn.\r\n     */\r\n    finish() { \r\n        const pathsByColor = this._pathsByColor;\r\n        for (let color in pathsByColor) {\r\n            // hasOwnProperty cannot be shadowed in pathsByColor\r\n            // eslint-disable-next-line no-prototype-builtins\r\n            if (pathsByColor.hasOwnProperty(color)) {\r\n                this._target.appendPath(color, pathsByColor[color].dataString);\r\n            }\r\n        }\r\n    }\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nexport const SVG_CONSTANTS = {\r\n    XMLNS: \"http://www.w3.org/2000/svg\",\r\n    WIDTH: \"width\",\r\n    HEIGHT: \"height\",\r\n}","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { SVG_CONSTANTS } from \"./constants\";\r\n\r\n/**\r\n * Renderer producing SVG output.\r\n */\r\nexport class SvgWriter {\r\n    /**\r\n     * @param {number} iconSize - Icon width and height in pixels.\r\n     */\r\n    constructor(iconSize) {\r\n        /**\r\n         * @type {number}\r\n         */\r\n        this.iconSize = iconSize;\r\n\r\n        /**\r\n         * @type {string}\r\n         * @private\r\n         */\r\n        this._s =\r\n            '<svg xmlns=\"' + SVG_CONSTANTS.XMLNS + '\" width=\"' + \r\n            iconSize + '\" height=\"' + iconSize + '\" viewBox=\"0 0 ' + \r\n            iconSize + ' ' + iconSize + '\">';\r\n    }\r\n\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb.\r\n     * @param {number} opacity  Opacity in the range [0.0, 1.0].\r\n     */\r\n    setBackground(fillColor, opacity) {\r\n        if (opacity) {\r\n            this._s += '<rect width=\"100%\" height=\"100%\" fill=\"' + \r\n                fillColor + '\" opacity=\"' + opacity.toFixed(2) + '\"/>';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes a path to the SVG string.\r\n     * @param {string} color Fill color on format #rrggbb.\r\n     * @param {string} dataString The SVG path data string.\r\n     */\r\n    appendPath(color, dataString) {\r\n        this._s += '<path fill=\"' + color + '\" d=\"' + dataString + '\"/>';\r\n    }\r\n\r\n    /**\r\n     * Gets the rendered image as an SVG string.\r\n     */\r\n    toString() {\r\n        return this._s + \"</svg>\";\r\n    }\r\n}\r\n","import { iconGenerator } from \"../renderer/iconGenerator\";\r\nimport { isValidHash, computeHash } from \"../common/hashUtils\";\r\nimport { SvgRenderer } from \"../renderer/svg/svgRenderer\";\r\nimport { SvgWriter } from \"../renderer/svg/svgWriter\";\r\n\r\n/**\r\n * Draws an identicon as an SVG string.\r\n * @param {*} hashOrValue - A hexadecimal hash string or any value that will be hashed by Jdenticon.\r\n * @param {number} size - Icon size in pixels.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compatibility a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n * @returns {string} SVG string\r\n */\r\nexport function toSvg(hashOrValue, size, config) {\r\n    const writer = new SvgWriter(size);\r\n    iconGenerator(new SvgRenderer(writer), \r\n        isValidHash(hashOrValue) || computeHash(hashOrValue),\r\n        config);\r\n    return writer.toString();\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nexport const ICON_TYPE_SVG = 1;\r\n\r\nexport const ICON_TYPE_CANVAS = 2;\r\n\r\nexport const ATTRIBUTES = {\r\n    HASH: \"data-jdenticon-hash\",\r\n    VALUE: \"data-jdenticon-value\"\r\n};\r\n\r\nexport const ICON_SELECTOR = \"[\" + ATTRIBUTES.HASH +\"],[\" + ATTRIBUTES.VALUE +\"]\";\r\n\r\nexport const documentQuerySelectorAll = /** @type {!Function} */ (\r\n    typeof document !== \"undefined\" && document.querySelectorAll.bind(document));\r\n\r\nexport function getIdenticonType(el) {\r\n    if (el) {\r\n        const tagName = el[\"tagName\"];\r\n\r\n        if (/^svg$/i.test(tagName)) {\r\n            return ICON_TYPE_SVG;\r\n        }\r\n\r\n        if (/^canvas$/i.test(tagName) && \"getContext\" in el) {\r\n            return ICON_TYPE_CANVAS;\r\n        }\r\n    }\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { SVG_CONSTANTS } from \"./constants\";\r\n\r\n/**\r\n * Creates a new element and adds it to the specified parent.\r\n * @param {Element} parentNode\r\n * @param {string} name\r\n * @param {...(string|number)} keyValuePairs\r\n */\r\nfunction SvgElement_append(parentNode, name, ...keyValuePairs) {\r\n    const el = document.createElementNS(SVG_CONSTANTS.XMLNS, name);\r\n    \r\n    for (let i = 0; i + 1 < keyValuePairs.length; i += 2) {\r\n        el.setAttribute(\r\n            /** @type {string} */(keyValuePairs[i]),\r\n            /** @type {string} */(keyValuePairs[i + 1]),\r\n            );\r\n    }\r\n\r\n    parentNode.appendChild(el);\r\n}\r\n\r\n\r\n/**\r\n * Renderer producing SVG output.\r\n */\r\nexport class SvgElement {\r\n    /**\r\n     * @param {Element} element - Target element\r\n     */\r\n    constructor(element) {\r\n        // Don't use the clientWidth and clientHeight properties on SVG elements\r\n        // since Firefox won't serve a proper value of these properties on SVG\r\n        // elements (https://bugzilla.mozilla.org/show_bug.cgi?id=874811)\r\n        // Instead use 100px as a hardcoded size (the svg viewBox will rescale \r\n        // the icon to the correct dimensions)\r\n        const iconSize = this.iconSize = Math.min(\r\n            (Number(element.getAttribute(SVG_CONSTANTS.WIDTH)) || 100),\r\n            (Number(element.getAttribute(SVG_CONSTANTS.HEIGHT)) || 100)\r\n            );\r\n        \r\n        /**\r\n         * @type {Element}\r\n         * @private\r\n         */\r\n        this._el = element;\r\n        \r\n        // Clear current SVG child elements\r\n        while (element.firstChild) {\r\n            element.removeChild(element.firstChild);\r\n        }\r\n        \r\n        // Set viewBox attribute to ensure the svg scales nicely.\r\n        element.setAttribute(\"viewBox\", \"0 0 \" + iconSize + \" \" + iconSize);\r\n        element.setAttribute(\"preserveAspectRatio\", \"xMidYMid meet\");\r\n    }\r\n\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb.\r\n     * @param {number} opacity  Opacity in the range [0.0, 1.0].\r\n     */\r\n    setBackground(fillColor, opacity) {\r\n        if (opacity) {\r\n            SvgElement_append(this._el, \"rect\",\r\n                SVG_CONSTANTS.WIDTH, \"100%\",\r\n                SVG_CONSTANTS.HEIGHT, \"100%\",\r\n                \"fill\", fillColor,\r\n                \"opacity\", opacity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a path to the SVG element.\r\n     * @param {string} color Fill color on format #xxxxxx.\r\n     * @param {string} dataString The SVG path data string.\r\n     */\r\n    appendPath(color, dataString) {\r\n        SvgElement_append(this._el, \"path\",\r\n            \"fill\", color,\r\n            \"d\", dataString);\r\n    }\r\n}\r\n","/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\nimport { iconGenerator } from \"../renderer/iconGenerator\";\r\nimport { isValidHash, computeHash } from \"../common/hashUtils\";\r\nimport { ATTRIBUTES, ICON_SELECTOR, documentQuerySelectorAll } from \"../common/dom\";\r\nimport { SvgRenderer } from \"../renderer/svg/svgRenderer\";\r\nimport { SvgElement } from \"../renderer/svg/svgElement\";\r\nimport { CanvasRenderer } from \"../renderer/canvas/canvasRenderer\";\r\nimport { ICON_TYPE_CANVAS, ICON_TYPE_SVG, getIdenticonType } from \"../common/dom\";\r\n\r\n\r\n/**\r\n * Updates all canvas elements with the `data-jdenticon-hash` or `data-jdenticon-value` attribute.\r\n */\r\nexport function updateAll() {\r\n    if (documentQuerySelectorAll) {\r\n        update(ICON_SELECTOR);\r\n    }\r\n}\r\n\r\n/**\r\n * Updates the identicon in the specified `<canvas>` or `<svg>` elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<svg>` or `<canvas>`, or a CSS selector to such an element.\r\n * @param {*=} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nexport function update(el, hashOrValue, config) {\r\n    renderDomElement(el, hashOrValue, config, function (el, iconType) {\r\n        if (iconType) {\r\n            return iconType == ICON_TYPE_SVG ? \r\n                new SvgRenderer(new SvgElement(el)) : \r\n                new CanvasRenderer(/** @type {HTMLCanvasElement} */(el).getContext(\"2d\"));\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the identicon in the specified `<canvas>` elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<canvas>`, or a CSS selector to such an element.\r\n * @param {*=} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nexport function updateCanvas(el, hashOrValue, config) {\r\n    renderDomElement(el, hashOrValue, config, function (el, iconType) {\r\n        if (iconType == ICON_TYPE_CANVAS) {\r\n            return new CanvasRenderer(/** @type {HTMLCanvasElement} */(el).getContext(\"2d\"));\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the identicon in the specified `<svg>` elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<svg>`, or a CSS selector to such an element.\r\n * @param {*=} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nexport function updateSvg(el, hashOrValue, config) {\r\n    renderDomElement(el, hashOrValue, config, function (el, iconType) {\r\n        if (iconType == ICON_TYPE_SVG) {\r\n            return new SvgRenderer(new SvgElement(el));\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the identicon in the specified canvas or svg elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<svg>` or `<canvas>`, or a CSS selector to such an element.\r\n * @param {*} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number|undefined} config\r\n * @param {function(Element,number):import(\"../renderer/renderer\").Renderer} rendererFactory - Factory function for creating an icon renderer.\r\n */\r\nfunction renderDomElement(el, hashOrValue, config, rendererFactory) {\r\n    if (typeof el === \"string\") {\r\n        if (documentQuerySelectorAll) {\r\n            const elements = documentQuerySelectorAll(el);\r\n            for (let i = 0; i < elements.length; i++) {\r\n                renderDomElement(elements[i], hashOrValue, config, rendererFactory);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    \r\n    // Hash selection. The result from getValidHash or computeHash is \r\n    // accepted as a valid hash.\r\n    const hash = \r\n        // 1. Explicit valid hash\r\n        isValidHash(hashOrValue) ||\r\n        \r\n        // 2. Explicit value (`!= null` catches both null and undefined)\r\n        hashOrValue != null && computeHash(hashOrValue) ||\r\n        \r\n        // 3. `data-jdenticon-hash` attribute\r\n        isValidHash(el.getAttribute(ATTRIBUTES.HASH)) ||\r\n        \r\n        // 4. `data-jdenticon-value` attribute. \r\n        // We want to treat an empty attribute as an empty value. \r\n        // Some browsers return empty string even if the attribute \r\n        // is not specified, so use hasAttribute to determine if \r\n        // the attribute is specified.\r\n        el.hasAttribute(ATTRIBUTES.VALUE) && computeHash(el.getAttribute(ATTRIBUTES.VALUE));\r\n    \r\n    if (!hash) {\r\n        // No hash specified. Don't render an icon.\r\n        return;\r\n    }\r\n    \r\n    const renderer = rendererFactory(el, getIdenticonType(el));\r\n    if (renderer) {\r\n        // Draw icon\r\n        iconGenerator(renderer, hash, config);\r\n    }\r\n}\r\n","﻿/**\r\n * Jdenticon\r\n * https://github.com/dmester/jdenticon\r\n * Copyright © Daniel Mester Pirttijärvi\r\n */\r\n\r\n// This file is compiled to dist/jdenticon-module.mjs\r\n\r\nexport { configure } from \"./apis/configure\";\r\nexport { drawIcon } from \"./apis/drawIcon\";\r\nexport { toSvg } from \"./apis/toSvg\";\r\nexport { update, updateCanvas, updateSvg } from \"./apis/update\";\r\n\r\n/**\r\n * Specifies the version of the Jdenticon package in use.\r\n * @type {string}\r\n */\r\nexport const version = \"#version#\";\r\n\r\n/**\r\n * Specifies which bundle of Jdenticon that is used.\r\n * @type {string}\r\n */\r\nexport const bundle = \"browser-esm\";\r\n"]},"metadata":{},"sourceType":"module"}