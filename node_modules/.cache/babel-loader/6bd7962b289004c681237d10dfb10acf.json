{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { userActions } from './store/constants/user';\nimport { logout } from './store/actions/user';\nimport { useTypedSelector } from './hooks/useTypedSelector';\nimport { getWeb3Instance, isMetaMaskInstalled } from './services/web3';\nimport { withRouter } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { adminRoute, checkIsAdminRoute, checkIsInvestorRoute, publicRoute } from \"./utils\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nBigNumber.config({\n  EXPONENTIAL_AT: 50\n});\nBigNumber.config({\n  ROUNDING_MODE: BigNumber.ROUND_FLOOR\n});\nconst NETWORK_ID = process.env.REACT_APP_NETWORK_ID;\nconst BACK_URL_NETWORK_CHANGE = 'BACK_URL_NETWORK_CHANGE';\nconst BACK_URL_NETWORK_CHANGE_OWNER = 'BACK_URL_NETWORK_CHANGE_OWNER';\n\nconst AppContainer = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    data: loginUser\n  } = useTypedSelector(state => state.user);\n  const {\n    data: loginInvestor\n  } = useTypedSelector(state => state.investor);\n  const web3Instance = getWeb3Instance();\n\n  const onLoginWithoutLoginPage = async () => {\n    if (isMetaMaskInstalled()) {\n      const {\n        history\n      } = props;\n      const {\n        ethereum\n      } = window;\n      ethereum.request({\n        method: 'net_version'\n      }).then(currentNetworkId => {\n        if (currentNetworkId && currentNetworkId !== NETWORK_ID) {\n          if (history) {\n            const pathName = history.location.pathname;\n\n            if (pathName !== '/network-change' && pathName !== '/dashboard/network-change') {\n              console.log('NET_VERSION:', currentNetworkId);\n\n              if (checkIsAdminRoute(pathName)) {\n                localStorage.setItem(BACK_URL_NETWORK_CHANGE_OWNER, pathName);\n                history.push('/dashboard/network-change');\n              } else if (checkIsInvestorRoute(pathName)) {\n                localStorage.setItem(BACK_URL_NETWORK_CHANGE, pathName);\n                history.push('/network-change');\n              }\n            }\n          }\n\n          return;\n        }\n      });\n      web3Instance === null || web3Instance === void 0 ? void 0 : web3Instance.eth.getAccounts().then(accounts => {\n        console.log('NO_ACCOUNT');\n\n        if (accounts.length === 0) {\n          dispatch({\n            type: userActions.USER_CONNECT_WALLET_LOCK\n          });\n          const pathName = history.location.pathname;\n          console.log('dispatch(logout());', pathName);\n\n          if (pathName !== '/network-change' && pathName !== '/dashboard/network-change') {\n            console.log('Mismatch route: /network-change');\n            let isInvestor = false;\n\n            if (loginUser && checkIsAdminRoute(history.location.pathname)) {\n              isInvestor = false;\n              dispatch(logout(isInvestor));\n            } else if (loginInvestor && checkIsInvestorRoute(history.location.pathname)) {\n              isInvestor = true;\n              dispatch(logout(isInvestor));\n            }\n\n            setTimeout(() => {\n              // Switch redirect\n              if (checkIsAdminRoute(history.location.pathname)) {\n                history.push(adminRoute('/login'));\n              } else if (checkIsInvestorRoute(history.location.pathname)) {\n                history.push(publicRoute('/login'));\n              }\n            }, 1500);\n          }\n        }\n      });\n    }\n  };\n\n  useEffect(() => {// onLoginWithoutLoginPage();\n  }, [props.location.pathname]);\n  useEffect(() => {\n    const windowObj = window;\n    const {\n      ethereum\n    } = windowObj;\n\n    if (ethereum) {\n      /* web3Instance?.eth.getAccounts().then(accounts => { */\n\n      /*     accounts[0] && dispatch({ */\n\n      /*       type: userActions.USER_CONNECT_WALLET_SUCCESS, payload: accounts[0] */\n\n      /*     }); */\n\n      /* }); */\n      ethereum.on('accountsChanged', function (accounts) {// console.log('accountsChanged');\n        // const account = accounts.length ? accounts[0] : '';\n        //\n        // if (account) {\n        //   if (loginUser && account !== loginUser.wallet_address) {\n        //     dispatch(logout());\n        //   }\n        //   if (loginInvestor && account !== loginInvestor.wallet_address) {\n        //     dispatch(logout(true));\n        //   } else {\n        //     dispatch({\n        //       type: userActions.USER_CONNECT_WALLET_SUCCESS,\n        //       payload: account,\n        //     });\n        //   }\n        // } else {\n        //   dispatch(logout());\n        //   dispatch({\n        //     type: userActions.USER_CONNECT_WALLET_LOCK,\n        //   });\n        // }\n      });\n      ethereum.on('chainChanged', newNetworkId => {// console.log('chainChanged');\n        // const { history } = props;\n        // const pathName = history.location.pathname;\n        // let backUrlKey = checkIsAdminRoute(pathName) ? BACK_URL_NETWORK_CHANGE_OWNER : BACK_URL_NETWORK_CHANGE;\n        //\n        // console.log('pathName', pathName);\n        // console.log('backUrlKey', backUrlKey);\n        //\n        // if (Number(NETWORK_ID) !== Number(newNetworkId)) {\n        //   console.log('CHANGE_TO_OTHER_NETWORK');\n        //   if (pathName !== '/network-change') {\n        //     localStorage.setItem(backUrlKey, pathName);\n        //     if (checkIsAdminRoute(pathName)) {\n        //       history.push('/dashboard/network-change');\n        //     } else {\n        //       history.push('/network-change');\n        //     }\n        //   }\n        //   return true;\n        // }\n        //\n        // const backUrl = localStorage.getItem(backUrlKey);\n        // console.log('SAME_NETWORK');\n        // console.log('backUrl', backUrl);\n        //\n        // if (backUrl) {\n        //   if (backUrlKey === BACK_URL_NETWORK_CHANGE_OWNER) {\n        //     history.push('/dashboard');\n        //   } else {\n        //     history.push(backUrl);\n        //   }\n        //   setTimeout(() => {\n        //     localStorage.removeItem(backUrlKey);\n        //   }, 1000);\n        // }\n      });\n    }\n  }, [loginUser, loginInvestor]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.children\n  }, void 0, false);\n};\n\n_s(AppContainer, \"wPrNOwL2WEjCLd1L9hq0y8lX1W8=\", false, function () {\n  return [useDispatch, useTypedSelector, useTypedSelector];\n});\n\n_c = AppContainer;\nexport default _c2 = withRouter(AppContainer);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/AppContainer.tsx"],"names":["React","useEffect","useDispatch","userActions","logout","useTypedSelector","getWeb3Instance","isMetaMaskInstalled","withRouter","BigNumber","adminRoute","checkIsAdminRoute","checkIsInvestorRoute","publicRoute","config","EXPONENTIAL_AT","ROUNDING_MODE","ROUND_FLOOR","NETWORK_ID","process","env","REACT_APP_NETWORK_ID","BACK_URL_NETWORK_CHANGE","BACK_URL_NETWORK_CHANGE_OWNER","AppContainer","props","dispatch","data","loginUser","state","user","loginInvestor","investor","web3Instance","onLoginWithoutLoginPage","history","ethereum","window","request","method","then","currentNetworkId","pathName","location","pathname","console","log","localStorage","setItem","push","eth","getAccounts","accounts","length","type","USER_CONNECT_WALLET_LOCK","isInvestor","setTimeout","windowObj","on","newNetworkId","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAAyC,OAAzC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,iBAArD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAAQC,UAAR,EAAoBC,iBAApB,EAAuCC,oBAAvC,EAA6DC,WAA7D,QAA+E,SAA/E;;;AACAJ,SAAS,CAACK,MAAV,CAAiB;AAAEC,EAAAA,cAAc,EAAE;AAAlB,CAAjB;AACAN,SAAS,CAACK,MAAV,CAAiB;AAAEE,EAAAA,aAAa,EAAEP,SAAS,CAACQ;AAA3B,CAAjB;AAEA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAA/B;AACA,MAAMC,uBAAuB,GAAG,yBAAhC;AACA,MAAMC,6BAA6B,GAAG,+BAAtC;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAgB;AAAA;;AACnC,QAAMC,QAAQ,GAAGxB,WAAW,EAA5B;AACA,QAAM;AAAEyB,IAAAA,IAAI,EAAEC;AAAR,MAAsBvB,gBAAgB,CAACwB,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA5C;AACA,QAAM;AAAEH,IAAAA,IAAI,EAAEI;AAAR,MAA0B1B,gBAAgB,CAACwB,KAAK,IAAIA,KAAK,CAACG,QAAhB,CAAhD;AAEA,QAAMC,YAAY,GAAG3B,eAAe,EAApC;;AAEA,QAAM4B,uBAAuB,GAAG,YAAY;AAC1C,QAAI3B,mBAAmB,EAAvB,EAA2B;AACzB,YAAM;AAAE4B,QAAAA;AAAF,UAAcV,KAApB;AACA,YAAM;AAAEW,QAAAA;AAAF,UAAeC,MAArB;AAEAD,MAAAA,QAAQ,CAACE,OAAT,CAAiB;AACfC,QAAAA,MAAM,EAAE;AADO,OAAjB,EAEGC,IAFH,CAESC,gBAAD,IAA8B;AACpC,YAAIA,gBAAgB,IAAIA,gBAAgB,KAAKvB,UAA7C,EAAyD;AACvD,cAAIiB,OAAJ,EAAa;AACX,kBAAMO,QAAQ,GAAGP,OAAO,CAACQ,QAAR,CAAiBC,QAAlC;;AACA,gBAAIF,QAAQ,KAAK,iBAAb,IAAkCA,QAAQ,KAAK,2BAAnD,EAAgF;AAC9EG,cAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,gBAA5B;;AACA,kBAAI9B,iBAAiB,CAAC+B,QAAD,CAArB,EAAiC;AAC/BK,gBAAAA,YAAY,CAACC,OAAb,CAAqBzB,6BAArB,EAAoDmB,QAApD;AACAP,gBAAAA,OAAO,CAACc,IAAR,CAAa,2BAAb;AACD,eAHD,MAGO,IAAIrC,oBAAoB,CAAC8B,QAAD,CAAxB,EAAoC;AACzCK,gBAAAA,YAAY,CAACC,OAAb,CAAqB1B,uBAArB,EAA8CoB,QAA9C;AACAP,gBAAAA,OAAO,CAACc,IAAR,CAAa,iBAAb;AACD;AACF;AACF;;AACD;AACD;AACF,OAnBD;AAqBAhB,MAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEiB,GAAd,CAAkBC,WAAlB,GAAgCX,IAAhC,CAAqCY,QAAQ,IAAI;AAC/CP,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,YAAIM,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;AACzB3B,UAAAA,QAAQ,CAAC;AAAE4B,YAAAA,IAAI,EAAEnD,WAAW,CAACoD;AAApB,WAAD,CAAR;AACA,gBAAMb,QAAQ,GAAGP,OAAO,CAACQ,QAAR,CAAiBC,QAAlC;AAEAC,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCJ,QAAnC;;AAEA,cAAIA,QAAQ,KAAK,iBAAb,IAAkCA,QAAQ,KAAK,2BAAnD,EAAgF;AAC9EG,YAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AAEA,gBAAIU,UAAU,GAAG,KAAjB;;AACA,gBAAI5B,SAAS,IAAIjB,iBAAiB,CAACwB,OAAO,CAACQ,QAAR,CAAiBC,QAAlB,CAAlC,EAA+D;AAC7DY,cAAAA,UAAU,GAAG,KAAb;AACA9B,cAAAA,QAAQ,CAACtB,MAAM,CAACoD,UAAD,CAAP,CAAR;AACD,aAHD,MAGO,IAAIzB,aAAa,IAAInB,oBAAoB,CAACuB,OAAO,CAACQ,QAAR,CAAiBC,QAAlB,CAAzC,EAAsE;AAC3EY,cAAAA,UAAU,GAAG,IAAb;AACA9B,cAAAA,QAAQ,CAACtB,MAAM,CAACoD,UAAD,CAAP,CAAR;AACD;;AACDC,YAAAA,UAAU,CAAC,MAAM;AACf;AACA,kBAAI9C,iBAAiB,CAACwB,OAAO,CAACQ,QAAR,CAAiBC,QAAlB,CAArB,EAAkD;AAChDT,gBAAAA,OAAO,CAACc,IAAR,CAAavC,UAAU,CAAC,QAAD,CAAvB;AACD,eAFD,MAEO,IAAIE,oBAAoB,CAACuB,OAAO,CAACQ,QAAR,CAAiBC,QAAlB,CAAxB,EAAqD;AAC1DT,gBAAAA,OAAO,CAACc,IAAR,CAAapC,WAAW,CAAC,QAAD,CAAxB;AACD;AACF,aAPS,EAOP,IAPO,CAAV;AAQD;AACF;AACF,OA7BD;AA+BD;AACF,GA1DD;;AA4DAZ,EAAAA,SAAS,CAAC,MAAO,CACf;AACD,GAFQ,EAEN,CAACwB,KAAK,CAACkB,QAAN,CAAeC,QAAhB,CAFM,CAAT;AAIA3C,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyD,SAAS,GAAGrB,MAAlB;AACA,UAAM;AAAED,MAAAA;AAAF,QAAesB,SAArB;;AAEA,QAAItB,QAAJ,EAAc;AACZ;;AACA;;AACA;;AACA;;AACA;AAEAA,MAAAA,QAAQ,CAACuB,EAAT,CAAY,iBAAZ,EAA+B,UAAUP,QAAV,EAAyB,CACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OAtBD;AAwBAhB,MAAAA,QAAQ,CAACuB,EAAT,CAAY,cAAZ,EAA6BC,YAAD,IAA0B,CACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,OArCD;AAsCD;AACF,GA1EQ,EA0EN,CAAChC,SAAD,EAAYG,aAAZ,CA1EM,CAAT;AA4EA,sBACE;AAAA,cACGN,KAAK,CAACoC;AADT,mBADF;AAKD,CAxJD;;GAAMrC,Y;UACatB,W,EACWG,gB,EACIA,gB;;;KAH5BmB,Y;AA0JN,qBAAehB,UAAU,CAACgB,YAAD,CAAzB","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { userActions } from './store/constants/user';\nimport { logout } from './store/actions/user';\nimport { useTypedSelector } from './hooks/useTypedSelector';\nimport { getWeb3Instance, isMetaMaskInstalled } from './services/web3';\nimport { withRouter } from 'react-router-dom';\nimport InstallMetameask from './components/Base/InstallMetamask';\nimport BigNumber from 'bignumber.js';\nimport {adminRoute, checkIsAdminRoute, checkIsInvestorRoute, publicRoute} from \"./utils\";\nBigNumber.config({ EXPONENTIAL_AT: 50 });\nBigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_FLOOR });\n\nconst NETWORK_ID = process.env.REACT_APP_NETWORK_ID as string;\nconst BACK_URL_NETWORK_CHANGE = 'BACK_URL_NETWORK_CHANGE';\nconst BACK_URL_NETWORK_CHANGE_OWNER = 'BACK_URL_NETWORK_CHANGE_OWNER';\n\nconst AppContainer = (props: any) => {\n  const dispatch = useDispatch();\n  const { data: loginUser } = useTypedSelector(state => state.user);\n  const { data: loginInvestor } = useTypedSelector(state => state.investor);\n\n  const web3Instance = getWeb3Instance();\n\n  const onLoginWithoutLoginPage = async () => {\n    if (isMetaMaskInstalled()) {\n      const { history } = props;\n      const { ethereum } = window as any;\n\n      ethereum.request({\n        method: 'net_version'\n      }).then((currentNetworkId: string) => {\n        if (currentNetworkId && currentNetworkId !== NETWORK_ID) {\n          if (history) {\n            const pathName = history.location.pathname;\n            if (pathName !== '/network-change' && pathName !== '/dashboard/network-change') {\n              console.log('NET_VERSION:', currentNetworkId);\n              if (checkIsAdminRoute(pathName)) {\n                localStorage.setItem(BACK_URL_NETWORK_CHANGE_OWNER, pathName);\n                history.push('/dashboard/network-change');\n              } else if (checkIsInvestorRoute(pathName)) {\n                localStorage.setItem(BACK_URL_NETWORK_CHANGE, pathName);\n                history.push('/network-change');\n              }\n            }\n          }\n          return;\n        }\n      });\n\n      web3Instance?.eth.getAccounts().then(accounts => {\n        console.log('NO_ACCOUNT');\n        if (accounts.length === 0) {\n          dispatch({ type: userActions.USER_CONNECT_WALLET_LOCK });\n          const pathName = history.location.pathname;\n\n          console.log('dispatch(logout());', pathName);\n\n          if (pathName !== '/network-change' && pathName !== '/dashboard/network-change') {\n            console.log('Mismatch route: /network-change');\n\n            let isInvestor = false;\n            if (loginUser && checkIsAdminRoute(history.location.pathname)) {\n              isInvestor = false;\n              dispatch(logout(isInvestor));\n            } else if (loginInvestor && checkIsInvestorRoute(history.location.pathname)) {\n              isInvestor = true;\n              dispatch(logout(isInvestor));\n            }\n            setTimeout(() => {\n              // Switch redirect\n              if (checkIsAdminRoute(history.location.pathname)) {\n                history.push(adminRoute('/login'));\n              } else if (checkIsInvestorRoute(history.location.pathname)) {\n                history.push(publicRoute('/login'));\n              }\n            }, 1500);\n          }\n        }\n      });\n\n    }\n  };\n\n  useEffect(()  => {\n    // onLoginWithoutLoginPage();\n  }, [props.location.pathname]);\n\n  useEffect(() => {\n    const windowObj = window as any;\n    const { ethereum } = windowObj;\n\n    if (ethereum) {\n      /* web3Instance?.eth.getAccounts().then(accounts => { */\n      /*     accounts[0] && dispatch({ */\n      /*       type: userActions.USER_CONNECT_WALLET_SUCCESS, payload: accounts[0] */\n      /*     }); */\n      /* }); */\n\n      ethereum.on('accountsChanged', function (accounts: any) {\n        // console.log('accountsChanged');\n        // const account = accounts.length ? accounts[0] : '';\n        //\n        // if (account) {\n        //   if (loginUser && account !== loginUser.wallet_address) {\n        //     dispatch(logout());\n        //   }\n        //   if (loginInvestor && account !== loginInvestor.wallet_address) {\n        //     dispatch(logout(true));\n        //   } else {\n        //     dispatch({\n        //       type: userActions.USER_CONNECT_WALLET_SUCCESS,\n        //       payload: account,\n        //     });\n        //   }\n        // } else {\n        //   dispatch(logout());\n        //   dispatch({\n        //     type: userActions.USER_CONNECT_WALLET_LOCK,\n        //   });\n        // }\n      });\n\n      ethereum.on('chainChanged', (newNetworkId: string) => {\n        // console.log('chainChanged');\n        // const { history } = props;\n        // const pathName = history.location.pathname;\n        // let backUrlKey = checkIsAdminRoute(pathName) ? BACK_URL_NETWORK_CHANGE_OWNER : BACK_URL_NETWORK_CHANGE;\n        //\n        // console.log('pathName', pathName);\n        // console.log('backUrlKey', backUrlKey);\n        //\n        // if (Number(NETWORK_ID) !== Number(newNetworkId)) {\n        //   console.log('CHANGE_TO_OTHER_NETWORK');\n        //   if (pathName !== '/network-change') {\n        //     localStorage.setItem(backUrlKey, pathName);\n        //     if (checkIsAdminRoute(pathName)) {\n        //       history.push('/dashboard/network-change');\n        //     } else {\n        //       history.push('/network-change');\n        //     }\n        //   }\n        //   return true;\n        // }\n        //\n        // const backUrl = localStorage.getItem(backUrlKey);\n        // console.log('SAME_NETWORK');\n        // console.log('backUrl', backUrl);\n        //\n        // if (backUrl) {\n        //   if (backUrlKey === BACK_URL_NETWORK_CHANGE_OWNER) {\n        //     history.push('/dashboard');\n        //   } else {\n        //     history.push(backUrl);\n        //   }\n        //   setTimeout(() => {\n        //     localStorage.removeItem(backUrlKey);\n        //   }, 1000);\n        // }\n\n      });\n    }\n  }, [loginUser, loginInvestor]);\n\n  return (\n    <>\n      {props.children}\n    </>\n  );\n};\n\nexport default withRouter(AppContainer);\n"]},"metadata":{},"sourceType":"module"}