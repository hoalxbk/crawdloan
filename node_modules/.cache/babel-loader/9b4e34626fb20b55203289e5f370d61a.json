{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport useFetch from './useFetch';\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nconst usePools = () => {\n  _s();\n\n  const [poolsDone, setPoolsDone] = useState(false);\n  const {\n    loading,\n    error,\n    data\n  } = useFetch(`/pools?limit=100`);\n  const {\n    data: connectedAccountTier\n  } = useTypedSelector(state => state.userTier);\n  const pools = useMemo(() => {\n    if (data && !loading && !error && poolsDone) {\n      const result = data.data.map(p => {\n        return { ...p,\n          // token_images: `${BASE_URL}/image/${p.token_images}`,\n          // banner: `${BASE_URL}/image/${p.banner}`,\n          decimals: p.campaign_hash == null || p.campaign_hash == '' || p.campaign_hash == 'TBD' ? 18 : p.decimals,\n          campaign_hash: p.campaign_hash == null || p.campaign_hash == '' || p.campaign_hash == 'TBD' ? 'Token contract not available yet.' : p.campaign_hash\n        };\n      });\n      return result;\n    }\n\n    return;\n  }, [data, loading, error, poolsDone, connectedAccountTier]);\n  const pagination = useMemo(() => {\n    if (data && !loading && !error && poolsDone) {\n      return {\n        page: data.page,\n        lastPage: data.lastPage,\n        perPage: data.perPage,\n        total: data.total\n      };\n    }\n\n    return;\n  }, [data, loading, error, poolsDone, connectedAccountTier]);\n  useEffect(() => {\n    data && setPoolsDone(true);\n  }, [data]);\n  return {\n    pools,\n    pagination,\n    loading: !poolsDone\n  };\n};\n\n_s(usePools, \"D5ouA69d+oWYM8SPtsmY7yQqr/g=\", false, function () {\n  return [useFetch, useTypedSelector];\n});\n\nexport default usePools;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/hooks/usePools.ts"],"names":["useEffect","useMemo","useState","useTypedSelector","useFetch","BASE_URL","process","env","REACT_APP_API_BASE_URL","usePools","poolsDone","setPoolsDone","loading","error","data","connectedAccountTier","state","userTier","pools","result","map","p","decimals","campaign_hash","pagination","page","lastPage","perPage","total"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAGA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAA7B;;AAsCA,MAAMC,QAAQ,GAAG,MAAuB;AAAA;;AACtC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA4BV,QAAQ,CAAO,kBAAP,CAA1C;AACA,QAAM;AAAEU,IAAAA,IAAI,EAAEC;AAAR,MAAiCZ,gBAAgB,CAACa,KAAK,IAAIA,KAAK,CAACC,QAAhB,CAAvD;AAEA,QAAMC,KAAK,GAAGjB,OAAO,CAAC,MAAM;AAC1B,QAAIa,IAAI,IAAI,CAACF,OAAT,IAAoB,CAACC,KAArB,IAA8BH,SAAlC,EAA8C;AAC5C,YAAMS,MAAM,GAAGL,IAAI,CAACA,IAAL,CAAUM,GAAV,CAAeC,CAAD,IAAY;AAEvC,eAAO,EACL,GAAGA,CADE;AAEL;AACA;AACAC,UAAAA,QAAQ,EAAGD,CAAC,CAACE,aAAF,IAAmB,IAAnB,IAA2BF,CAAC,CAACE,aAAF,IAAmB,EAA9C,IAAoDF,CAAC,CAACE,aAAF,IAAmB,KAAxE,GAAiF,EAAjF,GAAsFF,CAAC,CAACC,QAJ7F;AAKLC,UAAAA,aAAa,EAAGF,CAAC,CAACE,aAAF,IAAmB,IAAnB,IAA2BF,CAAC,CAACE,aAAF,IAAmB,EAA9C,IAAoDF,CAAC,CAACE,aAAF,IAAmB,KAAxE,GAAiF,mCAAjF,GAAuHF,CAAC,CAACE;AALnI,SAAP;AAOD,OATc,CAAf;AAUA,aAAOJ,MAAP;AACD;;AAED;AACD,GAhBoB,EAgBlB,CAACL,IAAD,EAAOF,OAAP,EAAgBC,KAAhB,EAAuBH,SAAvB,EAAkCK,oBAAlC,CAhBkB,CAArB;AAkBA,QAAMS,UAAU,GAAGvB,OAAO,CAAC,MAAM;AAC/B,QAAIa,IAAI,IAAI,CAACF,OAAT,IAAoB,CAACC,KAArB,IAA8BH,SAAlC,EAA8C;AAC5C,aAAO;AACLe,QAAAA,IAAI,EAAEX,IAAI,CAACW,IADN;AAELC,QAAAA,QAAQ,EAAEZ,IAAI,CAACY,QAFV;AAGLC,QAAAA,OAAO,EAAEb,IAAI,CAACa,OAHT;AAILC,QAAAA,KAAK,EAAEd,IAAI,CAACc;AAJP,OAAP;AAMD;;AAED;AACD,GAXyB,EAWvB,CAACd,IAAD,EAAOF,OAAP,EAAgBC,KAAhB,EAAuBH,SAAvB,EAAkCK,oBAAlC,CAXuB,CAA1B;AAaAf,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,IAAI,IAAIH,YAAY,CAAC,IAAD,CAApB;AACD,GAFQ,EAEN,CAACG,IAAD,CAFM,CAAT;AAIA,SAAQ;AACNI,IAAAA,KADM;AAENM,IAAAA,UAFM;AAGNZ,IAAAA,OAAO,EAAE,CAACF;AAHJ,GAAR;AAKD,CA7CD;;GAAMD,Q;UAE8BL,Q,EACKD,gB;;;AA4CzC,eAAeM,QAAf","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport useFetch from './useFetch';\nimport useTokenDetails, { TokenType } from './useTokenDetails';\n\nconst BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nexport type PoolDetails = {\n  id: number;\n  website: string;\n  amount: number;\n  ethRate: number;\n  method: string;\n  type: string;\n  tokenDetails: TokenType;\n  title: string;\n  buyLimit: number[],\n  connectedAccountBuyLimit: number,\n  poolAddress: string;\n  joinTime: string;\n  endJoinTime: string;\n  startBuyTime: string;\n  endBuyTime: string;\n  releaseTime: string;\n  purchasableCurrency: string;\n  banner: string;\n}\n\nexport type Pools = []\n\nexport type Pagination = {\n  page: any,\n  lastPage: any,\n  perPage: any,\n  total: any\n}\n\nexport type PoolsReturnType ={\n  pools: Pools | [],\n  pagination: Pagination | undefined\n  loading: boolean\n}\n\nconst usePools = (): PoolsReturnType => {\n  const [poolsDone, setPoolsDone] = useState<boolean>(false);\n  const { loading, error, data }  = useFetch<any>(`/pools?limit=100`);\n  const { data: connectedAccountTier } = useTypedSelector(state => state.userTier);\n\n  const pools = useMemo(() => {\n    if (data && !loading && !error && poolsDone)  {\n      const result = data.data.map((p: any) => {\n\n        return {\n          ...p,\n          // token_images: `${BASE_URL}/image/${p.token_images}`,\n          // banner: `${BASE_URL}/image/${p.banner}`,\n          decimals: (p.campaign_hash == null || p.campaign_hash == '' || p.campaign_hash == 'TBD') ? 18 : p.decimals,\n          campaign_hash: (p.campaign_hash == null || p.campaign_hash == '' || p.campaign_hash == 'TBD') ? 'Token contract not available yet.' : p.campaign_hash\n        }\n      })\n      return result\n    }\n\n    return;\n  }, [data, loading, error, poolsDone, connectedAccountTier]);\n\n  const pagination = useMemo(() => {\n    if (data && !loading && !error && poolsDone)  {\n      return {\n        page: data.page,\n        lastPage: data.lastPage,\n        perPage: data.perPage,\n        total: data.total\n      }\n    }\n\n    return;\n  }, [data, loading, error, poolsDone, connectedAccountTier]);\n\n  useEffect(() => {\n    data && setPoolsDone(true)\n  }, [data])\n\n  return  {\n    pools,\n    pagination,\n    loading: !poolsDone\n  }\n}\n\nexport default usePools;\n"]},"metadata":{},"sourceType":"module"}