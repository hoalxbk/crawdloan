{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport axios from '../../../services/axios';\nimport { alertFailure } from '../../../store/actions/alert';\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst useUserPurchaseSignature = (connectedAccount, campaignId, authSignature) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [signature, setSignature] = useState(undefined);\n  const [minBuy, setMinBuy] = useState(\"\");\n  const [maxBuy, setMaxBuy] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const getUserSignature = async () => {\n      setError(\"\");\n      setSignature(\"\");\n\n      try {\n        const config = {\n          headers: {\n            msgSignature: MESSAGE_INVESTOR_SIGNATURE\n          }\n        };\n        const response = await axios.post('/user/deposit', {\n          campaign_id: campaignId,\n          wallet_address: connectedAccount,\n          signature: authSignature\n        }, config);\n\n        if (response.data && response.status && response.status === 200) {\n          const {\n            data,\n            message,\n            status\n          } = response.data;\n\n          if (data && status === 200) {\n            setSignature(data.signature);\n            setMinBuy(data.min_buy);\n            setMaxBuy(data.max_buy);\n          }\n\n          if (message && status !== 200) {\n            dispatch(alertFailure(message));\n            setError(message);\n            setSignature(\"\");\n          }\n        }\n      } catch (err) {\n        setError(err.message);\n        setSignature(\"\");\n      }\n    };\n\n    connectedAccount && campaignId && authSignature && getUserSignature();\n  }, [connectedAccount, campaignId, authSignature]);\n  return {\n    signature,\n    setSignature,\n    minBuy,\n    maxBuy,\n    error\n  };\n};\n\n_s(useUserPurchaseSignature, \"V0b7jo/QfTTN0pRJlDGVDTcg5zw=\", false, function () {\n  return [useDispatch];\n});\n\nexport default useUserPurchaseSignature;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/useUserPurchaseSignature.ts"],"names":["useDispatch","useState","useEffect","axios","alertFailure","MESSAGE_INVESTOR_SIGNATURE","process","env","REACT_APP_MESSAGE_INVESTOR_SIGNATURE","useUserPurchaseSignature","connectedAccount","campaignId","authSignature","dispatch","signature","setSignature","undefined","minBuy","setMinBuy","maxBuy","setMaxBuy","error","setError","getUserSignature","config","headers","msgSignature","response","post","campaign_id","wallet_address","data","status","message","min_buy","max_buy","err"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AAEA,MAAMC,0BAA0B,GAAGC,OAAO,CAACC,GAAR,CAAYC,oCAAZ,IAAoD,EAAvF;;AAEA,MAAMC,wBAAwB,GAAG,CAACC,gBAAD,EAA8CC,UAA9C,EAA8EC,aAA9E,KAAoH;AAAA;;AACnJ,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAqBe,SAArB,CAA1C;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAoB,EAApB,CAApC;AACA,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAoB,EAApB,CAApC;AACA,QAAM,CAACoB,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAqB,EAArB,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMqB,gBAAgB,GAAG,YAAY;AACnCD,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAP,MAAAA,YAAY,CAAC,EAAD,CAAZ;;AAEA,UAAI;AACF,cAAMS,MAAM,GAAG;AACbC,UAAAA,OAAO,EAAE;AACPC,YAAAA,YAAY,EAAErB;AADP;AADI,SAAf;AAKA,cAAMsB,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,IAAN,CAAW,eAAX,EAA4B;AACjDC,UAAAA,WAAW,EAAElB,UADoC;AAEjDmB,UAAAA,cAAc,EAAEpB,gBAFiC;AAGjDI,UAAAA,SAAS,EAAEF;AAHsC,SAA5B,EAIpBY,MAJoB,CAAvB;;AAMA,YAAIG,QAAQ,CAACI,IAAT,IAAiBJ,QAAQ,CAACK,MAA1B,IAAoCL,QAAQ,CAACK,MAAT,KAAoB,GAA5D,EAAiE;AAC/D,gBAAM;AAAED,YAAAA,IAAF;AAAQE,YAAAA,OAAR;AAAiBD,YAAAA;AAAjB,cAA4BL,QAAQ,CAACI,IAA3C;;AACA,cAAIA,IAAI,IAAIC,MAAM,KAAK,GAAvB,EAA4B;AAC1BjB,YAAAA,YAAY,CAACgB,IAAI,CAACjB,SAAN,CAAZ;AACAI,YAAAA,SAAS,CAACa,IAAI,CAACG,OAAN,CAAT;AACAd,YAAAA,SAAS,CAACW,IAAI,CAACI,OAAN,CAAT;AACD;;AAED,cAAIF,OAAO,IAAID,MAAM,KAAK,GAA1B,EAA+B;AAC7BnB,YAAAA,QAAQ,CAACT,YAAY,CAAC6B,OAAD,CAAb,CAAR;AACAX,YAAAA,QAAQ,CAACW,OAAD,CAAR;AACAlB,YAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;AACF;AACF,OA1BD,CA0BE,OAAOqB,GAAP,EAAY;AACZd,QAAAA,QAAQ,CAACc,GAAG,CAACH,OAAL,CAAR;AACAlB,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;AACF,KAlCD;;AAmCFL,IAAAA,gBAAgB,IAAIC,UAApB,IAAkCC,aAAlC,IAAmDW,gBAAgB,EAAnE;AACD,GArCQ,EAqCN,CAACb,gBAAD,EAAmBC,UAAnB,EAA+BC,aAA/B,CArCM,CAAT;AAuCA,SAAO;AACLE,IAAAA,SADK;AAELC,IAAAA,YAFK;AAGLE,IAAAA,MAHK;AAILE,IAAAA,MAJK;AAKLE,IAAAA;AALK,GAAP;AAOD,CArDD;;GAAMZ,wB;UACaT,W;;;AAsDnB,eAAeS,wBAAf","sourcesContent":["import { useDispatch } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport axios from '../../../services/axios';\nimport { alertFailure } from '../../../store/actions/alert';\n\nconst MESSAGE_INVESTOR_SIGNATURE = process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE || \"\";\n\nconst useUserPurchaseSignature = (connectedAccount: string | undefined | null, campaignId: number | undefined, authSignature: string | undefined) => {\n  const dispatch = useDispatch();\n  const [signature, setSignature] = useState<string | undefined>(undefined);\n  const [minBuy, setMinBuy] = useState<string| undefined>(\"\");\n  const [maxBuy, setMaxBuy] = useState<string| undefined>(\"\");\n  const [error, setError] = useState<string | undefined>(\"\");\n\n  useEffect(() => {\n      const getUserSignature = async () => {\n        setError(\"\");\n        setSignature(\"\");\n\n        try {\n          const config = {\n            headers: {\n              msgSignature: MESSAGE_INVESTOR_SIGNATURE \n            }\n          }\n          const response = await axios.post('/user/deposit', {\n            campaign_id: campaignId,\n            wallet_address: connectedAccount,\n            signature: authSignature\n          }, config);\n\n          if (response.data && response.status && response.status === 200) {\n            const { data, message, status } = response.data;\n            if (data && status === 200) {\n              setSignature(data.signature);\n              setMinBuy(data.min_buy);\n              setMaxBuy(data.max_buy);\n            } \n\n            if (message && status !== 200) {\n              dispatch(alertFailure(message));\n              setError(message);\n              setSignature(\"\");\n            }\n          } \n        } catch (err) {\n          setError(err.message);\n          setSignature(\"\");\n        }\n      }\n    connectedAccount && campaignId && authSignature && getUserSignature();\n  }, [connectedAccount, campaignId, authSignature]);\n\n  return {\n    signature,\n    setSignature,\n    minBuy,\n    maxBuy,\n    error\n  }\n}\n\nexport default useUserPurchaseSignature;\n\n"]},"metadata":{},"sourceType":"module"}