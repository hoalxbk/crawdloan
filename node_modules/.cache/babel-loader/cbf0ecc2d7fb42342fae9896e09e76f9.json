{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport { getUserTierAlias } from '../../../utils/getUserTierAlias';\nimport { convertTimeToStringFormat, convertTimeToStringFormatWithoutGMT } from '../../../utils/convertDate';\nimport { getIconCurrencyUsdt } from \"../../../utils/usdt\";\nimport { getAccessPoolText } from \"../../../utils/campaign\";\nexport let PoolDetailKey;\n\n(function (PoolDetailKey) {\n  PoolDetailKey[\"website\"] = \"website\";\n  PoolDetailKey[\"swapAmount\"] = \"swapAmount\";\n  PoolDetailKey[\"exchangeRate\"] = \"exchangeRate\";\n  PoolDetailKey[\"usdtExchangeRate\"] = \"usdtExchangeRate\";\n  PoolDetailKey[\"method\"] = \"method\";\n  PoolDetailKey[\"type\"] = \"type\";\n  PoolDetailKey[\"minTier\"] = \"minTier\";\n  PoolDetailKey[\"deposited\"] = \"deposited\";\n  PoolDetailKey[\"joinTime\"] = \"joinTime\";\n  PoolDetailKey[\"buyTime\"] = \"buyTime\";\n})(PoolDetailKey || (PoolDetailKey = {}));\n\nconst usePoolDetailsMapping = poolDetails => {\n  if (poolDetails) {\n    const {\n      website,\n      amount,\n      ethRate,\n      type,\n      method,\n      tokenDetails,\n      purchasableCurrency,\n      minTier,\n      joinTime,\n      endJoinTime,\n      startBuyTime,\n      endBuyTime,\n      priceUsdt,\n      displayPriceRate\n    } = poolDetails;\n    const joinTimeInDate = new Date(Number(joinTime) * 1000);\n    const endJoinTimeInDate = new Date(Number(endJoinTime) * 1000);\n    const startBuyTimeInDate = new Date(Number(startBuyTime) * 1000);\n    const endBuyTimeInDate = new Date(Number(endBuyTime) * 1000);\n    const {\n      currencyIcon,\n      currencyName\n    } = getIconCurrencyUsdt(poolDetails);\n    const poolDetailsBasic = {\n      [PoolDetailKey.website]: {\n        display: website,\n        utilIcon: '/images/hyperlink.svg',\n        label: 'Website'\n      },\n      [PoolDetailKey.swapAmount]: {\n        display: `${numberWithCommas(amount.toString())} ${tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.symbol}`,\n        val: amount,\n        label: 'Swap Amount'\n      },\n      [PoolDetailKey.usdtExchangeRate]: {\n        display: `1 ${tokenDetails.symbol} = ${priceUsdt} USDT`,\n        reverse: `1 USDT = ${new BigNumber(1).div(priceUsdt).toNumber()} ${tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.symbol}`,\n        val: 10,\n        utilIcon: '/images/swap.svg',\n        label: 'Exchange Rate'\n      },\n      [PoolDetailKey.exchangeRate]: {\n        display: `1 ${tokenDetails.symbol} = ${ethRate} ${currencyName}`,\n        reverse: `1 ${currencyName} = ${new BigNumber(1).div(ethRate).toNumber()} ${tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.symbol}`,\n        val: 10,\n        utilIcon: '/images/swap.svg'\n      },\n      [PoolDetailKey.method]: {\n        display: getAccessPoolText(poolDetails),\n        label: 'Method'\n      },\n      [PoolDetailKey.type]: {\n        display: type === 'swap' ? 'Swap' : 'Claimable',\n        label: 'Type'\n      },\n      [PoolDetailKey.minTier]: {\n        display: minTier == 0 ? 'No tier required' : getUserTierAlias(minTier).text,\n        label: 'Min Tier',\n        image: getUserTierAlias(minTier).icon\n      },\n      [PoolDetailKey.deposited]: {\n        display: currencyName,\n        label: 'Supported',\n        image: currencyIcon\n      },\n      [PoolDetailKey.joinTime]: {\n        display: `${joinTime ? convertTimeToStringFormatWithoutGMT(joinTimeInDate) : 'TBA'}  -  ${endJoinTime ? convertTimeToStringFormat(endJoinTimeInDate) : 'TBA'}`,\n        label: 'Whitelist Time'\n      },\n      [PoolDetailKey.buyTime]: {\n        display: `${startBuyTime ? convertTimeToStringFormatWithoutGMT(startBuyTimeInDate) : 'TBA'}  -  ${endBuyTime ? convertTimeToStringFormat(endBuyTimeInDate) : 'TBA'}`,\n        label: 'Buy Time'\n      }\n    };\n    return poolDetailsBasic;\n  }\n};\n\nexport default usePoolDetailsMapping;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/usePoolDetailsMapping.ts"],"names":["BigNumber","numberWithCommas","getUserTierAlias","convertTimeToStringFormat","convertTimeToStringFormatWithoutGMT","getIconCurrencyUsdt","getAccessPoolText","PoolDetailKey","usePoolDetailsMapping","poolDetails","website","amount","ethRate","type","method","tokenDetails","purchasableCurrency","minTier","joinTime","endJoinTime","startBuyTime","endBuyTime","priceUsdt","displayPriceRate","joinTimeInDate","Date","Number","endJoinTimeInDate","startBuyTimeInDate","endBuyTimeInDate","currencyIcon","currencyName","poolDetailsBasic","display","utilIcon","label","swapAmount","toString","symbol","val","usdtExchangeRate","reverse","div","toNumber","exchangeRate","text","image","icon","deposited","buyTime"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\nimport { TokenType } from '../../../hooks/useTokenDetails';\nimport { numberWithCommas } from '../../../utils/formatNumber';\nimport { getUserTierAlias } from '../../../utils/getUserTierAlias';\nimport { convertTimeToStringFormat, convertTimeToStringFormatWithoutGMT } from '../../../utils/convertDate';\nimport {getIconCurrencyUsdt} from \"../../../utils/usdt\";\nimport {getAccessPoolText} from \"../../../utils/campaign\";\n\nexport enum PoolDetailKey {\n  website = 'website',\n  swapAmount = 'swapAmount',\n  exchangeRate = 'exchangeRate',\n  usdtExchangeRate = 'usdtExchangeRate',\n  method = 'method',\n  type = 'type',\n  minTier = 'minTier',\n  deposited = 'deposited',\n  joinTime = 'joinTime',\n  buyTime = 'buyTime'\n}\n\nexport type poolDetailKey = Extract<\n  PoolDetailKey,\n  PoolDetailKey.website |\n  PoolDetailKey.swapAmount |\n  PoolDetailKey.type |\n  PoolDetailKey.method |\n  PoolDetailKey.usdtExchangeRate |\n  PoolDetailKey.exchangeRate |\n  PoolDetailKey.minTier |\n  PoolDetailKey.deposited |\n  PoolDetailKey.joinTime |\n  PoolDetailKey.buyTime\n>\n\nexport type PoolDetailMapping = {\n  [key in PoolDetailKey]: {\n    display: string | number;\n    utilIcon?: string;\n    reverse?: string;\n    label?: string,\n    image?: string;\n  }\n};\n\nexport type PoolDetailMappingProps = {\n  website: string;\n  amount: number;\n  ethRate: number;\n  method: string;\n  type: string;\n  tokenDetails: TokenType;\n  purchasableCurrency: string;\n  minTier: number;\n  joinTime: string;\n  endJoinTime: string;\n  startBuyTime: string;\n  endBuyTime: string;\n  priceUsdt?: any;\n  displayPriceRate?: any;\n}\n\n\nconst usePoolDetailsMapping = (poolDetails: PoolDetailMappingProps | undefined): PoolDetailMapping | undefined => {\n  if (poolDetails) {\n    const {\n      website,\n      amount,\n      ethRate,\n      type,\n      method,\n      tokenDetails,\n      purchasableCurrency,\n      minTier,\n      joinTime,\n      endJoinTime,\n      startBuyTime,\n      endBuyTime,\n      priceUsdt,\n      displayPriceRate,\n  } = poolDetails;\n    const joinTimeInDate = new Date(Number(joinTime) * 1000);\n    const endJoinTimeInDate = new Date(Number(endJoinTime) * 1000);\n    const startBuyTimeInDate = new Date(Number(startBuyTime) * 1000);\n    const endBuyTimeInDate = new Date(Number(endBuyTime) * 1000);\n    const { currencyIcon, currencyName } = getIconCurrencyUsdt(poolDetails);\n\n    const poolDetailsBasic = {\n      [PoolDetailKey.website]: {\n        display: website,\n        utilIcon: '/images/hyperlink.svg',\n        label: 'Website'\n      },\n      [PoolDetailKey.swapAmount]: {\n        display: `${numberWithCommas(amount.toString())} ${tokenDetails?.symbol}`,\n        val: amount,\n        label: 'Swap Amount'\n      },\n      [PoolDetailKey.usdtExchangeRate]: {\n        display: `1 ${tokenDetails.symbol} = ${priceUsdt} USDT`,\n        reverse: `1 USDT = ${new BigNumber(1).div(priceUsdt).toNumber()} ${tokenDetails?.symbol}`,\n        val: 10,\n        utilIcon: '/images/swap.svg',\n        label: 'Exchange Rate',\n      },\n      [PoolDetailKey.exchangeRate]: {\n        display: `1 ${tokenDetails.symbol} = ${ethRate} ${currencyName}`,\n        reverse: `1 ${currencyName} = ${new BigNumber(1).div(ethRate).toNumber()} ${tokenDetails?.symbol}`,\n        val: 10,\n        utilIcon: '/images/swap.svg',\n      },\n      [PoolDetailKey.method]: {\n        display: getAccessPoolText(poolDetails),\n        label: 'Method'\n      },\n      [PoolDetailKey.type]: {\n        display: type ===  'swap' ? 'Swap': 'Claimable',\n        label: 'Type'\n      },\n      [PoolDetailKey.minTier]: {\n        display: minTier == 0 ? 'No tier required' : getUserTierAlias(minTier).text,\n        label: 'Min Tier',\n        image: getUserTierAlias(minTier).icon\n      },\n      [PoolDetailKey.deposited]: {\n        display: currencyName,\n        label: 'Supported',\n        image: currencyIcon,\n      },\n      [PoolDetailKey.joinTime]: {\n        display: `${joinTime ? convertTimeToStringFormatWithoutGMT(joinTimeInDate) : 'TBA'}  -  ${endJoinTime ? convertTimeToStringFormat(endJoinTimeInDate) : 'TBA'}`,\n        label: 'Whitelist Time'\n      },\n      [PoolDetailKey.buyTime]: {\n        display: `${startBuyTime ? convertTimeToStringFormatWithoutGMT(startBuyTimeInDate) : 'TBA'}  -  ${endBuyTime ? convertTimeToStringFormat(endBuyTimeInDate) : 'TBA'}`,\n        label: 'Buy Time'\n      }\n    }\n\n    return poolDetailsBasic;\n  }\n}\n\nexport default usePoolDetailsMapping;\n"]},"metadata":{},"sourceType":"module"}