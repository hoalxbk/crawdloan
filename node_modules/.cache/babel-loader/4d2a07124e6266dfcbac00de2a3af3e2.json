{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\nimport axios from '../../../services/axios';\nimport { alertFailure, alertSuccess } from '../../../store/actions/alert';\nimport useWalletSignature from '../../../hooks/useWalletSignature';\n\nconst usePoolJoinAction = ({\n  poolId\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account,\n    library\n  } = useWeb3React();\n  const [joinPoolSuccess, setJoinPoolSuccess] = useState(false);\n  const [poolJoinLoading, setPoolJoinLoading] = useState(false);\n  const {\n    signature,\n    signMessage,\n    setSignature,\n    error\n  } = useWalletSignature();\n  const joinPool = useCallback(async () => {\n    if (account && poolId && library) {\n      try {\n        setPoolJoinLoading(true);\n        await signMessage();\n      } catch (err) {\n        setPoolJoinLoading(false);\n        console.log('Error when signing: ', err.message);\n      }\n    }\n  }, [poolId, account, library, signMessage]);\n  useEffect(() => {\n    if (error && poolJoinLoading) {\n      setPoolJoinLoading(false);\n    }\n  }, [error]);\n  useEffect(() => {\n    const poolJoinRequestWithSignature = async () => {\n      if (signature && poolJoinLoading) {\n        const config = {\n          headers: {\n            msgSignature: process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE\n          }\n        };\n        const response = await axios.post(`/user/join-campaign`, {\n          signature,\n          wallet_address: account,\n          campaign_id: poolId\n        }, config);\n\n        if (response.data) {\n          if (response.data.status === 200) {\n            var _response$data;\n\n            dispatch(alertSuccess(response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message));\n            setJoinPoolSuccess(true);\n          }\n\n          if (response.data.status !== 200) {\n            dispatch(alertFailure(response.data.message));\n          }\n        }\n\n        setSignature(\"\");\n        setPoolJoinLoading(false);\n      }\n    };\n\n    poolJoinRequestWithSignature();\n  }, [signature, poolJoinLoading]);\n  return {\n    joinPool,\n    poolJoinLoading,\n    joinPoolSuccess\n  };\n};\n\n_s(usePoolJoinAction, \"p0mrDEEINv6P/L35e3QFP2TStDM=\", false, function () {\n  return [useDispatch, useWeb3React, useWalletSignature];\n});\n\nexport default usePoolJoinAction;","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/pages/BuyToken/hooks/usePoolJoinAction.ts"],"names":["useState","useCallback","useEffect","useDispatch","useWeb3React","axios","alertFailure","alertSuccess","useWalletSignature","usePoolJoinAction","poolId","dispatch","account","library","joinPoolSuccess","setJoinPoolSuccess","poolJoinLoading","setPoolJoinLoading","signature","signMessage","setSignature","error","joinPool","err","console","log","message","poolJoinRequestWithSignature","config","headers","msgSignature","process","env","REACT_APP_MESSAGE_INVESTOR_SIGNATURE","response","post","wallet_address","campaign_id","data","status"],"mappings":"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","sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\n\nimport axios from '../../../services/axios';\nimport { alertFailure, alertSuccess } from '../../../store/actions/alert';\nimport useWalletSignature from '../../../hooks/useWalletSignature';\n\ntype PoolDepositActionParams = {\n  poolId?: number;\n  connectedAccount?: string;\n}\n\nconst usePoolJoinAction = ({ poolId }: PoolDepositActionParams) => {\n  const dispatch = useDispatch();\n  const { account, library } = useWeb3React();\n  const [joinPoolSuccess, setJoinPoolSuccess] = useState<boolean>(false);\n  const [poolJoinLoading, setPoolJoinLoading] = useState<boolean>(false);\n  const { signature, signMessage, setSignature, error } = useWalletSignature();\n\n  const joinPool = useCallback(async () => {\n    if (account && poolId && library) {\n      try {\n        setPoolJoinLoading(true);\n\n        await signMessage();\n      } catch (err) {\n        setPoolJoinLoading(false);\n        console.log('Error when signing: ', err.message);\n      }\n    }\n  }, [poolId, account, library, signMessage]);\n\n  useEffect(() => {\n    if (error && poolJoinLoading) {\n      setPoolJoinLoading(false);\n    }\n  }, [error]);\n\n  useEffect(() => {\n    const poolJoinRequestWithSignature = async () => {\n      if (signature && poolJoinLoading) {\n        const config = {\n          headers: {\n            msgSignature: process.env.REACT_APP_MESSAGE_INVESTOR_SIGNATURE\n          }\n        }\n\n        const response = await axios.post(`/user/join-campaign`, {\n          signature,\n          wallet_address: account,\n          campaign_id: poolId,\n        }, config as any) as any;\n\n        if (response.data) {\n          if (response.data.status === 200) {\n            dispatch(alertSuccess(response?.data?.message));\n            setJoinPoolSuccess(true);\n          }\n\n          if (response.data.status !== 200) {\n            dispatch(alertFailure(response.data.message));\n          }\n        }\n\n        setSignature(\"\");\n        setPoolJoinLoading(false);\n      }\n    }\n\n    poolJoinRequestWithSignature();\n  }, [signature, poolJoinLoading]);\n\n  return {\n    joinPool,\n    poolJoinLoading,\n    joinPoolSuccess\n  }\n}\n\nexport default usePoolJoinAction;\n"]},"metadata":{},"sourceType":"module"}