{"ast":null,"code":"var _jsxFileName = \"/Users/lehoa/icetea/work/redkite/frontend-user/src/routes.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Route, Switch, withRouter } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useWeb3React } from '@web3-react/core';\nimport useProviderConnect from './components/Base/HeaderDefaultLayout/hooks/useProviderConnect';\nimport { settingAppNetwork, NetworkUpdateType } from './store/actions/appNetwork';\nimport { AppContext } from './AppContext';\nimport { clearAlert } from './store/actions/alert';\nimport NotFoundPage from './pages/NotFoundPage';\nimport ErrorBoundary from './components/Base/ErrorBoundary';\nimport BuyToken from './pages/BuyToken';\nimport Dashboard from './pages/Dashboard';\nimport NetworkChange from './pages/NetworkChange';\nimport ChangePassword from './pages/ChangePassword';\nimport ConfirmEmail from './pages/ConfirmEmail';\nimport AppContainer from \"./AppContainer\";\nimport PrivacyPolicy from \"./pages/PrivacyPolicy\";\nimport Terms from \"./pages/Terms\";\nimport InvestorRegister from \"./pages/Register/InvestorRegister\";\nimport InvestorForgotPassword from \"./pages/ForgotPassword/InvestorForgotPassword\";\nimport InvestorResetPassword from \"./pages/ResetPassword/InvestorResetPassword\";\nimport InvestorLogin from \"./pages/Login/InvestorLogin\";\nimport AccountV2 from \"./pages/AccountV2\";\nimport Landing from \"./pages/Landing\";\nimport Pools from \"./pages/Pools\"; //@ts-ignore\n\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\nimport ComingSoon from \"./pages/ComingSoon/ComingSoon\";\n/**\n * Main App routes.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Routes = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const alert = useSelector(state => state.alert);\n  const {\n    history\n  } = props;\n  const {\n    deactivate\n  } = useWeb3React();\n  const [binanceAvailable, setBinanceAvailable] = useState(false);\n  const [openConnectWallet, setOpenConnectWallet] = useState(false);\n  const [currentConnectedWallet, setCurrentConnectedWallet] = useState(undefined);\n\n  const logout = () => {\n    deactivate();\n    dispatch(settingAppNetwork(NetworkUpdateType.Wallet, undefined));\n    setCurrentConnectedWallet(undefined);\n    handleConnectorDisconnect();\n  };\n\n  const {\n    handleProviderChosen,\n    connectWalletLoading,\n    currentConnector,\n    walletName,\n    setWalletName,\n    loginError,\n    appNetworkLoading,\n    handleConnectorDisconnect\n  } = useProviderConnect(setOpenConnectWallet, openConnectWallet, binanceAvailable);\n  useEffect(() => {\n    document.onreadystatechange = function () {\n      if (document.readyState == \"complete\") {\n        setBinanceAvailable(true);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const {\n      type,\n      message\n    } = alert;\n\n    if (type && message) {\n      NotificationManager[type](message);\n    }\n  }, [alert]);\n  useEffect(() => {\n    history.listen((location, action) => {\n      dispatch(clearAlert());\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      binanceAvailable,\n      handleProviderChosen,\n      connectWalletLoading,\n      walletName,\n      setWalletName,\n      loginError,\n      appNetworkLoading,\n      handleConnectorDisconnect,\n      currentConnector,\n      logout,\n      setCurrentConnectedWallet,\n      openConnectWallet,\n      setOpenConnectWallet,\n      currentConnectedWallet\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${'/dashboard'}`,\n          component: Dashboard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: `${'/buy-token/:id'}`,\n          component: BuyToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: '/register',\n          component: InvestorRegister\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: '/login',\n          component: InvestorLogin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: '/forgot-password/investor',\n          exact: true,\n          component: InvestorForgotPassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: '/reset-password/investor/:token',\n          component: InvestorResetPassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: '/confirm-email/:token',\n          component: ConfirmEmail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: '/network-change',\n          component: NetworkChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: '/change-password/:role?',\n          component: ChangePassword\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: '/account',\n          component: AccountV2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: '/pools',\n          component: Pools\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: '/privacy',\n          component: PrivacyPolicy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: '/terms',\n          component: Terms\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: '/',\n          component: Landing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: '/coming-soon',\n          component: ComingSoon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          component: NotFoundPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Routes, \"NYc1wyLIx2d2oTxKT2IOGGog2f8=\", false, function () {\n  return [useDispatch, useSelector, useWeb3React, useProviderConnect];\n});\n\n_c = Routes;\nconst RoutesHistory = withRouter(Routes);\n_c2 = RoutesHistory;\n\nconst routing = function createRouting() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NotificationContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(AppContainer, {\n        children: /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n          children: /*#__PURE__*/_jsxDEV(RoutesHistory, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n/**\n * Wrap the app routes into router\n *\n * PROPS\n * =============================================================================\n * @returns {React.Node}\n */\n\n\nexport default routing;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Routes\");\n$RefreshReg$(_c2, \"RoutesHistory\");","map":{"version":3,"sources":["/Users/lehoa/icetea/work/redkite/frontend-user/src/routes.tsx"],"names":["React","useState","useEffect","HashRouter","Router","Route","Switch","withRouter","useSelector","useDispatch","useWeb3React","useProviderConnect","settingAppNetwork","NetworkUpdateType","AppContext","clearAlert","NotFoundPage","ErrorBoundary","BuyToken","Dashboard","NetworkChange","ChangePassword","ConfirmEmail","AppContainer","PrivacyPolicy","Terms","InvestorRegister","InvestorForgotPassword","InvestorResetPassword","InvestorLogin","AccountV2","Landing","Pools","NotificationContainer","NotificationManager","ComingSoon","Routes","props","dispatch","alert","state","history","deactivate","binanceAvailable","setBinanceAvailable","openConnectWallet","setOpenConnectWallet","currentConnectedWallet","setCurrentConnectedWallet","undefined","logout","Wallet","handleConnectorDisconnect","handleProviderChosen","connectWalletLoading","currentConnector","walletName","setWalletName","loginError","appNetworkLoading","document","onreadystatechange","readyState","type","message","listen","location","action","RoutesHistory","routing","createRouting"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Route, Switch, withRouter, RouteComponentProps, Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useWeb3React } from '@web3-react/core';\nimport useProviderConnect from './components/Base/HeaderDefaultLayout/hooks/useProviderConnect';\nimport { settingAppNetwork, NetworkUpdateType } from './store/actions/appNetwork';\nimport { AppContext } from './AppContext';\n\nimport { clearAlert } from './store/actions/alert'\nimport ErrorPage from './pages/ErrorPage';\nimport NotFoundPage from './pages/NotFoundPage';\nimport ErrorBoundary from './components/Base/ErrorBoundary';\nimport PrivateRoute from './components/Base/PrivateRoute';\n\nimport BuyToken from './pages/BuyToken';\nimport Dashboard from './pages/Dashboard';\nimport NetworkChange from './pages/NetworkChange';\nimport ChangePassword from './pages/ChangePassword';\nimport ConfirmEmail from './pages/ConfirmEmail';\nimport AppContainer from \"./AppContainer\";\nimport PrivacyPolicy from \"./pages/PrivacyPolicy\";\nimport Terms from \"./pages/Terms\";\n\nimport InvestorRegister from \"./pages/Register/InvestorRegister\";\nimport InvestorForgotPassword from \"./pages/ForgotPassword/InvestorForgotPassword\";\nimport InvestorResetPassword from \"./pages/ResetPassword/InvestorResetPassword\";\nimport InvestorLogin from \"./pages/Login/InvestorLogin\";\n\nimport AccountV2 from \"./pages/AccountV2\";\nimport Landing from \"./pages/Landing\";\nimport Pools from \"./pages/Pools\";\n\n//@ts-ignore\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\nimport 'react-notifications/lib/notifications.css';\nimport {adminRoute, publicRoute} from \"./utils\";\nimport ComingSoon from \"./pages/ComingSoon/ComingSoon\";\n\n/**\n * Main App routes.\n */\nconst Routes: React.FC<RouteComponentProps> = (props: RouteComponentProps) => {\n  const dispatch = useDispatch();\n  const alert = useSelector((state: any) => state.alert);\n  const { history } = props;\n\n  const { deactivate } = useWeb3React();\n  const [binanceAvailable, setBinanceAvailable] = useState(false);\n  const [openConnectWallet, setOpenConnectWallet] = useState<boolean>(false);\n  const [currentConnectedWallet, setCurrentConnectedWallet] = useState<any>(undefined);\n\n  const logout = () => {\n    deactivate();\n    dispatch(settingAppNetwork(NetworkUpdateType.Wallet, undefined));\n    setCurrentConnectedWallet(undefined);\n    handleConnectorDisconnect();\n  }\n\n  const { \n    handleProviderChosen, \n    connectWalletLoading, \n    currentConnector, \n    walletName, \n    setWalletName, \n    loginError,\n    appNetworkLoading,\n    handleConnectorDisconnect,\n  } = useProviderConnect(\n    setOpenConnectWallet, \n    openConnectWallet, \n    binanceAvailable\n  );\n\n  useEffect(() => {\n    document.onreadystatechange = function () {\n        if (document.readyState == \"complete\") {\n          setBinanceAvailable(true);\n        }\n    }\n  }, []);\n\n  useEffect(() => {\n    const { type, message } = alert;\n    if (type && message) {\n      NotificationManager[type](message);\n    }\n  }, [alert]);\n\n  useEffect(() => {\n    history.listen((location, action) => {\n      dispatch(clearAlert());\n    });\n  }, []);\n\n  return (\n    <AppContext.Provider \n      value={{ \n        binanceAvailable,\n        handleProviderChosen,\n        connectWalletLoading,\n        walletName,\n        setWalletName,\n        loginError, \n        appNetworkLoading,\n        handleConnectorDisconnect,\n        currentConnector,\n        logout,\n        setCurrentConnectedWallet,\n        openConnectWallet,\n        setOpenConnectWallet,\n        currentConnectedWallet\n      }}\n    >\n      <div>\n        <Switch>\n          {/* <Route\n            exact path=\"/\"\n            render={() => <Redirect to={`${'/home'}`} />}\n          /> */}\n          <Route exact path={`${'/dashboard'}`} component={Dashboard} />\n          <Route path={`${'/buy-token/:id'}`} component={BuyToken} />\n          <Route path={'/register'} component={InvestorRegister} />\n          <Route path={'/login'} component={InvestorLogin} />\n          <Route path={'/forgot-password/investor'} exact component={InvestorForgotPassword} />\n          <Route path={'/reset-password/investor/:token'} component={InvestorResetPassword} />\n          <Route path={'/confirm-email/:token'} component={ConfirmEmail} />\n          <Route path={'/network-change'} component={NetworkChange} />\n          <Route path={'/change-password/:role?'} component={ChangePassword} />\n          <Route path={'/account'} component={AccountV2} />\n          <Route path={'/pools'} component={Pools} />\n          <Route path={'/privacy'} component={PrivacyPolicy} />\n          <Route path={'/terms'} component={Terms} />\n          <Route path={'/'} component={Landing} />\n\n          <Route path={'/coming-soon'} component={ComingSoon} />\n          <Route component={NotFoundPage} />\n        </Switch>\n      </div>\n    </AppContext.Provider>\n  )\n};\n\nconst RoutesHistory = withRouter(Routes);\n\nconst routing = function createRouting() {\n  return (\n    <>\n      <NotificationContainer />\n      <Router>\n        <AppContainer>\n          <ErrorBoundary>\n            <RoutesHistory />\n          </ErrorBoundary>\n        </AppContainer>\n      </Router>\n    </>\n  );\n};\n/**\n * Wrap the app routes into router\n *\n * PROPS\n * =============================================================================\n * @returns {React.Node}\n */\nexport default routing;\n"]},"metadata":{},"sourceType":"module"}